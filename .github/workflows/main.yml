name: CI

# Controls when the action will run. Triggers the workflow on push
# or pull request events, but only for the primary branch.
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_flow:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: Install protobuf compiler (it's not already included in CI runner)
        run: sudo apt install -y libprotobuf-dev protobuf-compiler

        # This weird installation method is taken from this comment:
        # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
        # Also: https://github.com/rust-lang/rustup/issues/2070#issuecomment-545096849
      - name: Install rust toolchain
        run: rustup show

        # Provides musl-gcc and musl-g++ wrappers and related components, which are required for
        # Rust musl builds that have native C dependencies.
      - name: Install MUSL
        run: sudo apt-get install -y musl-tools

      # We require a minimal Go version of 1.17.
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17.3"
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - run: make extra-ci-runner-setup
      - run: make print-versions

      - name: Login to GitHub container registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
            docker login --username ${{ github.actor }} --password-stdin ghcr.io

      - name: Cache/Restore Rust dependencies.
        uses: actions/cache@v2
        with:
          # See: https://doc.rust-lang.org/nightly/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          # TODO: Try https://github.com/Swatinem/rust-cache
          path: |
            ~/.cargo/registry/cache
            ~/.cargo/registry/index
            ~/.cargo/git/db
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v2

      - name: Cache/Restore Go dependencies.
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      # Build and test all the things.
      - run: make install-tools
      - run: go mod download
      - run: cargo check --release
      - run: make rust-test
      - run: make go-test-ci
      - run: make package catalog-test
      - run: make end-to-end-test

      - name: Tidy up, and ensure that generated files are unchanged.
        run: |
          # catalog-test dirties the branch by creating examples/examples.db.
          git clean --force -d
          git diff
          [[ -z "$(git status --porcelain)" ]] || exit 1
        shell: bash

      # Package and push images.
      - run: make docker-image
      - run: make docker-push
      - if: ${{ github.ref == 'refs/heads/master' }}
        run: make docker-push-dev

      - if: ${{ github.ref == 'refs/heads/master' }}
        name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          body: |
            This is the latest development build, which gets updated on every successful build of the master branch.
          draft: false
          prerelease: true
          tag_name: dev
          generate_release_notes: false
          files: .build/package/flow-x86-linux.tar.gz

      # Cleanup in preparation for populating the build cache.
      - run: cargo install cargo-cache --no-default-features --features ci-autoclean
      - run: cargo-cache

  build_control:
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:14
        env:
          # `POSTGRES_HOST` is set to `postgres`
          POSTGRES_DB: flow
          POSTGRES_PASSWORD: flow
          POSTGRES_PORT: 5432
          POSTGRES_USER: flow
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          echo ::set-output name=tag::${TAG}

      - name: Login to GitHub container registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
            docker login --username ${{ github.actor }} --password-stdin ghcr.io

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: |
            network=host

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: control.Dockerfile
          load: true
          tags: ghcr.io/estuary/control:test

      - name: Push control image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: control.Dockerfile
          push: true
          tags: ghcr.io/estuary/control:${{ steps.prep.outputs.tag }}

      - name: Push control image with 'dev' tag
        if: ${{ github.event_name == 'push' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: control.Dockerfile
          push: true # See 'if' above
          tags: ghcr.io/estuary/control:dev
