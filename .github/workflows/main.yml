name: CI

# Controls when the action will run. Triggers the workflow on push
# or pull request events, but only for the primary branch.
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  publishBuilderImage:
    runs-on: ubuntu-20.04
    outputs:
      builderImageTag: ${{ steps.set-builder-tag.outputs.builderImageTag }}
      #builderImagePushed: contains(steps.changed-files.outputs.modified_files, '.devcontainer/builder.Dockerfile')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
          submodules: false
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v12.2
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        #if: contains(steps.changed-files.outputs.modified_files, '.devcontainer/builder.Dockerfile')
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        #if: contains(steps.changed-files.outputs.modified_files, '.devcontainer/builder.Dockerfile')
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: ghcr.io/estuary/flow-builder
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        #if: contains(steps.changed-files.outputs.modified_files, '.devcontainer/builder.Dockerfile')
        uses: docker/build-push-action@v2
        with:
          context: .devcontainer
          file: .devcontainer/builder.Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          push: true
      - name: Set builder image tag
        id: set-builder-tag
        env:
          # ${{ contains(steps.changed-files.outputs.modified_files, '.devcontainer/builder.Dockerfile') }}
          IS_BUILDER_MODIFIED: 'true'
          BRANCH_TAG: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
        run: |
          if [[ "$IS_BUILDER_MODIFIED" == "true" ]]; then
            echo "::set-output name=builderImageTag::${BRANCH_TAG}"
          else
            echo "::set-output name=builderImageTag::master"
          fi
        
    
  test:
    needs: publishBuilderImage
    runs-on: ubuntu-20.04
    container: ghcr.io/estuary/flow-builder:${{ needs.publishBuilderImage.outputs.builderImageTag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - run: make print-versions

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache/Restore Rust dependencies.
        uses: actions/cache@v2
        with:
          # See: https://doc.rust-lang.org/nightly/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          # TODO: Try https://github.com/Swatinem/rust-cache
          path: |
            ~/.cargo/registry/cache
            ~/.cargo/registry/index
            ~/.cargo/git/db
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v2

      - name: Cache/Restore Go dependencies.
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      # Build and test all the things.
      - run: make install-tools
      - run: go mod download
      - run: make rust-build
      - run: make rust-test
      - run: make go-test-ci
      - run: make catalog-test
      - run: make end-to-end-test

      - name: Tidy up, and ensure that generated files are unchanged.
        run: |
          # catalog-test dirties the branch by creating examples/examples.db.
          git clean --force -d
          git diff
          [[ -z "$(git status --porcelain)" ]] || exit 1
        shell: bash

      # Cleanup in preparation for populating the build cache.
      - run: cargo install cargo-cache --no-default-features --features ci-autoclean
      - run: cargo-cache

  publish:
    runs-on: ubuntu-20.04
    needs: publishBuilderImage
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: ghcr.io/estuary/flow

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          build-args: BUILDER_VERSION=${{ needs.publishBuilderImage.outputs.builderImageTag }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          push: true
