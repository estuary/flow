name: dekaf

on:
  push:
    branches: [master]
    paths:
      - "crates/dekaf/**"
      - "crates/proto-**"
      - "crates/allocator"
      - "crates/avro"
      - "crates/doc"
      - "crates/flow-client"
      - "crates/gazette"
      - "crates/json"
      - "crates/labels"
      - "crates/models"
      - "crates/ops"
      - "crates/simd-doc"
      - "Cargo.lock"
  pull_request:
    branches: [master]
    paths:
      - ".github/workflows/dekaf.yaml"
      - "crates/dekaf/**"
      - "Cargo.lock"

jobs:
  build-dekaf:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: false
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - name: Login to GitHub container registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
            docker login --username ${{ github.actor }} --password-stdin ghcr.io

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            crates/dekaf
      - name: build `dekaf`
        run: cargo build --release -p dekaf && cp target/release/dekaf ./dekaf-bin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Run git describe
        id: git_describe
        run: echo "describe_output=$(git describe --dirty --tags)" >> $GITHUB_OUTPUT
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image.
      # The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/estuary/dekaf
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{steps.git_describe.outputs.describe_output}}
            type=ref,event=branch
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@9552610e81f4c8002dadc4670f1fdced6a2c830b
        with:
          context: .
          file: crates/dekaf/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # cache-from: type=registry,ref=estuary/dekaf:buildcache
          # cache-to: type=registry,ref=estuary/dekaf:buildcache,mode=max