"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[656],{5481:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"concepts/advanced/reduction-strategies/append","title":"append","description":"Using the append reduction strategy","source":"@site/docs/concepts/advanced/reduction-strategies/append.md","sourceDirName":"concepts/advanced/reduction-strategies","slug":"/reference/reduction-strategies/append/","permalink":"/pr-preview/pr-2450/reference/reduction-strategies/append/","draft":false,"unlisted":false,"editUrl":"https://github.com/estuary/flow/edit/master/site/docs/concepts/advanced/reduction-strategies/append.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"description":"Using the append reduction strategy","slug":"/reference/reduction-strategies/append/","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Reduction strategies","permalink":"/pr-preview/pr-2450/reference/reduction-strategies/"},"next":{"title":"firstWriteWins and lastWriteWins","permalink":"/pr-preview/pr-2450/reference/reduction-strategies/firstwritewins-and-lastwritewins/"}}');var s=t(74848),a=t(28453);const i={description:"Using the append reduction strategy",slug:"/reference/reduction-strategies/append/",sidebar_position:1},d="append",c={},o=[];function p(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"append",children:"append"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"append"})," works with arrays, and extends the left-hand array with items from the right-hand side."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'collections:\n  - name: example/reductions/append\n    schema:\n      type: object\n      reduce: { strategy: merge }\n      properties:\n        key: { type: string }\n        value:\n          # Append only works with type "array".\n          # Others will throw an error at build time.\n          type: array\n          reduce: { strategy: append }\n      required: [key]\n    key: [/key]\n\ntests:\n  "Expect we can append arrays":\n    - ingest:\n        collection: example/reductions/append\n        documents:\n          - { key: "key", value: [1, 2] }\n          - { key: "key", value: [3, null, "abc"] }\n    - verify:\n        collection: example/reductions/append\n        documents:\n          - { key: "key", value: [1, 2, 3, null, "abc"] }\n'})}),"\n",(0,s.jsx)(n.p,{children:"The right-hand side must always be an array. The left-hand side may be null, in which case the reduction is treated as a no-op and its result remains null. This can be combined with schema conditionals to toggle whether reduction-reduction should be done or not."})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var r=t(96540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);