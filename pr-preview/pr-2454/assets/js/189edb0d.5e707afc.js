"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5352],{10117:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guides/flowctl/create-derivation","title":"Create a Derivation","description":"Once you\'re familiar with creating a basic Data Flow, you can take things a step further","source":"@site/docs/guides/flowctl/create-derivation.md","sourceDirName":"guides/flowctl","slug":"/guides/flowctl/create-derivation","permalink":"/pr-preview/pr-2454/guides/flowctl/create-derivation","draft":false,"unlisted":false,"editUrl":"https://github.com/estuary/flow/edit/master/site/docs/guides/flowctl/create-derivation.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Edit a draft created in the web app","permalink":"/pr-preview/pr-2454/guides/flowctl/edit-draft-from-webapp"},"next":{"title":"Troubleshoot a task with flowctl","permalink":"/pr-preview/pr-2454/guides/flowctl/troubleshoot-task"}}');var r=i(74848),t=i(28453);const o={sidebar_position:3},l="Create a Derivation",a={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Start a derivation in the UI",id:"start-a-derivation-in-the-ui",level:2},{value:"Create a derivation locally",id:"create-a-derivation-locally",level:2},{value:"Add a SQL derivation",id:"add-a-sql-derivation",level:2},{value:"Add a TypeScript derivation",id:"add-a-typescript-derivation",level:2},{value:"Updating an existing derivation",id:"updating-an-existing-derivation",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"create-a-derivation",children:"Create a Derivation"})}),"\n",(0,r.jsxs)(n.p,{children:["Once you're familiar with creating a basic ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-2454/concepts/#essential-concepts",children:"Data Flow"}),", you can take things a step further\nand transform your data with ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-2454/concepts/derivations",children:"derivations"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"derivation"})," is a kind of Flow collection that results from the transformation of one or more other collections.\nThis transformed stream of data keeps the order of the source data intact,\nand can then be ",(0,r.jsx)(n.strong,{children:"materialized"})," to an outside system or further transformed with another derivation.\nWhen you master derivations, you unlock the full flexibility and power of Flow."]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["A Flow account and access to the web app.\nIf you don't have an account yet, ",(0,r.jsx)(n.a,{href:"https://dashboard.estuary.dev",children:"go to the web app"})," to register for free."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["An existing Flow ",(0,r.jsx)(n.strong,{children:"collection"}),". Typically, you create this through a ",(0,r.jsx)(n.strong,{children:"capture"})," in the Flow web application.\nIf you need help, see the ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-2454/guides/create-dataflow",children:"guide to create a Data Flow"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"flowctl"})," CLI ",(0,r.jsx)(n.a,{href:"/guides/get-started-with-flowctl",children:"installed and authenticated"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can authorize ",(0,r.jsx)(n.code,{children:"flowctl"})," with a refresh token:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/guides/how_to_generate_refresh_token",children:"Generate an Estuary Flow refresh token"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Run ",(0,r.jsx)(n.code,{children:"flowctl auth token --token <paste-token-here>"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"start-a-derivation-in-the-ui",children:"Start a derivation in the UI"}),"\n",(0,r.jsxs)(n.p,{children:["You can create a ",(0,r.jsx)(n.strong,{children:"draft"})," derivation in the UI to quickly set up a new derivation template.\nThis will generate stub files for you that you can use to complete your derivation."]}),"\n",(0,r.jsx)(n.p,{children:"To create a derivation in this manner:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Go to the ",(0,r.jsxs)(n.a,{href:"https://dashboard.estuary.dev/collections",children:[(0,r.jsx)(n.strong,{children:"collections"})," page"]})," in the dashboard."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click the ",(0,r.jsx)(n.strong,{children:"New Transformation"}),' button to open the "Derive A New Collection" modal.']}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Add"})," one or more collections you want to transform."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Choose between ",(0,r.jsx)(n.strong,{children:"SQL"})," or ",(0,r.jsx)(n.strong,{children:"TypeScript"})," for your language."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Enter a ",(0,r.jsx)(n.strong,{children:"name"})," for your derived collection."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click ",(0,r.jsx)(n.strong,{children:"Create Draft"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Your draft specification will be created and a new modal screen will be displayed with instructions for proceeding with ",(0,r.jsx)(n.code,{children:"flowctl"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Make sure to ",(0,r.jsx)(n.strong,{children:"copy"})," the provided ",(0,r.jsx)(n.code,{children:"flowctl draft select"})," command. This includes the ID of your new draft specification."]}),"\n",(0,r.jsx)(n.p,{children:"Run the command in a terminal in your development environment. This sets your derivation spec as your current draft."}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["If you close the modal before copying your draft ID, you can find your draft by running ",(0,r.jsx)(n.code,{children:"flowctl draft list"}),"."]}),(0,r.jsxs)(n.p,{children:["Then plug the ID into: ",(0,r.jsx)(n.code,{children:"flowctl draft select --id <your:draft:id>"}),"."]})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"To start developing your draft locally, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"flowctl draft develop\n"})}),"\n",(0,r.jsx)(n.p,{children:"This command pulls the current draft specification, generating a new file structure in your local development environment."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Open the generated files in a code editor. To complete your transformation, you will edit:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"deepest-nested"})," ",(0,r.jsx)(n.code,{children:"flow.yaml"})," file. This should contain your desired ",(0,r.jsx)(n.a,{href:"/concepts/schemas",children:"schema"})," and specification for your derived collection."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/concepts/collections/#specification",children:"Learn more about crafting a collection specification"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["SQL or TypeScript ",(0,r.jsx)(n.strong,{children:"transformation files"}),". These are generated based on your chosen language and will contain your transformation logic."]}),"\n",(0,r.jsxs)(n.p,{children:["The resulting fields should match the schema defined in your ",(0,r.jsx)(n.code,{children:"flow.yaml"})," file."]}),"\n",(0,r.jsxs)(n.p,{children:["You can see more on modifying these files in the ",(0,r.jsx)(n.a,{href:"#add-a-sql-derivation",children:"SQL"})," and ",(0,r.jsx)(n.a,{href:"#add-a-typescript-derivation",children:"TypeScript"})," sections below."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Preview your results to ensure your transformation is working as expected:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"flowctl preview --source flow.yaml\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Once you are happy with your results, you can publish your draft back to Estuary.\nYou will first need to sync your local copy with the global draft:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"flowctl draft author --source flow.yaml\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Publish the specification."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"flowctl draft publish\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This removes the derivation from your drafts. To modify your specification again later, you can access it with the ",(0,r.jsx)(n.code,{children:"flowctl catalog"})," command."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The derivation you created is now live and ready for further use.\nYou can access it from the web application and ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-2454/guides/create-dataflow#create-a-materialization",children:"materialize it to a destination"}),",\njust as you would any other Flow collection."]}),"\n",(0,r.jsx)(n.h2,{id:"create-a-derivation-locally",children:"Create a derivation locally"}),"\n",(0,r.jsxs)(n.p,{children:["In Estuary, a derivation is a new collection that has been ",(0,r.jsx)(n.strong,{children:"derived"})," from an existing source collection."]}),"\n",(0,r.jsxs)(n.p,{children:["You can therefore create a derivation specification from scratch using a ",(0,r.jsx)(n.code,{children:"flow.yaml"})," file, similar to any ",(0,r.jsx)(n.a,{href:"/concepts/collections/#specification",children:"collection specification"}),".\nFor this example, we will add our new derived collection to our source collection spec."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Locate the source collection for your derivation. Either:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Check the web app's ",(0,r.jsx)(n.strong,{children:"Collections"}),".\nAll published entities to which you have access are listed and can be searched."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Run ",(0,r.jsx)(n.code,{children:"flowctl catalog list --collections"}),". This command returns a complete list of collections to which you have access.\nYou can refine by specifying a ",(0,r.jsx)(n.code,{children:"--prefix"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Pull the source collection locally using the full collection name."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"flowctl catalog pull-specs --name acmeCo/resources/anvils\n"})}),"\n",(0,r.jsx)(n.p,{children:"The source files are written to your current working directory."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Each slash-delimited prefix of your collection name has become a folder. Open the nested folders to find the ",(0,r.jsx)(n.code,{children:"flow.yaml"})," file with the collection specification."]}),"\n",(0,r.jsxs)(n.p,{children:["Following the example above, you'd open the folders called ",(0,r.jsx)(n.code,{children:"acmeCo"}),", then ",(0,r.jsx)(n.code,{children:"resources"})," to find the correct ",(0,r.jsx)(n.code,{children:"flow.yaml"})," file."]}),"\n",(0,r.jsx)(n.p,{children:"The file contains the source collection specification and schema."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add the derivation as a second collection in the ",(0,r.jsx)(n.code,{children:"flow.yaml"})," file."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Write the ",(0,r.jsx)(n.a,{href:"/concepts/schemas",children:"schema"})," you'd like your derivation to conform to and specify the ",(0,r.jsx)(n.a,{href:"/concepts/collections/#keys",children:"collection key"}),". Reference the source collection's schema, and keep in mind the transformation required to get from the source schema to the new schema."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add the ",(0,r.jsx)(n.code,{children:"derive"})," stanza. See examples for ",(0,r.jsx)(n.a,{href:"#add-a-sql-derivation",children:"SQL"})," and ",(0,r.jsx)(n.a,{href:"#add-a-sql-derivation",children:"TypeScript"})," below. Give your transform a unique name."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Stub out the SQL or TypeScript files for your transform."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"flowctl generate --source flow.yaml\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Locate the generated file, likely in the same subdirectory as the ",(0,r.jsx)(n.code,{children:"flow.yaml"})," file you've been working in."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Write your transformation."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Preview the derivation locally."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"flowctl preview --source flow.yaml\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["If the preview output appears how you'd expect, ",(0,r.jsx)(n.strong,{children:"publish"})," the derivation."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"flowctl catalog publish --source flow.yaml\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The derivation you created is now live and ready for further use.\nYou can access it from the web application and ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-2454/guides/create-dataflow#create-a-materialization",children:"materialize it to a destination"}),",\njust as you would any other Flow collection."]}),"\n",(0,r.jsx)(n.h2,{id:"add-a-sql-derivation",children:"Add a SQL derivation"}),"\n",(0,r.jsxs)(n.p,{children:["If you chose ",(0,r.jsx)(n.strong,{children:"SQL"})," as your transformation language, follow these steps."]}),"\n",(0,r.jsxs)(n.p,{children:["Along with the derivation's ",(0,r.jsx)(n.code,{children:"flow.yaml"})," you worked with in the previous steps, you may generate two types of SQL file:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"lambda"})," file. This is where you'll write your first SQL transformation.\nIts name follows the pattern ",(0,r.jsx)(n.code,{children:"derivation-name.lambda.source-collection-name.sql"}),".\nUsing the example above, it'd be called ",(0,r.jsx)(n.code,{children:"anvil-status.lambda.anvils.sql"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"migrations"})," file. ",(0,r.jsx)(n.a,{href:"/concepts/derivations/#migrations",children:"Migrations"})," allow you to leverage other features of the sqlite database that backs your derivation by creating tables, indices, views, and more.\nIts name follows the pattern ",(0,r.jsx)(n.code,{children:"derivation-name.migration.0.sql"}),".\nUsing the example above, it'd be called ",(0,r.jsx)(n.code,{children:"anvil-status.migration.0.sql"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Open the ",(0,r.jsx)(n.code,{children:"flow.yaml"})," file for your derivation. It looks something like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"collections:\n  acmeCo/resources/anvil-status:\n    schema:\n      properties:\n        your_key:\n          type: string\n        required:\n          - your_key\n      type: object\n    key:\n      - /your_key\n    derive:\n      using:\n        sqlite:\n          migrations:\n            - anvil-status.migration.0.sql\n      transforms:\n        - name: anvils\n          source: acmeCo/resources/anvils\n          shuffle: any\n          lambda: anvil-status.lambda.anvils.sql\n"})}),"\n",(0,r.jsx)(n.p,{children:"Note the stubbed out schema and key."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Write the ",(0,r.jsx)(n.a,{href:"/concepts/schemas",children:"schema"})," you'd like your derivation to conform to and specify its ",(0,r.jsx)(n.a,{href:"/concepts/collections/#keys",children:"collection key"}),". Keep in mind:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The source collection's schema."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The transformation required to get from the source schema to the new schema."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Give the transform a unique ",(0,r.jsx)(n.code,{children:"name"})," (by default, it's the name of the source collection)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"In the lambda file, write your SQL transformation."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{title:"Tip",type:"info",children:[(0,r.jsx)(n.p,{children:"For help writing your derivation, start with these examples:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/getting-started/tutorials/continuous-materialized-view",children:"Continuous materialized view tutorial"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/getting-started/tutorials/derivations_acmebank",children:"Acme Bank examples"})}),"\n"]}),(0,r.jsxs)(n.p,{children:["The main ",(0,r.jsx)(n.a,{href:"/concepts/derivations",children:"derivations page"})," includes many other examples and in-depth explanations of how derivations work."]})]}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If necessary, open the migration file and write your migration."}),"\n",(0,r.jsxs)(n.p,{children:["If you won't be using a migration, you can omit the ",(0,r.jsx)(n.code,{children:"migrations"})," stanza:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"derive:\n  using:\n    sqlite: {}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Preview the derivation locally."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"flowctl preview --source flow.yaml\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["If the preview output appears as expected, ",(0,r.jsx)(n.strong,{children:"publish"})," the derivation."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"flowctl catalog publish --source flow.yaml\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The derivation you created is now live and ready for further use.\nYou can access it from the web application and ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-2454/guides/create-dataflow#create-a-materialization",children:"materialize it to a destination"}),",\njust as you would any other Flow collection."]}),"\n",(0,r.jsx)(n.h2,{id:"add-a-typescript-derivation",children:"Add a TypeScript derivation"}),"\n",(0,r.jsxs)(n.p,{children:["If you chose ",(0,r.jsx)(n.strong,{children:"TypeScript"})," as your transformation language, follow these steps."]}),"\n",(0,r.jsxs)(n.p,{children:["Along with the derivation's ",(0,r.jsx)(n.code,{children:"flow.yaml"})," you worked with in the previous steps, you can create a file to handle the TypeScript transformation.\nIt follows the naming convention ",(0,r.jsx)(n.code,{children:"derivation-name.ts"}),".\nUsing the example above, it'd be called ",(0,r.jsx)(n.code,{children:"anvil-status.ts"}),"."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Open the ",(0,r.jsx)(n.code,{children:"flow.yaml"})," file for your derivation. It looks something like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"collections:\n  acmeCo/resources/anvil-status:\n    schema:\n      properties:\n        your_key:\n          type: string\n        required:\n          - your_key\n      type: object\n    key:\n      - /your_key\n    derive:\n      using:\n        typescript:\n          module: anvil-status.ts\n      transforms:\n        - name: anvils\n        source: acmeCo/resources/anvils\n        shuffle: any\n"})}),"\n",(0,r.jsx)(n.p,{children:"Note the stubbed out schema and key."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Write the ",(0,r.jsx)(n.a,{href:"/concepts/schemas",children:"schema"})," you'd like your derivation to conform to and specify the ",(0,r.jsx)(n.a,{href:"/concepts/collections/#keys",children:"collection key"}),". Keep in mind:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The source collection's schema."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The transformation required to get from the source schema to the new schema."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Give the transform a unique ",(0,r.jsx)(n.code,{children:"name"})," (by default, it's the name of the source collection)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"In the TypeScript file, write your transformation."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{title:"Tip",type:"info",children:[(0,r.jsxs)(n.p,{children:["For help writing a TypeScript derivation, start with ",(0,r.jsx)(n.a,{href:"/guides/transform_data_using_typescript",children:"this example"}),"."]}),(0,r.jsxs)(n.p,{children:["The main ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-2454/concepts/derivations",children:"derivations page"})," includes many other examples and in-depth explanations of how derivations work."]})]}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Preview the derivation locally."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"flowctl preview --source flow.yaml\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["If the preview output appears how you'd expect, ",(0,r.jsx)(n.strong,{children:"publish"})," the derivation."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"flowctl catalog publish --source flow.yaml\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The derivation you created is now live and ready for further use.\nYou can access it from the web application and ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-2454/guides/create-dataflow#create-a-materialization",children:"materialize it to a destination"}),",\njust as you would any other Flow collection."]}),"\n",(0,r.jsx)(n.h2,{id:"updating-an-existing-derivation",children:"Updating an existing derivation"}),"\n",(0,r.jsx)(n.p,{children:"Derivations are applied on a go-forward basis only."}),"\n",(0,r.jsx)(n.p,{children:"If you would like to make an update to an existing derivation (for example, adding columns to the derived collection), you can add a new transform by changing the name of your existing transform to a new name, and at the same time updating your lambda or TypeScript module."}),"\n",(0,r.jsx)(n.p,{children:"From the Flow's perspective, this is equivalent to deleting the old transform and adding a new one. This will backfill over the source collection again with the updated SQL statement."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);