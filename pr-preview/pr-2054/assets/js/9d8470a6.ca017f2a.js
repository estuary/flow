"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7128],{36988:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=t(74848),r=t(28453);const a={},s="Bytewax",i={id:"reference/Connectors/dekaf/dekaf-bytewax",title:"Bytewax",description:"This guide uses a legacy method of connecting with Dekaf and is presented for historical purposes. For new integrations or to migrate your existing Dekaf setup to the new workflow, see the Dekaf materialization connector.",source:"@site/docs/reference/Connectors/dekaf/dekaf-bytewax.md",sourceDirName:"reference/Connectors/dekaf",slug:"/reference/Connectors/dekaf/dekaf-bytewax",permalink:"/pr-preview/pr-2054/reference/Connectors/dekaf/dekaf-bytewax",draft:!1,unlisted:!1,editUrl:"https://github.com/estuary/flow/edit/master/site/docs/reference/Connectors/dekaf/dekaf-bytewax.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dekaf integrations",permalink:"/pr-preview/pr-2054/reference/Connectors/dekaf/"},next:{title:"Integrating ClickHouse Cloud with Estuary Flow via Dekaf",permalink:"/pr-preview/pr-2054/reference/Connectors/dekaf/dekaf-clickhouse"}},c={},l=[{value:"Connecting Estuary Flow to Bytewax",id:"connecting-estuary-flow-to-bytewax",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"bytewax",children:"Bytewax"}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["This guide uses a legacy method of connecting with Dekaf and is presented for historical purposes. For new integrations or to migrate your existing Dekaf setup to the new workflow, see the ",(0,o.jsx)(n.a,{href:"/pr-preview/pr-2054/reference/Connectors/materialization-connectors/Dekaf/",children:"Dekaf materialization connector"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"This guide demonstrates how to use Estuary Flow to stream data to Bytewax using the Kafka-compatible Dekaf API."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://bytewax.io/",children:"Bytewax"})," is a Python framework for building scalable dataflow applications, designed for\nhigh-throughput, low-latency data processing tasks."]}),"\n",(0,o.jsx)(n.h2,{id:"connecting-estuary-flow-to-bytewax",children:"Connecting Estuary Flow to Bytewax"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"/guides/how_to_generate_refresh_token",children:"Generate a refresh token"})," for the Bytewax connection from the Estuary Admin\nDashboard."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Install Bytewax and the Kafka Python client:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"pip install bytewax kafka-python\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Create a Python script for your Bytewax dataflow, using the following template:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import json\nfrom datetime import timedelta\nfrom bytewax.dataflow import Dataflow\nfrom bytewax.inputs import KafkaInputConfig\nfrom bytewax.outputs import StdOutputConfig\nfrom bytewax.window import TumblingWindowConfig, SystemClockConfig\n\n# Estuary Flow Dekaf configuration\nKAFKA_BOOTSTRAP_SERVERS = "dekaf.estuary-data.com:9092"\nKAFKA_TOPIC = "/full/nameof/your/collection"\n\n# Parse incoming messages\ndef parse_message(msg):\n    data = json.loads(msg)\n    # Process your data here\n    return data\n\n# Define your dataflow\n src = KafkaSource(brokers=KAFKA_BOOTSTRAP_SERVERS, topics=[KAFKA_TOPIC], add_config={\n     "security.protocol": "SASL_SSL",\n     "sasl.mechanism": "PLAIN",\n     "sasl.username": "{}",\n     "sasl.password": os.getenv("DEKAF_TOKEN"),\n })\n\n flow = Dataflow()\n flow.input("input", src)\n flow.input("input", KafkaInputConfig(KAFKA_BOOTSTRAP_SERVERS, KAFKA_TOPIC))\n flow.map(parse_message)\n # Add more processing steps as needed\n flow.output("output", StdOutputConfig())\n\n if __name__ == "__main__":\n     from bytewax.execution import run_main\n     run_main(flow)\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Replace ",(0,o.jsx)(n.code,{children:'"/full/nameof/your/collection"'})," with your actual collection name from Estuary Flow."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Run your Bytewax dataflow:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"python your_dataflow_script.py\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Your Bytewax dataflow is now processing data from Estuary Flow in real-time."}),"\n"]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(96540);const r={},a=o.createContext(r);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);