"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[376],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},30288:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"reference/Connectors/materialization-connectors/Dekaf/risingwave","title":"RisingWave","description":"This connector materializes Flow collections as Kafka-compatible messages that a RisingWave Kafka consumer can read. RisingWave is a cloud-native SQL streaming database that enables real-time data processing and analytics.","source":"@site/docs/reference/Connectors/materialization-connectors/Dekaf/risingwave.md","sourceDirName":"reference/Connectors/materialization-connectors/Dekaf","slug":"/reference/Connectors/materialization-connectors/Dekaf/risingwave","permalink":"/pr-preview/pr-2291/reference/Connectors/materialization-connectors/Dekaf/risingwave","draft":false,"unlisted":false,"editUrl":"https://github.com/estuary/flow/edit/master/site/docs/reference/Connectors/materialization-connectors/Dekaf/risingwave.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Materialize","permalink":"/pr-preview/pr-2291/reference/Connectors/materialization-connectors/Dekaf/materialize"},"next":{"title":"SingleStore","permalink":"/pr-preview/pr-2291/reference/Connectors/materialization-connectors/Dekaf/singlestore"}}');var r=i(74848),s=i(28453);const a={},o="RisingWave",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Variants",id:"variants",level:2},{value:"Setup",id:"setup",level:2},{value:"Connecting Estuary Flow to RisingWave",id:"connecting-estuary-flow-to-risingwave",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Properties",id:"properties",level:3},{value:"Endpoint",id:"endpoint",level:4},{value:"Bindings",id:"bindings",level:4},{value:"Sample",id:"sample",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"risingwave",children:"RisingWave"})}),"\n",(0,r.jsxs)(n.p,{children:["This connector materializes Flow collections as Kafka-compatible messages that a RisingWave Kafka consumer can read. ",(0,r.jsx)(n.a,{href:"https://www.risingwave.com/",children:"RisingWave"})," is a cloud-native SQL streaming database that enables real-time data processing and analytics."]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"To use this connector, you'll need:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"At least one Flow collection"}),"\n",(0,r.jsx)(n.li,{children:"A RisingWave instance"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"variants",children:"Variants"}),"\n",(0,r.jsxs)(n.p,{children:["This connector is a variant of the default Dekaf connector. For other integration options, see the main ",(0,r.jsx)(n.a,{href:"/pr-preview/pr-2291/reference/Connectors/materialization-connectors/Dekaf/",children:"Dekaf"})," page."]}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.p,{children:"Provide an auth token when setting up the Dekaf connector. This can be a password of your choosing and will be used to authenticate consumers to your Kafka topics."}),"\n",(0,r.jsxs)(n.p,{children:["Once the connector is created, note the full materialization name, such as ",(0,r.jsx)(n.code,{children:"YOUR-ORG/YOUR-PREFIX/YOUR-MATERIALIZATION"}),". You will use this as the username."]}),"\n",(0,r.jsx)(n.h2,{id:"connecting-estuary-flow-to-risingwave",children:"Connecting Estuary Flow to RisingWave"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"In your RisingWave instance, use the SQL shell to create a source that connects to your Estuary Flow materialization. Use the following SQL command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE SOURCE IF NOT EXISTS estuary\nWITH (\n   connector='kafka',\n   topic='<your-collection-name>',\n   properties.bootstrap.server='dekaf.estuary-data.com:9092',\n   scan.startup.mode='latest',\n   properties.sasl.mechanism='PLAIN',\n   properties.security.protocol='SASL_SSL',\n   properties.sasl.username='YOUR-ORG/YOUR-PREFIX/YOUR-MATERIALIZATION',\n   properties.sasl.password='YOUR-AUTH-TOKEN'\n) FORMAT PLAIN ENCODE AVRO (\n   schema.registry = 'https://dekaf.estuary-data.com',\n   schema.registry.username='YOUR-ORG/YOUR-PREFIX/YOUR-MATERIALIZATION',\n   schema.registry.password='YOUR-AUTH-TOKEN'\n);\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a materialized view to process the data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW IF NOT EXISTS estuary_view AS\nSELECT * FROM estuary;\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can customize the materialized view with your desired SQL transformations and aggregations."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"To use this connector, begin with data in one or more Flow collections.\nUse the below properties to configure a Dekaf materialization, which will direct one or more of your Flow collections to your desired topics."}),"\n",(0,r.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.h4,{id:"endpoint",children:"Endpoint"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Title"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required/Default"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/token"})}),(0,r.jsx)(n.td,{children:"Auth Token"}),(0,r.jsx)(n.td,{children:"The password that Kafka consumers can use to authenticate to this task."}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Required"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/strict_topic_names"})}),(0,r.jsx)(n.td,{children:"Strict Topic Names"}),(0,r.jsx)(n.td,{children:"Whether or not to expose topic names in a strictly Kafka-compliant format."}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/deletions"})}),(0,r.jsx)(n.td,{children:"Deletion Mode"}),(0,r.jsxs)(n.td,{children:["Can choose between ",(0,r.jsx)(n.code,{children:"kafka"})," or ",(0,r.jsx)(n.code,{children:"cdc"})," deletion modes."]}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"kafka"})})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"bindings",children:"Bindings"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Title"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required/Default"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/topic_name"})}),(0,r.jsx)(n.td,{children:"Topic Name"}),(0,r.jsx)(n.td,{children:"Kafka topic name that Dekaf will publish under."}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Required"})]})})]}),"\n",(0,r.jsx)(n.h3,{id:"sample",children:"Sample"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"materializations:\n  ${PREFIX}/${mat_name}:\n    endpoint:\n      dekaf:\n        config:\n          token: <auth-token>\n          strict_topic_names: false\n          deletions: kafka\n        variant: risingwave\n    bindings:\n      - resource:\n          topic_name: ${COLLECTION_NAME}\n        source: ${PREFIX}/${COLLECTION_NAME}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);