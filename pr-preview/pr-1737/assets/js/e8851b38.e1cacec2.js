"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7233],{70112:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=r(74848),s=r(28453);const i={description:"This connector materializes Flow collections into tables in a Microsoft SQLServer database."},o="Microsoft SQLServer",l={id:"reference/Connectors/materialization-connectors/SQLServer/sqlserver",title:"Microsoft SQLServer",description:"This connector materializes Flow collections into tables in a Microsoft SQLServer database.",source:"@site/docs/reference/Connectors/materialization-connectors/SQLServer/sqlserver.md",sourceDirName:"reference/Connectors/materialization-connectors/SQLServer",slug:"/reference/Connectors/materialization-connectors/SQLServer/",permalink:"/pr-preview/pr-1737/reference/Connectors/materialization-connectors/SQLServer/",draft:!1,unlisted:!1,editUrl:"https://github.com/estuary/flow/edit/master/site/docs/reference/Connectors/materialization-connectors/SQLServer/sqlserver.md",tags:[],version:"current",frontMatter:{description:"This connector materializes Flow collections into tables in a Microsoft SQLServer database."},sidebar:"tutorialSidebar",previous:{title:"HTTP Webhook",permalink:"/pr-preview/pr-1737/reference/Connectors/materialization-connectors/http-webhook"},next:{title:"Amazon RDS for SQL Server",permalink:"/pr-preview/pr-1737/reference/Connectors/materialization-connectors/SQLServer/amazon-rds-sqlserver"}},a={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setup",id:"setup",level:2},{value:"Self-hosted SQL Server",id:"self-hosted-sql-server",level:3},{value:"Azure SQL Database",id:"azure-sql-database",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Properties",id:"properties",level:3},{value:"Endpoint",id:"endpoint",level:4},{value:"Bindings",id:"bindings",level:4},{value:"Sample",id:"sample",level:3},{value:"Delta updates",id:"delta-updates",level:2},{value:"Reserved words",id:"reserved-words",level:2},{value:"Changelog",id:"changelog",level:2},{value:"V1: 2023-09-01",id:"v1-2023-09-01",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"microsoft-sqlserver",children:"Microsoft SQLServer"}),"\n",(0,t.jsx)(n.p,{children:"This connector materializes Flow collections into tables in a Microsoft SQLServer database."}),"\n",(0,t.jsxs)(n.p,{children:["It is available for use in the Flow web application. For local development or\nopen-source workflows,\n",(0,t.jsx)(n.a,{href:"https://ghcr.io/estuary/materialize-sqlserver:dev",children:(0,t.jsx)(n.code,{children:"ghcr.io/estuary/materialize-sqlserver:dev"})})," provides the latest version of the connector as a Docker image. You can also follow the link in your browser to see past image versions."]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"To use this connector, you'll need:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A SQLServer database to which to materialize, and user credentials.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"SQLServer 2017 and later are supported"}),"\n",(0,t.jsx)(n.li,{children:"The connector will create new tables in the database per your specification,\nso user credentials must have access to create new tables."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"At least one Flow collection"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsx)(n.p,{children:"To meet these requirements, follow the steps for your hosting type."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#self-hosted-sql-server",children:"Self-hosted SQL Server"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#azure-sql-database",children:"Azure SQL Database"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./amazon-rds-sqlserver/",children:"Amazon RDS for SQL Server"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./google-cloud-sql-sqlserver/",children:"Google Cloud SQL for SQL Server"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"self-hosted-sql-server",children:"Self-hosted SQL Server"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Connect to the server and issue the following commands:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"USE <database>;\n-- Create user and password for use with the connector.\nCREATE LOGIN flow_materialize WITH PASSWORD = 'secret';\nCREATE USER flow_materialize FOR LOGIN flow_materialize;\n-- Grant control on the database to flow_materialize\nGRANT CONTROL ON DATABASE::<database> TO flow_materialize;\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Allow secure connection to Estuary Flow from your hosting environment. Either:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Set up an ",(0,t.jsx)(n.a,{href:"/guides/connect-network/",children:"SSH server for tunneling"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["When you fill out the ",(0,t.jsx)(n.a,{href:"#endpoint",children:"endpoint configuration"}),",\ninclude the additional ",(0,t.jsx)(n.code,{children:"networkTunnel"})," configuration to enable the SSH tunnel.\nSee ",(0,t.jsx)(n.a,{href:"/pr-preview/pr-1737/concepts/connectors#connecting-to-endpoints-on-secure-networks",children:"Connecting to endpoints on secure networks"}),"\nfor additional details and a sample."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/reference/allow-ip-addresses",children:"Allowlist the Estuary IP addresses"})," in your firewall rules."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"azure-sql-database",children:"Azure SQL Database"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Allow connections between the database and Estuary Flow. There are two ways to do this: by granting direct access to Flow's IP or by creating an SSH tunnel."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"To allow direct access:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a new ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/azure-sql/database/firewall-configure?view=azuresql#use-the-azure-portal-to-manage-server-level-ip-firewall-rules",children:"firewall rule"})," that grants access to the ",(0,t.jsx)(n.a,{href:"/reference/allow-ip-addresses",children:"Estuary Flow IP addresses"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"To allow secure connections via SSH tunneling:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Follow the guide to ",(0,t.jsx)(n.a,{href:"/guides/connect-network/",children:"configure an SSH server for tunneling"})]}),"\n",(0,t.jsxs)(n.li,{children:["When you configure your connector as described in the ",(0,t.jsx)(n.a,{href:"#configuration",children:"configuration"})," section above, including the additional ",(0,t.jsx)(n.code,{children:"networkTunnel"})," configuration to enable the SSH tunnel. See ",(0,t.jsx)(n.a,{href:"/pr-preview/pr-1737/concepts/connectors#connecting-to-endpoints-on-secure-networks",children:"Connecting to endpoints on secure networks"})," for additional details and a sample."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In your SQL client, connect to your instance as the default ",(0,t.jsx)(n.code,{children:"sqlserver"})," user and issue the following commands."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"USE <database>;\n-- Create user and password for use with the connector.\nCREATE LOGIN flow_materialize WITH PASSWORD = 'secret';\nCREATE USER flow_materialize FOR LOGIN flow_materialize;\n-- Grant control on the database to flow_materialize\nGRANT CONTROL ON DATABASE::<database> TO flow_materialize;\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Note the following important items for configuration:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Find the instance's host under Server Name. The port is always ",(0,t.jsx)(n.code,{children:"1433"}),". Together, you'll use the host",":port"," as the ",(0,t.jsx)(n.code,{children:"address"})," property when you configure the connector."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"To use this connector, begin with data in one or more Flow collections.\nUse the below properties to configure a SQLServer materialization, which will direct one or more of your Flow collections to your desired tables, or views, in the database."}),"\n",(0,t.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h4,{id:"endpoint",children:"Endpoint"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Title"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required/Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"/database"})})}),(0,t.jsx)(n.td,{children:"Database"}),(0,t.jsx)(n.td,{children:"Name of the logical database to materialize to."}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Required"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"/address"})})}),(0,t.jsx)(n.td,{children:"Address"}),(0,t.jsxs)(n.td,{children:["Host and port of the database. If only the host is specified, port will default to ",(0,t.jsx)(n.code,{children:"3306"}),"."]}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Required"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"/password"})})}),(0,t.jsx)(n.td,{children:"Password"}),(0,t.jsx)(n.td,{children:"Password for the specified database user."}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Required"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"/user"})})}),(0,t.jsx)(n.td,{children:"User"}),(0,t.jsx)(n.td,{children:"Database user to connect as."}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Required"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"bindings",children:"Bindings"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Title"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required/Default"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"/table"})})}),(0,t.jsx)(n.td,{children:"Table"}),(0,t.jsx)(n.td,{children:"Table name to materialize to. It will be created by the connector, unless the connector has previously created it."}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Required"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/delta_updates"})}),(0,t.jsx)(n.td,{children:"Delta Update"}),(0,t.jsx)(n.td,{children:"Should updates to this table be done via delta updates."}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"sample",children:"Sample"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"materializations:\n  ${PREFIX}/${mat_name}:\n    endpoint:\n      connector:\n        image: ghcr.io/estuary/materialize-sqlserver:dev\n        config:\n          database: flow\n          address: localhost:5432\n          password: flow\n          user: flow\n    bindings:\n      - resource:\n          table: ${TABLE_NAME}\n        source: ${PREFIX}/${COLLECTION_NAME}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"delta-updates",children:"Delta updates"}),"\n",(0,t.jsxs)(n.p,{children:["This connector supports both standard (merge) and ",(0,t.jsx)(n.a,{href:"/pr-preview/pr-1737/concepts/materialization#delta-updates",children:"delta updates"}),".\nThe default is to use standard updates."]}),"\n",(0,t.jsx)(n.h2,{id:"reserved-words",children:"Reserved words"}),"\n",(0,t.jsxs)(n.p,{children:["SQLServer has a list of reserved words that must be quoted in order to be used as an identifier.\nFlow considers all the reserved words in the official ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/sql/t-sql/language-elements/reserved-keywords-transact-sql?view=sql-server-2017",children:"SQLServer documentation"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"These reserved words are listed in the table below. Flow automatically quotes fields that are in this list."}),"\n",(0,t.jsx)(n.p,{children:"| Reserved words |               |               |               |               |\n| -------------- | ------------- | ------------- | ------------- | ------------- | ----- |\n| absolute       | connect       | else          | intersect     | on            |\n| action         | connection    | end           | intersection  | only          |\n| ada            | constraint    | end-exec      | interval      | open          |\n| add            | constraints   | equals        | into          | opendatasourc |\n| admin          | constructor   | errlvl        | is            | openquery     |\n| after          | contains      | escape        | isolation     | openrowset    |\n| aggregate      | containstable | every         | iterate       | openxml       |\n| alias          | continue      | except        | join          | operation     |\n| all            | convert       | exception     | key           | option        |\n| allocate       | corr          | exec          | kill          | or            |\n| alter          | corresponding | execute       | language      | order         |\n| and            | count         | exists        | large         | ordinality    |\n| any            | covar_pop     | exit          | last          | out           |\n| are            | covar_samp    | external      | lateral       | outer         |\n| array          | create        | extract       | leading       | output        |\n| as             | cross         | false         | left          | over          |\n| asc            | cube          | fetch         | less          | overlaps      |\n| asensitive     | cume_dist     | file          | level         | overlay       |\n| assertion      | current       | fillfactor    | like          | pad           |\n| asymmetric     | current_catal | filter        | like_regex    | parameter     |\n| at             | current_date  | first         | limit         | parameters    |\n| atomic         | current_defau | float         | lineno        | partial       |\n| authorization  | current_path  | for           | ln            | partition     |\n| avg            | current_role  | foreign       | load          | pascal        |\n| backup         | current_schem | fortran       | local         | path          |\n| before         | current_time  | found         | localtime     | percent       |\n| begin          | current_times | free          | localtimestam | percent_rank  |\n| between        | current_trans | freetext      | locator       | percentile_co |\n| binary         | current_user  | freetexttable | lower         | percentile_di |\n| bit            | cursor        | from          | map           | pivot         |\n| bit_length     | cycle         | full          | match         | plan          |\n| blob           | data          | fulltexttable | max           | position      |\n| boolean        | database      | function      | member        | position_rege |\n| both           | date          | fusion        | merge         | postfix       |\n| breadth        | day           | general       | method        | precision     |\n| break          | dbcc          | get           | min           | prefix        |\n| browse         | deallocate    | global        | minute        | preorder      |\n| bulk           | dec           | go            | mod           | prepare       |\n| by             | decimal       | goto          | modifies      | preserve      |\n| call           | declare       | grant         | modify        | primary       |\n| called         | default       | group         | module        | print         |\n| cardinality    | deferrable    | grouping      | month         | prior         |\n| cascade        | deferred      | having        | multiset      | privileges    |\n| cascaded       | delete        | hold          | names         | proc          |\n| case           | deny          | holdlock      | national      | procedure     |\n| cast           | depth         | host          | natural       | public        |\n| catalog        | deref         | hour          | nchar         | raiserror     |\n| char           | desc          | identity      | nclob         | range         |\n| char_length    | describe      | identity_inse | new           | read          |\n| character      | descriptor    | identitycol   | next          | reads         |\n| character_len  | destroy       | if            | no            | readtext      |\n| check          | destructor    | ignore        | nocheck       | real          |\n| checkpoint     | deterministic | immediate     | nonclustered  | reconfigure   |\n| class          | diagnostics   | in            | none          | recursive     |\n| clob           | dictionary    | include       | normalize     | ref           |\n| close          | disconnect    | index         | not           | references    |\n| clustered      | disk          | indicator     | null          | referencing   |\n| coalesce       | distinct      | initialize    | nullif        | regr_avgx     |\n| collate        | distributed   | initially     | numeric       | regr_avgy     |\n| collation      | domain        | inner         | object        | regr_count    |\n| collect        | double        | inout         | occurrences_r | regr_intercep |\n| column         | drop          | input         | octet_length  | regr_r2       |\n| commit         | dump          | insensitive   | of            | regr_slope    |\n| completion     | dynamic       | insert        | off           | regr_sxx      |\n| compute        | each          | int           | offsets       | regr_sxy      |\n| condition      | element       | integer       | old           | regr_syy      |\n| relative       | semanticsimil | structure     | truncate      | window        |\n| release        | semanticsimil | submultiset   | try_convert   | with          |\n| replication    | sensitive     | substring     | tsequal       | within        | group |\n| restore        | sequence      | substring_reg | uescape       | within        |\n| restrict       | session       | sum           | under         | without       |\n| result         | session_user  | symmetric     | union         | work          |\n| return         | set           | system        | unique        | write         |\n| returns        | sets          | system_user   | unknown       | writetext     |\n| revert         | setuser       | table         | unnest        | xmlagg        |\n| revoke         | shutdown      | tablesample   | unpivot       | xmlattributes |\n| right          | similar       | temporary     | update        | xmlbinary     |\n| role           | size          | terminate     | updatetext    | xmlcast       |\n| rollback       | smallint      | textsize      | upper         | xmlcomment    |\n| rollup         | some          | than          | usage         | xmlconcat     |\n| routine        | space         | then          | use           | xmldocument   |\n| row            | specific      | time          | user          | xmlelement    |\n| rowcount       | specifictype  | timestamp     | using         | xmlexists     |\n| rowguidcol     | sql           | timezone_hour | value         | xmlforest     |\n| rows           | sqlca         | timezone_minu | values        | xmliterate    |\n| rule           | sqlcode       | to            | var_pop       | xmlnamespaces |\n| save           | sqlerror      | top           | var_samp      | xmlparse      |\n| savepoint      | sqlexception  | trailing      | varchar       | xmlpi         |\n| schema         | sqlstate      | tran          | variable      | xmlquery      |\n| scope          | sqlwarning    | transaction   | varying       | xmlserialize  |\n| scroll         | start         | translate     | view          | xmltable      |\n| search         | state         | translate_reg | waitfor       | xmltext       |\n| second         | statement     | translation   | when          | xmlvalidate   |\n| section        | static        | treat         | whenever      | year          |\n| securityaudit  | statistics    | trigger       | where         | zone          |\n| select         | stddev_pop    | trim          | while         |\n| semantickeyph  | stddev_samp   | true          | width_bucket  |"}),"\n",(0,t.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,t.jsx)(n.p,{children:"The changelog includes a list of breaking changes made to this connector. Backwards-compatible changes are not listed."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Proceed with caution when editing materializations created with previous versions of this connector;\nediting always upgrades your materialization to the latest connector version."})}),"\n",(0,t.jsx)(n.h4,{id:"v1-2023-09-01",children:"V1: 2023-09-01"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"First version"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(96540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);