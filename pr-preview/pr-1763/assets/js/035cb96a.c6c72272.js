"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5216],{15166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=n(74848),a=n(28453);const r={},o="dbt Cloud Integration",s={id:"guides/dbt-integration",title:"dbt Cloud Integration",description:"Estuary Flow offers an integration with dbt Cloud, enabling users to trigger dbt jobs automatically when new data",source:"@site/docs/guides/dbt-integration.md",sourceDirName:"guides",slug:"/guides/dbt-integration",permalink:"/pr-preview/pr-1763/guides/dbt-integration",draft:!1,unlisted:!1,editUrl:"https://github.com/estuary/flow/edit/master/site/docs/guides/dbt-integration.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Customize materialized fields",permalink:"/pr-preview/pr-1763/guides/customize-materialization-fields"},next:{title:"Connecting to Estuary Flow from Kafka using Dekaf",permalink:"/pr-preview/pr-1763/guides/dekaf_reading_collections_from_kafka"}},l={},d=[{value:"How to Configure dbt Cloud Integration",id:"how-to-configure-dbt-cloud-integration",level:2},{value:"Required Parameters",id:"required-parameters",level:3},{value:"Optional Parameters",id:"optional-parameters",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"Regular Data Transformation on New Data",id:"regular-data-transformation-on-new-data",level:3},{value:"Job Management",id:"job-management",level:3}];function u(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"dbt-cloud-integration",children:"dbt Cloud Integration"}),"\n",(0,i.jsx)(t.p,{children:"Estuary Flow offers an integration with dbt Cloud, enabling users to trigger dbt jobs automatically when new data\nis available in a materialized view. This integration provides orchestration between the data ingestion and\ntransformation layers, making real-time data workflows more efficient and automating data transformations."}),"\n",(0,i.jsx)(t.p,{children:"With the dbt Cloud Job Trigger feature in Estuary Flow, you can:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Automate transformations with dbt jobs as soon as new data is materialized, ensuring data freshness in your analytics."}),"\n",(0,i.jsx)(t.li,{children:"Specify custom job behavior, like replacing or skipping jobs if a trigger is already in progress."}),"\n",(0,i.jsx)(t.li,{children:'Define a custom "cause" message to add context for each triggered job.'}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The integration can be configured when creating or editing a Materialization."}),"\n",(0,i.jsx)(t.h2,{id:"how-to-configure-dbt-cloud-integration",children:"How to Configure dbt Cloud Integration"}),"\n",(0,i.jsx)(t.p,{children:"Follow these steps to configure the dbt Cloud Job Trigger within an Estuary Flow materialization connector:"}),"\n",(0,i.jsx)(t.h3,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,i.jsx)(t.p,{children:"To configure the dbt Cloud Job Trigger, you\u2019ll need the following information:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Job ID: The unique identifier for the dbt job you wish to trigger."}),"\n",(0,i.jsx)(t.li,{children:"Account ID: Your dbt account identifier."}),"\n",(0,i.jsx)(t.li,{children:"API Key: The dbt API key associated with your account. This allows Estuary Flow to authenticate with dbt Cloud and\ntrigger jobs."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"optional-parameters",children:"Optional Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Access URL: The dbt access URL can be found in your dbt Account Settings. Use this URL if your dbt account requires a\nspecific access endpoint. For more information, visit go.estuary.dev/dbt-cloud-trigger."}),"\n",(0,i.jsx)(t.li,{children:'Cause Message: Set a custom message that will appear as the "cause" for each triggered job. This is useful for\ntracking the context of each run, especially in complex workflows. If left empty, it defaults to "Estuary Flow."'}),"\n",(0,i.jsxs)(t.li,{children:["Job Trigger Mode:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"skip: Skips the trigger if a job is already running (default)."}),"\n",(0,i.jsx)(t.li,{children:"replace: Cancels any currently running job and starts a new one."}),"\n",(0,i.jsx)(t.li,{children:"ignore: Initiates a new job regardless of any existing jobs."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"Run Interval: Defines the interval at which the dbt job should run. This interval only triggers if new data has been\nmaterialized. The default is 30m (30 minutes)."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsx)(t.h3,{id:"regular-data-transformation-on-new-data",children:"Regular Data Transformation on New Data"}),"\n",(0,i.jsxs)(t.p,{children:["Suppose you have a data pipeline that ingests data into a warehouse every 1 hour (configured via a Sync Frequency),\nand you want to run a dbt job on the same cadence to transform this data. Configure the ",(0,i.jsx)(t.code,{children:"Run Interval"})," to ",(0,i.jsx)(t.code,{children:"1h"})," to ensure\nthat the dbt job is triggered automatically after every data ingestion cycle."]}),"\n",(0,i.jsx)(t.h3,{id:"job-management",children:"Job Management"}),"\n",(0,i.jsx)(t.p,{children:"If you want to avoid triggering multiple overlapping dbt jobs, set Job Trigger Mode to skip. This way, if a job is\nalready running, the trigger will not start a new job, helping you manage resources efficiently."}),"\n",(0,i.jsx)(t.p,{children:"Alternatively, if you need each transformation job to run regardless of current jobs, set Job Trigger Mode to ignore to\ninitiate a new dbt job each time data is materialized."})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var i=n(96540);const a={},r=i.createContext(a);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);