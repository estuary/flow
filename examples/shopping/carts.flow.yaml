import:
  - cart-updates-with-products.flow.yaml
  - cart-purchase-requests.flow.yaml

collections:
  examples/shopping/carts:
    schema: cart.schema.yaml
    key: [/userId]
    derivation:
      register:
        initial: { userId: 0, cartItems: {} }
        schema:
          type: object
          properties:
            userId: { type: integer }
            cartItems:
              type: object
              reduce: { strategy: set, key: [/product/id] }
              additionalProperties:
                type: array
                items: { $ref: cart.schema.yaml#/$defs/cartItem }
          required: [userId, cartItems]
          reduce: { strategy: merge }

      transform:
        cartUpdatesWithProducts:
          source:
            name: examples/shopping/cartUpdatesWithProducts
          shuffle: { key: [/action/userId] }
          update: { lambda: typescript }
          publish: { lambda: typescript }

        clearAfterPurchase:
          source:
            name: examples/shopping/cartPurchaseRequests
          # Shuffle on userId only, since the timestamp should not be used when determining which
          # register value to associate with each document.
          shuffle: { key: [/userId] }
          update: { lambda: typescript }
          publish: { lambda: typescript }
