collections:
  # Transfers between accounts, e.x. {id: 123, from: alice, to: bob, amount: 32.50}.
  acmeBank/transfers:
    schema:
      # Inline JSON Schema of collection documents.
      type: object
      properties:
        id: { type: integer }
        from: { type: string }
        to: { type: string }
        amount: { type: number }
      required: [id, from, to, amount]
    key: [/id]

  # Derived balances of each account, e.x. {account: alice, amount: 67.35}.
  acmeBank/balances:
    schema:
      type: object
      properties:
        account: { type: string }
        amount:
          # "reduce" keyword extends JSON Schema with annotated reduction
          # behaviors at document locations.
          reduce: { strategy: sum }
          type: number
      required: [account, amount]
      reduce: { strategy: merge }
    key: [/account]

    derivation:
      transform:
        fromTransfers:
          source: { name: acmeBank/transfers }
          # Update balances from source transfers.
          publish: { lambda: typescript }

tests:
  Balances reflect transfers:
    - ingest:
        collection: acmeBank/transfers
        documents:
          - { id: 1, from: alice, to: bob, amount: 32.50 }
          - { id: 2, from: bob, to: carly, amount: 10.75 }
    - verify:
        collection: acmeBank/balances
        documents:
          - { account: alice, amount: -32.50 }
          - { account: bob, amount: 21.75 }
          - { account: carly, amount: 10.75 }
