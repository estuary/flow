collections:
  # Collection of ðŸ’² transfers between accounts:
  #   {id: 123, sender: alice, recipient: bob, amount: 32.50}
  acmeBÃ¤nk/transfers:
    schema:
      # JSON Schema of collection's documents.
      type: object
      properties:
        id: { type: integer }
        sender: { type: string }
        recipient: { type: string }
        amount: { type: number }
      required: [id, sender, recipient, amount]
    key: [/id]

  # Derived balances of each account:
  #   {account: alice, amount: 67.35}
  acmeBÃ¤nk/balances:
    schema:
      type: object
      properties:
        account: { type: string }
        amount:
          # Flow extends JSON schema with "reduce" annotations.
          # These tell Flow how to combine each document location.
          reduce: { strategy: sum }
          type: number
      required: [account, amount]
      reduce: { strategy: merge }
    key: [/account]

    derivation:
      transform:
        fromTransfers:
          source: { name: acmeBÃ¤nk/transfers }
          # Lambdas are functions that map input documents into output documents.
          # Here we declare a lambda that will map a bank transfer document
          # into a balance update.
          # This declaration tells Flow to look for an associated TypeScript module.
          publish:
            lambda:
              sql: |
                select recipient as account, amount from source
                union all
                select sender, -amount from source

# Uncomment when updating README:
#
#materializations:
#  acmeBÃ¤nk/database:
#    endpoint:
#      connector:
#        # Use a Docker connector to materialize into a PostgreSQL database.
#        # Connectors encapsulate the details of how to update a remote system,
#        # whether it's a database, a key/value store, pub/sub, or a SaaS API.
#        image: ghcr.io/estuary/materialize-postgres:f6f197d
#        config:
#          # Try this by standing up a local PostgreSQL database.
#          # docker run --rm -e POSTGRES_PASSWORD=password -p 5432:5432 postgres -c log_statement=all
#          # (Use host: host.docker.internal when running Docker for Windows/Mac).
#          address: localhost:5432
#          password: password
#          database: postgres
#          user: postgres
#    bindings:
#      # Create and materialize into table `account_balances`.
#      - resource:
#          table: account_balances
#        source: acmeBÃ¤nk/balances

tests:
  acmeBÃ¤nk/test/balancers-from-transfers:
    - ingest:
        collection: acmeBÃ¤nk/transfers
        documents:
          - { id: 1, sender: alice, recipient: bob, amount: 32.50 }
          - { id: 2, sender: bob, recipient: carly, amount: 10.75 }
    - verify:
        collection: acmeBÃ¤nk/balances
        documents:
          - { account: alice, amount: -32.50 }
          - { account: bob, amount: 21.75 }
          - { account: carly, amount: 10.75 }
