collections:
  # Collection of ðŸ’² requested transfers between accounts:
  #   {id: 123, sender: alice, recipient: bob, amount: 32.50}
  acmeBÃ¤nk/transfer-requests:
    schema: acmeTransfer.schema.yaml
    key: [/id]

  # Transformation which examines transfer requests and the current sender
  # account balance, and approves or denies each request.
  acmeBÃ¤nk/transfer-outcomes:
    schema:
      # Enrich transfer-request schema with outcome and the sender's balance.
      $ref: acmeTransfer.schema.yaml
      required: [outcome, sender_balance]
      properties:
        outcome:
          enum: [approve, deny]
          description: Whether the transfer was approved, or denied for insufficient funds.
        sender_balance: { type: number }
    key: [/id]

    # Logically partition the collection on the transfer decision outcome.
    projections:
      outcome:
        location: /outcome
        partition: true

    derive:
      using:
        sqlite:
          # The migrations block provides an opportunity to create and evolve internal
          # tables and schema which are used by the SQL blocks of your transforms below.
          # Migrations may be added over time and are applied automatically on initialization.
          migrations:
            - |
              -- Table that tracks the current balance of each account.
              create table current_balances (
                account text primary key not null,
                balance real not null
              );

      transforms:
        - name: fromRequests
          source: { name: acmeBÃ¤nk/transfer-requests }
          # Shuffle sourced documents on the sender, which ensures that all
          # transfer requests of a given sender are processed and tracked by
          # the same scale-out task shard.
          shuffle: { key: [/sender] }
          # The SQL block of a transform is run with each sourced document.
          # The available $parameters correspond to the schema of the source collection,
          # as well as any of it's explicitly-configured projections.
          #
          # When developing your transformation, `flowctl` will provide feedback on
          # what $parameters are available and suggest alternatives for $parameters
          # it doesn't know about.
          lambda: |
            -- If the sender has funds to cover the transfer request, then debit their account.
            update current_balances
            set balance = balance - $amount
            where account = $sender and balance >= $amount;

            -- Emit a transfer decision.
            -- Use SQLite's changes() function to check if the previous update matched any rows.
            -- If the sender was the special sweep account 'deposit' then the transfer is always approved.
            with r as (
              select
                $id,
                $sender,
                $recipient,
                $amount
            )
            select
              r.*,
              case when changes() or $sender = 'deposit'
                then 'approve' else 'deny' end as outcome,
              coalesce(b.balance, 0) as sender_balance
            from r
            left outer join current_balances b on $sender = b.account;

        - name: fromSelf
          # When a transfer is approved, we've debited the sender account but
          # still need to credit the receiver. Read approved transfers from ourselves.
          source:
            name: acmeBÃ¤nk/transfer-outcomes
            partitions:
              include:
                outcome: ["approve"]
          # Shuffled on the recipient this time, so we can credit their balance.
          shuffle: { key: [/recipient] }
          lambda: |
            -- Credit the recipient's balance for a previously-approved transfer.
            insert into current_balances (account, balance)
            values ($recipient, $amount)
            on conflict (account)
            do update set balance = balance + $amount;

  # Aggregation of the current balance for each account,
  # built from the set of approved transfers.
  acmeBÃ¤nk/balances:
    schema:
      type: object
      required: [account, balance]
      properties:
        account: { type: string }
        balance:
          type: number
          reduce: { strategy: sum }
      reduce: { strategy: merge }
    key: [/account]

    derive:
      using:
        sqlite:
          migrations: []
      transforms:
        - name: transfers
          source:
            name: acmeBÃ¤nk/transfer-outcomes
            partitions:
              include:
                outcome: ["approve"]
          lambda: |
            -- Map approved transfers to a credit for the recipient and a debit for the sender.
            select $recipient as account, $amount as balance
            union all
            select $sender, -$amount
            ;

tests:
  acmeBÃ¤nk/test/transfer-outcomes:
    - ingest:
        collection: acmeBÃ¤nk/transfer-requests
        documents:
          - { id: 1, sender: deposit, recipient: alice, amount: 20 }
          - { id: 2, sender: deposit, recipient: bob, amount: 20 }
    - ingest:
        collection: acmeBÃ¤nk/transfer-requests
        documents:
          - { id: 3, sender: alice, recipient: bob, amount: 32.50 }
          - { id: 4, sender: bob, recipient: carly, amount: 10.75 }
    - verify:
        collection: acmeBÃ¤nk/transfer-outcomes
        documents:
          - {
              id: 1,
              sender: deposit,
              recipient: alice,
              amount: 20,
              outcome: approve,
            }
          - {
              id: 2,
              sender: deposit,
              recipient: bob,
              amount: 20,
              outcome: approve,
            }
          - {
              id: 3,
              sender: alice,
              recipient: bob,
              amount: 32.50,
              outcome: deny,
            }
          - {
              id: 4,
              sender: bob,
              recipient: carly,
              amount: 10.75,
              outcome: approve,
              sender_balance: 9.25,
            }

  acmeBÃ¤nk/test/balances-from-outcomes:
    - ingest:
        collection: acmeBÃ¤nk/transfer-requests
        documents:
          - { id: 1, sender: deposit, recipient: alice, amount: 20 }
          - { id: 2, sender: deposit, recipient: bob, amount: 20 }
    - verify:
        collection: acmeBÃ¤nk/balances
        documents:
          - { account: alice, balance: 20 }
          - { account: bob, balance: 20 }
          - { account: deposit, balance: -40 }
    - ingest:
        collection: acmeBÃ¤nk/transfer-requests
        documents:
          - { id: 3, sender: alice, recipient: bob, amount: 25 }
          - { id: 4, sender: bob, recipient: alice, amount: 15 }
    - verify:
        collection: acmeBÃ¤nk/balances
        documents:
          - { account: alice, balance: 35 }
          - { account: bob, balance: 5 }
          - { account: deposit, balance: -40 }