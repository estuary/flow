nodeDependencies:
  moment: "^2.24"

collections:
  - name: stock/ticks
    schema: schemas/L1-tick.yaml
    key: [/id]
    fixtures: [fixtures/L1-tick.yaml]

    projections:
      exchange:
        location: /exchange
        partition: true
      the_bid_price: /bid/price

  - name: stock/daily-stats
    schema: schemas/daily-stat.yaml
    key: [/security, /date]
    fixtures: [fixtures/daily-stats.yaml]

    projections:
      my_special_column: /bid
      exchange:
        location: /exchange
        partition: true

    derivation:
      bootstrap:
        - nodeJS: console.error("example of a bootstrap!");
      transform:
        fromTicks:
          source:
            name: stock/ticks
            schema: "schemas/L1-tick.yaml#/$defs/withRequired"
            partitions:
              include:
                exchange: [NYSE, NASDAQ]

          publish:
            nodeJS: |
              // Alias "source" document to "tick".
              let tick = source;
              // Current bid/ask price spread of the tick.
              let spread = tick.ask.price - tick.bid.price;
              // Truncate full UTC timestamp to current date.
              let date = moment.utc(tick.time).format("YYYY-MM-DD");

              return [{
                  exchange: tick.exchange,
                  security: tick.security,
                  date:     date,
                  // Price stat uses a by-volume weighted average of trades.
                  price: {
                      low:  tick.last.price,
                      high: tick.last.price,
                      avgN: tick.last.price * tick.last.size,
                      avgD: tick.last.size,
                  },
                  // Bid, ask, and spread stats use equal weighting of observed prices across ticks.
                  bid: {
                      low:  tick.bid.price,
                      high: tick.bid.price,
                      avgN: tick.bid.price,
                      avgD: 1,
                  },
                  ask: {
                      low:  tick.ask.price,
                      high: tick.ask.price,
                      avgN: tick.ask.price,
                      avgD: 1,
                  },
                  spread: {low: spread, high: spread, avgN: spread, avgD: 1},
                  volume: tick.last.size,
                  first:  tick.last,
                  last:   tick.last,
              }];

materializations:
  dailyStatsPostgres:
    collection: stock/daily-stats
    postgres:
      uri: postgres://127.0.0.1:5432/my-db
      table: daily_stats
