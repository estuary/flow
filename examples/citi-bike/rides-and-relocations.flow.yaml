import:
  - rides.flow.yaml

collections:
  examples/citi-bike/rides-and-relocations:
    key: [/bike_id, /begin/timestamp]
    schema:
      # Relocations are rides marked by a "relocation: true" property.
      $ref: ride.schema.yaml
      properties:
        relocation: { const: true }

    derive:
      using:
        sqlite:
          migrations:
            - |
              CREATE TABLE last_seen (
                bike_id     INTEGER PRIMARY KEY NOT NULL,
                station_id  INTEGER NOT NULL,
                detail      TEXT    NOT NULL
              );

      transforms:
        - name: fromRides
          source: { name: examples/citi-bike/rides }
          shuffle: { key: [/bike_id] }
          lambda: |
            -- Potentially emit an explicit relocation event of the move
            -- from the last-observed station to the new one.
            SELECT JSON_OBJECT(
              'bike_id',    $bike_id,
              'begin',      JSON(last_seen.detail),
              'end',        JSON($begin),
              'relocation', JSON('true')
            )
            FROM last_seen
            WHERE bike_id = $bike_id AND station_id != $begin$station$id;

            -- Then emit the current ride.
            SELECT JSON($flow_document);

            INSERT INTO last_seen (bike_id, station_id, detail)
              VALUES ($bike_id, $end$station$id, $end)
              ON CONFLICT DO UPDATE SET
                station_id = $end$station$id,
                detail = $end;
