$defs:
  operation:
    description: "Mutates a set and provides the values that are expected after this operation is applied"
    type: object
    properties:
      author: { type: integer }
      id: { type: integer }
      ones: { type: integer }
      op: { type: integer }
      type: { enum: [add, remove] }
      timestamp: { type: string, format: date-time }
      values:
        type: object
        propertyNames: { maxLength: 1 }
        additionalProperties:
          type: integer
      expectValues:
        description: "Final values that are expected after this operation has been applied"
        type: object
        propertyNames: { maxLength: 1 }
        additionalProperties:
          type: integer
    required: [author, id, ones, op, type, timestamp, values, expectValues]

  output:
    $anchor: Output
    description: "Output merges expected and actual values for a given stream"
    type: object
    properties:
      author: { type: integer }
      id: { type: integer }
      timestamp: { type: string, format: date-time }
      appliedOps: { type: integer }
      appliedAdd: { type: integer }
      appliedRemove: { type: integer }

      derived:
        type: object
        additionalProperties:
          type: object
          additionalProperties: { type: integer }
          propertyNames: { maxLength: 1 }

      expectValues:
        type: object
        propertyNames: { maxLength: 1 }
        additionalProperties: { type: integer }

    required: [author, id]

  # outputWithReductions extends output with reduction annotations.
  # We separate these, so that the soak test can exercise both:
  # * Reductions during materialization, and
  # * Reductions within registers, but *not* during materialization.
  outputWithReductions:
    $ref: "#/$defs/output"

    reduce: { strategy: merge }
    properties:
      # maximize here is functionally equivalent to lastWriteWins because op counters are monotonic
      appliedOps: { reduce: { strategy: maximize } }
      #timestamp: { reduce: {strategy: maximize} }
      derived:
        reduce: { strategy: set }
        additionalProperties:
          reduce: { strategy: merge }
          additionalProperties:
            reduce: { strategy: sum }
      appliedAdd: { reduce: { strategy: sum } }
      appliedRemove: { reduce: { strategy: sum } }

