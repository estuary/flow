# When editing this catalog, regenerate its bundle via:
#  flowctl raw bundle --source ops-catalog-new/data-plane-template.flow.yaml  > ops-catalog-new/data-plane-template.bundle.json

collections:
  ops/tasks/BASE_NAME/logs:
    schema: logs.schema.yaml
    key: [/shard/name, /shard/keyBegin, /shard/rClockBegin, /ts]
    projections:
      kind:
        location: /shard/kind
        partition: true
      name:
        location: /shard/name
        partition: true

  ops/tasks/BASE_NAME/stats:
    schema: stats.schema.yaml
    key: [/shard/name, /shard/keyBegin, /shard/rClockBegin, /ts]
    projections:
      kind:
        location: /shard/kind
        partition: true
      name:
        location: /shard/name
        partition: true

  ops/rollups/L1/BASE_NAME/inferred-schemas:
    schema: inferred-schemas.schema.yaml
    key: [/collection_name]
    derive:
      using:
        sqlite: {}
      transforms:
        - name: logs
          source:
            name: ops/tasks/BASE_NAME/logs
            partitions:
              include:
                kind:
                  - capture
                  - derivation
              exclude:
                name:
                  # Don't read our own inferences.
                  - ops/rollups/L1/BASE_NAME/inferred-schemas
                  # Don't read the global rollup, if it happens to live in our data-plane.
                  - ops.us-central1.v1/inferred-schemas/L2

          shuffle:
            key: [/shard/name] # Use partition-based shuffle.
          lambda: |
            select
              $fields->>'collection_name' as collection_name,
              $fields->'schema' as schema
            where $message = 'inferred schema updated';

      shards:
        minTxnDuration: 10s

  ops/rollups/L1/BASE_NAME/catalog-stats:
    schema: catalog-stats.schema.yaml
    key: [/catalogName, /grain, /ts]

    derive:
      using:
        typescript:
          module: catalog-stats.ts
      transforms:
        - name: logs
          shuffle:
            key: [/shard/name]
          source:
            name: ops/tasks/BASE_NAME/logs
        - name: stats
          shuffle:
            key: [/shard/name]
          source:
            name: ops/tasks/BASE_NAME/stats

      shards:
        minTxnDuration: 5s

  ops.us-central1.v1/inferred-schemas/L2:
    schema: inferred-schemas.schema.yaml
    key: [/collection_name]
    derive:
      using:
        sqlite: {}
      transforms:
        # Bindings of this derivation are dynamically generated over all current data-planes.
        # This binding is ignored in production, and is used only for tests.
        - name: from-base-name
          source: ops/rollups/L1/BASE_NAME/inferred-schemas
          shuffle:
            key: [/collection_name]
          lambda: select json($flow_document);

  ops.us-central1.v1/catalog-stats-L2:
    schema: catalog-stats.schema.yaml
    key: [/catalogName, /grain, /ts]
    projections:
      catalog_name: /catalogName
      bytes_written_by_me: /statsSummary/writtenByMe/bytesTotal
      docs_written_by_me: /statsSummary/writtenByMe/docsTotal
      bytes_read_by_me: /statsSummary/readByMe/bytesTotal
      docs_read_by_me: /statsSummary/readByMe/docsTotal
      bytes_written_to_me: /statsSummary/writtenToMe/bytesTotal
      docs_written_to_me: /statsSummary/writtenToMe/docsTotal
      bytes_read_from_me: /statsSummary/readFromMe/bytesTotal
      docs_read_from_me: /statsSummary/readFromMe/docsTotal
      usage_seconds: /statsSummary/usageSeconds
      warnings: /statsSummary/warnings
      errors: /statsSummary/errors
      failures: /statsSummary/failures

    derive:
      using:
        sqlite: {}
      transforms:
        # Bindings of this derivation are dynamically generated over all current data-planes.
        # This binding is ignored in production, and is used only for tests.
        - name: from-base-name
          source: ops/rollups/L1/BASE_NAME/catalog-stats
          shuffle:
            key: [/catalogName]
          lambda: select json($flow_document);
