#!/bin/bash

# This script generates a SQL migration, which updates the ops catalog template
# and then creates a new publication of the ops catalog for every existing tenant.
# The intended usage for each environment is:
# Locally: ./ops-catalog/generate-migration.sh local | psql 'postgresql://postgres:postgres@localhost:5432/postgres'
# In production: ./ops-catalog/generate-migration.sh prod | psql <prod-postgres-url>
# The required positional argument identifies the specific flow.yaml file to bundle as the template.
# This will be either `template-local.flow.yaml` or `template-prod.flow.yaml`.

set -o errexit
set -o pipefail
set -o nounset

ENVIRONMENT="$1";
if [[ -z "$ENVIRONMENT" ]]; then
	echo "missing required positional argument of 'prod' or 'local'" 1>&2
	exit 1
fi

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
INPUT_FILENAME="${SCRIPT_DIR}/template-${ENVIRONMENT}.flow.yaml"
# Run the bundled catalog through sed to escape any single quotes that may be present.
# For postgres, this is done by doubling the single quote character (replace ' with '').
BUNDLED_CATALOG="$(flowctl raw bundle --source "$INPUT_FILENAME" | sed "s/'/''/g")"

cat << EOF
-- This migration was generated by ops-catalog/generate-migration.sh
-- It updates the ops catalog template that's used by agent when provisioning new tenants,
-- and also re-publishes the ops catalogs for all existing tenants.
begin;

do \$\$
declare
	bundled_catalog_arg json := '${BUNDLED_CATALOG}';
	ops_user_id uuid;
	current_tenant tenants;
begin

	-- Identify user which owns ops specifications.
	select id into strict ops_user_id from auth.users where email = 'support@estuary.dev';

	-- Update the ops catalog template.
	update ops_catalog_template set bundled_catalog = bundled_catalog_arg;

	-- Start a publication of the updated template for each existing tenant.
	for current_tenant in
		select * from tenants
	loop
		perform internal.create_ops_publication(current_tenant.tenant, ops_user_id);
	end loop;
	return;

end \$\$
language plpgsql;

commit;
EOF

