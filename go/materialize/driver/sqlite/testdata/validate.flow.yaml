collections:
  weird-types/optionals:
    schema:
      type: object
      properties:
        theKey: { type: string }
        string: { type: string }
        bool: { type: boolean }
        int: { type: integer }
        number: { type: number }
        object: { type: object }
        array: { type: array }
      required: [theKey]
    key: [/theKey]

  weird-types/required-nullable:
    schema:
      type: object
      properties:
        theKey: { type: string }
        string: { type: [string, "null"] }
        boolean: { type: [boolean, "null"] }
        integer: { type: [integer, "null"] }
        number: { type: [number, "null"] }
        object: { type: [object, "null"] }
        array: { type: [array, "null"] }
        # yeah, this is a thing. This field will always be required to have an explicit null value
        "null": { type: ["null"] }
      required:
        [theKey, string, boolean, integer, number, object, array, "null"]
    key: [/theKey]
    projections:
      object: /object
      array: /array
      "null": /null

  weird-types/optional-multi-types:
    schema:
      type: object
      properties:
        theKey: { type: string }
        any: true
        stringOrInt: { type: [string, integer] }
        intOrNum: { type: [number, integer] }
        intOrNumOrNull: { type: [number, integer, "null"] }
        intOrObjectOrNull: { type: [integer, object, "null"] }
        boolOrArrayOrNull: { type: [boolean, array, "null"] }

        # this is here to document what might otherwise seem like a confusing scenario. The
        # inference for this field will only include that this must be an integer, but will not
        # include constraints on the range
        intDifferentRanges:
          oneOf:
            - type: integer
              minimum: 1
              maximum: 5
            - type: integer
              minimum: -5
              maximum: -1

        # This is here so we can document the edge case for ingestion of csv data
        intOrNumOverlappingRanges:
          oneOf:
            - type: number
              minimum: 0
              maximum: 1
            - type: integer
              minimum: -999
              maximum: 0

        boolOrString: { type: [boolean, string] }

      required: [theKey]
    key: [/theKey]
    projections:
      any: /any
      stringOrInt: /stringOrInt
      intOrNum: /intOrNum
      intOrNumOrNull: /intOrNumOrNull
      intOrObjectOrNull: /intOrObjectOrNull
      boolOrArrayOrNull: /boolOrArrayOrNull
      intDifferentRanges: /intDifferentRanges
      intOrNumOverlappingRanges: /intOrNumOverlappingRanges
      boolOrString: /boolOrString

storageMappings:
  "": { stores: [{ provider: S3, bucket: a-bucket }] }