syntax = "proto3";

package ops;
option go_package = "github.com/estuary/flow/go/protocols/ops";

import "go/protocols/flow/flow.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// The type of a catalog task.
enum TaskType {
    invalid_type = 0;
    capture = 1;
    derivation = 2;
    materialization = 3;
}

// ShardLabeling is a parsed and validated representation of the Flow
// labels which are attached to Gazette ShardSpecs, that are understood
// by the Flow runtime and influence its behavior with respect to the shard.
message ShardLabeling {
	// Catalog build identifier which the task uses.
  string build = 1;
	// Network-addressable hostname of this task shard.
	string hostname = 2;
	// Logging level of the task.
	Log.Level log_level = 3;
	// Ports is a map from port name to the combined configuration
	// for the port. The runtime itself doesn't actually care
	// about the alpn protocol, but it's there for the sake of
	// completeness.
  repeated flow.NetworkPort ports = 4 [(gogoproto.nullable) = false];
	// Key and R-Clock range of the shard.
	flow.RangeSpec range = 5 [(gogoproto.nullable) = false];
	// If non-empty, the shard which this task is splitting from.
  string split_source = 6;
	// If non-empty, the shard which this task is splitting into.
	string split_target = 7;
	// Name of the shard's task.
  string task_name = 8;
	// Type of this task (capture, derivation, or materialization).
	TaskType task_type = 9;
}

// Common `shard` sub-document logged by Stats and Log.
message ShardRef {
  // The type of catalog task.
  TaskType kind = 1;
  // The name of the catalog task.
  string name = 2;
  // The hex-encoded inclusive beginning of the shard's assigned key range.
  string key_begin = 3;
  // The hex-encoded inclusive beginning of the shard's assigned r_clock range.
  string r_clock_begin = 4;
}

// Common Meta sub-document of Log and Stats documents.
message Meta {
    string uuid = 1;
}

// Log is Flow's unified representation of task logs.
message Log {
  // Meta sub-document added by the Flow runtime.
  Meta meta = 1 [json_name = "_meta"];
  // The shard which produced this document..
  ShardRef shard = 2;
  // Timestamp corresponding to the start of the transaction.
  // When aggregating, the timestamp is rounded to various UTC
  // intervals (for example hour, day, and month).
  google.protobuf.Timestamp timestamp = 3 [json_name = "ts"];
  // Level of the log.
  enum Level {
    undefined_level = 0;
    error = 1;
    warn = 2;
    info = 3;
    debug = 4;
    trace = 5;
  };
  Level level = 4;
  // Message of the log.
  string message = 5;
  // Structured Fields of the log.
  map<string, string> fields_json_map = 6 [
    (gogoproto.castvalue) = "encoding/json.RawMessage",
    json_name = "fields"
  ];
  // Parent spans of this log event.
  repeated Log spans = 7;
}

// Stats is Flow's unified representation of task metrics and statistics.
message Stats {
  // TODO(johnny): We should evolve this into a consolidated message
  // having a serde serialization corresponding to the ops/stats
  // collection.
  //
  // Let's make this the one true representation for stats.
  // So far, I've just done Derive and top-level fields.

  // Meta sub-document added by the Flow runtime.
  Meta meta = 1 [json_name = "_meta"];
  // The shard which produced this document..
  ShardRef shard = 2;
  // Timestamp corresponding to the start of the transaction.
  // When aggregating, the timestamp is rounded to various UTC
  // intervals (for example hour, day, and month).
  google.protobuf.Timestamp timestamp = 3 [json_name = "ts"];
  // Duration of time spent evaluating the transaction,
  // When aggregating, this is total spent evaluating all transactions
  // within the interval.
  double open_seconds_total = 4;
  // Number of transactions represented by this document.
  uint32 txn_count = 5;

  // DocsAndBytes represents a count of JSON documents and their
  // cumulative total size in bytes.
  message DocsAndBytes {
    uint32 docs_total = 1;
    uint64 bytes_total = 2;
  }

  // Binding represents counts of JSON documents and their
  // cumulative total size in bytes, passing through the binding
  // of a capture or materialization.
  message Binding {
      DocsAndBytes left = 1;
      DocsAndBytes right = 2;
      DocsAndBytes out = 3;
  }

  // Capture metrics.
  map<string, Binding> capture = 6;

  // Derivation metrics.
  message Derive {
    message Transform {
      // The name of the collection that this transform sourced from.
      string source = 1;
      // Input documents that were read by this transform.
      DocsAndBytes input = 2;
    }
    // A map from transform name (not collection name), to metrics for that transform.
    map<string, Transform> transforms = 1;
    // Documents published by the derivation connector.
    DocsAndBytes published = 2;
    // Documents written to the derived collection, after combining over published documents.
    DocsAndBytes out = 3;
  }
  Derive derive = 7;

  // Materialization metrics.
  map<string, Binding> materialize = 8;
}
