syntax = "proto3";

package flow;
option go_package = "github.com/estuary/flow/go/protocols/flow";

import "broker/protocol/protocol.proto";
import "consumer/protocol/protocol.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// Slice represents a contiguous slice of bytes within an associated Arena.
message Slice {
  option (gogoproto.goproto_unrecognized) = false;
  option (gogoproto.goproto_unkeyed) = false;
  option (gogoproto.goproto_sizecache) = false;

  uint32 begin = 1;
  uint32 end = 2;
}

// UUIDParts is a deconstructed, RFC 4122 v1 variant Universally Unique
// Identifier as used by Gazette.
message UUIDParts {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_unrecognized) = false;
  option (gogoproto.goproto_unkeyed) = false;
  option (gogoproto.goproto_sizecache) = false;

  // "Node" identifier portion of a v1 UUID.
  //
  // A unique producer ID is encoded in the high 48 bits (MSB).
  // Within them, the most-significant bit must be 1 to mark this producer
  // as "multicast" and not an actual MAC address (as per RFC 4122).
  //
  // Bits 49-54 must be zero.
  //
  // The low 10 bits are the 10 least-significant bits of the v1 UUID clock
  // sequence, used by Gazette to represent flags over message transaction
  // semantics.
  fixed64 node = 1;
  // Clock is a v1 UUID 60-bit timestamp (60 MSBs), followed by 4 bits of
  // sequence counter.
  fixed64 clock = 2
      [ (gogoproto.casttype) = "go.gazette.dev/core/message.Clock" ];
}

// Projection is a mapping between a document location, specified as a
// JSON-Pointer, and a corresponding field string in a flattened
// (i.e. tabular or SQL) namespace which aliases it.
message Projection {
  // Document location of this projection, as a JSON-Pointer.
  string ptr = 1;
  // Field is the flattened, tabular alias of this projection.
  string field = 2;
  // Was this projection explicitly provided ?
  // (As opposed to implicitly created through static analysis of the schema).
  bool explicit = 3;
  // Does this projection constitute a logical partitioning of the collection?
  bool is_partition_key = 4;
  // Does this location form (part of) the collection key?
  bool is_primary_key = 5;
  // Inference of this projection.
  Inference inference = 6 [ (gogoproto.nullable) = false ];
}

// Inference details type information which is statically known
// about a given document location.
message Inference {
  // Exists enumerates the possible states of existence for a location.
  enum Exists {
    INVALID = 0;
    // The location must exist.
    MUST = 1;
    // The location may exist or be undefined.
    // Its schema has explicit keywords which allow it to exist
    // and which may constrain its shape, such as additionalProperties,
    // items, unevaluatedProperties, or unevaluatedItems.
    MAY = 2;
    // The location may exist or be undefined.
    // Its schema omits any associated keywords, but the specification's
    // default behavior allows the location to exist.
    IMPLICIT = 3;
    // The location cannot exist. For example, it's outside of permitted
    // array bounds, or is a disallowed property, or has an impossible type.
    CANNOT = 4;
  };

  // The possible types for this location.
  // Subset of ["null", "boolean", "object", "array", "integer", "numeric",
  // "string"].
  repeated string types = 1;
  // String type-specific inferences, or nil iff types doesn't include "string".
  message String {
    reserved 1, 2, 5;
    // Annotated Content-Type when the projection is of "string" type.
    string content_type = 3;
    // Annotated format when the projection is of "string" type.
    string format = 4;
    // Annotated Content-Encoding when the projection is of "string" type.
    string content_encoding = 7;
    // Maximum length when the projection is of "string" type. Zero for no
    // limit.
    uint32 max_length = 6;
  }
  String string = 3;
  // The title from the schema, if provided.
  string title = 4;
  // The description from the schema, if provided.
  string description = 5;
  // The default value from the schema, if provided.
  string default_json = 6 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "default"
  ];
  // Whether this location is marked as a secret, like a credential or password.
  bool secret = 7;
  // Existence of this document location.
  Exists exists = 8;
  // Numeric type-specific inferences, or nil iff types doesn't include
  // "integer" or "number".
  message Numeric {
    // Minimum value when the projection is of "integer" or "number" type. Zero
    // may mean a minimum of 0 or no inferred minimum.
    double minimum = 1;
    // Maximum value when the projection is of "integer" or "number" type. Zero
    // may mean a maximum of 0 or no inferred maximum.
    double maximum = 2;
  }
  Numeric numeric = 9;
}

message NetworkPort {
  // Number of this port, in the standard 1..65536 range.
  uint32 number = 1;
  // ALPN protocol of this port, if known.
  string protocol = 2;
  // Is this port public?
  // When true, unauthenticated requests are allowed.
  // Otherwise only authenticated users with access to the task will be permitted.
  bool public = 3;
}

message CollectionSpec {
  // Next tag: 13.

  // Name of this collection.
  string name = 1 [ (gogoproto.casttype) = "Collection" ];
  // Bundled write-time JSON Schema of the collection.
  string write_schema_json = 8 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "writeSchema"
  ];
  // Bundled read-time JSON Schema of the collection.
  // Optional. If not set then `write_schema_json` should be used.
  string read_schema_json = 11 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "readSchema"
  ];
  // Composite key of the collection, as JSON-Pointers.
  repeated string key = 3;
  // JSON pointer locating the UUID of each collection document.
  string uuid_ptr = 4;
  // Logical partition fields of this collection, and their applied order.
  // At present partitions are always in ascending lexicographic order on
  // their field name, but this could change at some point.
  repeated string partition_fields = 5;
  // Logical projections of this collection, ordered on ascending field.
  repeated Projection projections = 6 [ (gogoproto.nullable) = false ];
  // JSON-encoded document template for creating Gazette consumer
  // transaction acknowledgements of writes into this collection.
  string ack_template_json = 7
      [ (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "ackTemplate"
  ];
  // Template for partitions of this collection.
  protocol.JournalSpec partition_template = 9;

  // A Derivation is a collection that builds itself through transformation
  // of other sourced collections.
  // When a CollectionSpec is inlined into a CaptureSpec or MaterializationSpec,
  // its derivation is cleared even if it is, in fact, a derivation.
  message Derivation {
    enum ConnectorType {
      INVALID_CONNECTOR_TYPE = 0;
      SQLITE = 1;
      TYPESCRIPT = 2;
      IMAGE = 3;
      LOCAL = 4;
    }
    // Type of the derivation's connector.
    ConnectorType connector_type = 1;
    // JSON-encoded connector configuration of this derivation.
    string config_json = 2 [
      (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "config"
    ];
    // Transforms of the derivation.
    message Transform {
      // Next tag: 14.

      // Stable name of this transform.
      string name = 1 [ (gogoproto.casttype) = "Transform" ];
      // Source collection which is read by this transform.
      CollectionSpec collection = 2 [ (gogoproto.nullable) = false ];
      // Selector of collection partitions which this materialization reads.
      protocol.LabelSelector partition_selector = 3 [ (gogoproto.nullable) = false ];
      // Priority of this transform, with respect to other transforms of the derivation.
      // Higher values imply higher priority.
      uint32 priority = 4;
      // Number of seconds for which documents of this transformed are delayed
      // while reading, relative to other documents (when back-filling) and the
      // present wall-clock time (when tailing).
      uint32 read_delay_seconds = 5;
      // Shuffle key of this transform, or empty if a shuffle key is not defined.
      repeated string shuffle_key = 6;
      /// JSON-encoded shuffle lambda of this transform, or empty if a shuffle lambda is not defined.
      string shuffle_lambda_config_json = 7 [
        (gogoproto.casttype) = "encoding/json.RawMessage",
        json_name = "shuffleLambdaConfig"
      ];
      // JSON-encoded lambda of this transform.
      string lambda_config_json = 8 [
        (gogoproto.casttype) = "encoding/json.RawMessage",
        json_name = "lambdaConfig"
      ];
      // Is this transform known to always be read-only?
      bool read_only = 9;
      // Stable, unique value used to suffix journal read checkpoints of this transform.
      // Computed as "derive/{derivation}/{transform}".
      string journal_read_suffix = 10;
      // When set, documents before this timestamp are not processed.
      google.protobuf.Timestamp not_before = 11;
      // When set, documents after this timestamp are not processed.
      google.protobuf.Timestamp not_after = 12;
      // Backfill counter for this transform.
      // Every increment of this counter results in a new backfill.
      uint32 backfill = 13;
    }
    repeated Transform transforms = 3 [ (gogoproto.nullable) = false ];
    // JSON types of shuffle key components extracted by the transforms of this derivation.
    enum ShuffleType {
      INVALID_SHUFFLE_TYPE = 0;
      BOOLEAN = 1;
      INTEGER = 2;
      STRING = 3;
    }
    repeated ShuffleType shuffle_key_types = 4;
    // Template for shards of this derivation.
    consumer.ShardSpec shard_template = 5;
    // Template for recovery logs of shards of this derivation.
    protocol.JournalSpec recovery_log_template = 6;
    // Network ports of this derivation.
    repeated NetworkPort network_ports = 7;
  }
  Derivation derivation = 12;
}

// FieldSelection is a selection of a collection's projection fields.
message FieldSelection {
  // Fields for each key component of the collection. Included key fields appear
  // in the collection's key component order, and a given key pointer will be
  // included at most once.
  repeated string keys = 1;
  // All other selected fields, other than those in keys and the document field.
  // Entries are in ascending sorted order, and may be empty.
  repeated string values = 2;
  // Field having a document pointer located at the document root.
  string document = 3;
  // Additional configuration, keyed by fields included in |keys|, |values|, or
  // |document|. Values are arbitrary JSON-encoded objects.
  map<string, string> field_config_json_map = 4 [
    (gogoproto.castvalue) = "encoding/json.RawMessage",
    json_name = "fieldConfig"
  ];
}

// CaptureSpec describes a collection and its capture from an endpoint.
message CaptureSpec {
  // Name of this capture.
  string name = 1 [ (gogoproto.casttype) = "Capture" ];
  // Type of the capture's connector.
  enum ConnectorType {
    INVALID = 0;
    IMAGE = 7;
    LOCAL = 8;
  }
  ConnectorType connector_type = 2;
  // JSON-encoded connector configuration of this capture.
  string config_json = 3 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "config"
  ];
  // Bindings of endpoint resources and collections into which they're captured.
  // Bindings are ordered and unique on the bound collection name,
  // and are also unique on the resource path.
  message Binding {
    // Next tag: 6.

    // JSON-encoded configuration of the bound resource.
    string resource_config_json = 1 [
      (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "resourceConfig"
    ];
    // Driver-supplied path components which fully qualify the
    // subresource being captured.
    repeated string resource_path = 2;
    // Collection to be captured into.
    CollectionSpec collection = 3 [ (gogoproto.nullable) = false ];
    // Backfill counter for this binding.
    // Every increment of this counter results in a new backfill.
    uint32 backfill = 4;
    // A suggested key to use for this binding within connector states.
    string state_key = 5;
  }
  repeated Binding bindings = 4;
  // Minimum interval of time between successive invocations of the capture.
  uint32 interval_seconds = 5;
  // Template for shards of this capture.
  consumer.ShardSpec shard_template = 6;
  // Template for recovery logs of shards of this capture.
  protocol.JournalSpec recovery_log_template = 7;
  // Network ports of this capture.
  repeated NetworkPort network_ports = 8;
}

// MaterializationSpec describes a collection and its materialization to an
// endpoint.
message MaterializationSpec {
  // Name of this materialization.
  string name = 1 [ (gogoproto.casttype) = "Materialization" ];
  // Type of the materialization's connector.
  enum ConnectorType {
    INVALID = 0;
    IMAGE = 8;
    LOCAL = 9;
  }
  ConnectorType connector_type = 2;
  // JSON-encoded connector configuration of this materialization.
  string config_json = 3 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "config"
  ];
  // Bindings of endpoint resources and collections from which they're
  // materialized. Bindings are ordered and unique on the bound collection name,
  // and are also unique on the resource path.
  message Binding {
    // Next tag: 14.

    // JSON-encoded configuration of the bound resource.
    string resource_config_json = 1 [
      (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "resourceConfig"
    ];
    // Driver-supplied path components which fully qualify the
    // subresource being materialized.
    repeated string resource_path = 2;
    // Collection to be materialized.
    CollectionSpec collection = 3 [ (gogoproto.nullable) = false ];
    // Selector of collection partitions which this materialization reads.
    protocol.LabelSelector partition_selector = 7 [ (gogoproto.nullable) = false ];
    // Priority of this binding, with respect to other bindings of the materialization.
    // Higher values imply higher priority.
    uint32 priority = 9;
    // Resolved fields selected for materialization.
    FieldSelection field_selection = 4 [ (gogoproto.nullable) = false ];
    // Materialize delta updates of documents rather than full reductions.
    bool delta_updates = 5;
    // Deprecated shuffle message which holds an alternate location for `partition_selector`.
    message DeprecatedShuffle {
      string group_name = 1;
      protocol.LabelSelector partition_selector = 3 [ (gogoproto.nullable) = false ];
    }
    DeprecatedShuffle deprecated_shuffle = 6;
    // Stable, unique value used to suffix journal read checkpoints of this binding.
    // Computed as "materialize/{materialization}/{encoded-resource-path}".
    string journal_read_suffix = 8;
    // When set, documents before this timestamp are not processed.
    google.protobuf.Timestamp not_before = 10;
    // When set, documents after this timestamp are not processed.
    google.protobuf.Timestamp not_after = 11;
    // Backfill counter for this binding.
    // Every increment of this counter results in a new backfill.
    uint32 backfill = 12;
    // A suggested key to use for this binding within connector state.
    string state_key = 13;
  }
  repeated Binding bindings = 4;
  // Template for shards of this materialization.
  consumer.ShardSpec shard_template = 5;
  // Template for recovery logs of shards of this materialization.
  protocol.JournalSpec recovery_log_template = 6;
  // Network ports of this materialization.
  repeated NetworkPort network_ports = 7;
}

// OAuth2 describes an OAuth2 provider
message OAuth2 {
  // Name of the OAuth2 provider. This is a machine-readable key and must stay
  // consistent. One example use case is to map providers to their respective
  // style of buttons in the UI
  string provider = 1;

  // The templates below are mustache templates and have a set of variables
  // available to them, the variables available everywhere are:
  // client_id: OAuth2 provider client id
  // redirect_uri: OAuth2 provider client registered redirect URI
  //
  // Variables available in Auth URL request:
  // state: the state parameter, this parameter is used to prevent attacks
  // against our users. the parameter must be generated randomly and not
  // guessable. It must be associated with a user session, and we must check in
  // our redirect URI that the state we receive from the OAuth provider is the
  // same as the one we passed in. Scenario: user A can initiate an OAuth2 flow,
  // and send the OAuth Provider's Login URL to another person, user B. Once
  // this other person logs in through the OAuth2 Provider, they will be
  // redirected, and if there is no state check, we will authorise user A
  // to access user B's account. With the state check, the state will not be
  // available in user B's session, and therefore the state check will fail,
  // preventing the attack.
  //
  // Variables available in Access Token request:
  // code: the code resulting from the suthorization step used to fetch the
  // token
  // client_secret: OAuth2 provider client secret
  //
  // Variables available on Refresh Token request:
  // refresh_token: the refresh token
  // client_secret: OAuth2 provider client secret

  // Template for authorization URL, this is the first step of the OAuth2 flow
  // where the user is redirected to the OAuth2 provider to authorize access to
  // their account
  string auth_url_template = 2;

  // Template for access token URL, this is the second step of the OAuth2 flow,
  // where we request an access token from the provider
  string access_token_url_template = 3;

  // The method used to send access_token request. POST by default.
  string access_token_method = 11;

  // The POST body of the access_token request
  string access_token_body = 4;

  // Headers for the access_token request
  map<string, string> access_token_headers_json_map = 5 [
    (gogoproto.castvalue) = "encoding/json.RawMessage",
    json_name = "accessTokenHeaders"
  ];

  // A json map that maps the response from the OAuth provider for Access Token
  // request to keys in the connector endpoint configuration.
  // If the connector supports refresh tokens, must include `refresh_token` and
  // `expires_in`. If this mapping is not provided, the keys from the response
  // are passed as-is to the connector config.
  map<string, string> access_token_response_json_map = 6 [
    (gogoproto.castvalue) = "encoding/json.RawMessage",
    json_name = "accessTokenResponseMap"
  ];

  // Template for refresh token URL, some providers require that the access
  // token be refreshed.
  string refresh_token_url_template = 7;

  // The method used to send refresh_token request. POST by default.
  string refresh_token_method = 12;

  // The POST body of the refresh_token request
  string refresh_token_body = 8;

  // Headers for the refresh_token request
  map<string, string> refresh_token_headers_json_map = 9 [
    (gogoproto.castvalue) = "encoding/json.RawMessage",
    json_name = "refreshTokenHeaders"
  ];

  // A json map that maps the response from the OAuth provider for Refresh Token
  // request to keys in the connector endpoint configuration.
  // If the connector supports refresh tokens, must include `refresh_token` and
  // `expires_in`. If this mapping is not provided, the keys from the response
  // are passed as-is to the connector config.
  map<string, string> refresh_token_response_json_map = 10 [
    (gogoproto.castvalue) = "encoding/json.RawMessage",
    json_name = "refreshTokenResponseMap"
  ];
}

// TestSpec describes a catalog test.
message TestSpec {
  // Name of this test.
  string name = 1;
  // Steps of the test.
  message Step {
    // Type of this step.
    enum Type {
      INGEST = 0;
      VERIFY = 1;
    }
    Type step_type = 1;
    // Index of this step within the test.
    uint32 step_index = 2;
    // Description of this step.
    string description = 3;
    // Scope of the test definition location.
    string step_scope = 4;
    // Collection ingested or verified by this step.
    string collection = 5 [ (gogoproto.casttype) = "Collection" ];
    // JSON documents to ingest or verify.
    repeated string docs_json_vec = 6 [
      (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "docs"
    ];
    // When verifying, selector over logical partitions of the collection.
    protocol.LabelSelector partitions = 7 [ (gogoproto.nullable) = false ];
  }
  repeated Step steps = 2 [ (gogoproto.nullable) = false ];
}

// RangeSpec describes the ranges of shuffle keys and r-clocks which a reader
// is responsible for.
message RangeSpec {
  option (gogoproto.goproto_unrecognized) = false;
  option (gogoproto.goproto_unkeyed) = false;
  option (gogoproto.goproto_sizecache) = false;

  // RangeSpec implements a custom Go String().
  option (gogoproto.goproto_stringer) = false;

  // [begin, end] inclusive range of keys to be shuffled to this reader.
  // Ranges are with respect to a 32-bit hash of a packed document key.
  //
  // The choice of hash function is important: while it need not be
  // cryptographically secure, it must demonstrate a strong "avalanche effect"
  // (ideally meeting the strict avalanche criterion), to ensure that small
  // pertubations of input keys are equally likely to independently affect
  // hash output bits. Particularly the higest bits of the hash result,
  // which dominate the selection of a shuffled shard.
  //
  // At present, Flow uses the high 32 bits of a HighWayHash 64-bit
  // checksum, using a fixed 32-byte key.
  fixed32 key_begin = 2;
  fixed32 key_end = 3;
  // Rotated [begin, end] inclusive ranges of Clocks.
  fixed32 r_clock_begin = 4;
  fixed32 r_clock_end = 5;
}

message ConnectorState {
  // Update of the connector state, to be persisted by the Flow runtime
  // and supplied in the Open of a future connector invocation.
  string updated_json = 1 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "updated"
  ];
  // If true, then this state is applied to a previous state
  // as a RFC7396 Merge Patch.
  bool merge_patch = 2;
}

// SerPolicy describes a serialization policy for Flow documents and portions thereof.
message SerPolicy {
  // Length limit after which string values are truncated.
  // When zero, there is no limit.
  uint32 str_truncate_after = 1;

  // Truncate nested objects after this number of properties.
  // Object truncation is done by taking the first `nested_obj_truncate_after`
  // properties. Whether or not this is deterministic will depend on whether the
  // underlying object iterator provides the keys in a deterministic order.
  // We generally use sorted maps, which works for this.
  // The root object is never truncated.
  uint32 nested_obj_truncate_after = 2;
  // Truncate arrays with more items than this limit.
  uint32 array_truncate_after = 3;
}

message ExtractAPI {
  // Code labels message codes passed over the CGO bridge.
  enum Code {
    INVALID = 0;
    // Configure or re-configure the extractor (Go -> Rust).
    CONFIGURE = 1;
    // Extract from a document (Go -> Rust).
    EXTRACT = 2;
    // UUID extracted from a document (Rust -> Go).
    EXTRACTED_UUID = 3;
    // Fields extracted from a document (Rust -> Go).
    EXTRACTED_FIELDS = 4;
  }

  message Config {
    // JSON pointer of the document UUID to extract.
    string uuid_ptr = 1;
    // JSON schema to validate non-ACK documents against.
    // If empty then schema validation is not performed.
    string schema_json = 2
        [ (gogoproto.casttype) = "encoding/json.RawMessage" ];
    // Field JSON pointers to extract from documents and return as packed
    // tuples.
    repeated string field_ptrs = 3;
    // A set of Projections which must include `field_ptrs`.
    // TODO(johnny): This is a kludge as we seek to remove this API.
    repeated Projection projections = 4 [ (gogoproto.nullable) = false ];
  };
};

// ContentType enumerates the content types understood by Flow.
enum ContentType {
  CATALOG = 0;
  JSON_SCHEMA = 1;
  CONFIG = 4;
  DOCUMENTS_FIXTURE = 5;
}

// BuildAPI is deprecated and will be removed.
// We're currently keeping Config around only to
// avoid churning various Go snapshot tests.
message BuildAPI {
  message Config {
    // Identifier of this build.
    // The path of the output database is determined by joining the
    // configured directory and configured build ID.
    string build_id = 1;
    // Path to the output build database that should be written.
    string build_db = 2;
    // Root catalog source specification. This may be either a local path
    // relative to the current working directory, or an absolute URL.
    string source = 3;
    // Content type of the source.
    ContentType source_type = 4;
    // The Docker network the connectors are given access to during catalog
    // builds.
    string connector_network = 5;
    // URL which roots the Flow project.
    string project_root = 6;
  }
}

// ResetStateRequest is the request of the Testing.ResetState RPC.
message ResetStateRequest {}

// ResetStateResponse is the response of the Testing.ResetState RPC.
message ResetStateResponse {}

// AdvanceTimeRequest is the request of the Testing.AdvanceTime RPC.
message AdvanceTimeRequest { uint64 advance_seconds = 1; }

// AdvanceTimeResponse is the response of the Testing.AdvanceTime RPC.
message AdvanceTimeResponse {}

// DocsAndBytes represents a count of JSON documents, and their cumulative total
// size in bytes. This is used by the various Stats messages.
// Deprecated (johnny).
message DocsAndBytes {
  uint32 docs = 1;
  uint64 bytes = 2;
}

message IngestRequest {
  // Name of the collection into which to ingest.
  string collection = 1 [ (gogoproto.casttype) = "Collection" ];
  // Build ID of the ingested collection.
  string build_id = 2;
  // JSON documents to ingest or verify.
  repeated string docs_json_vec = 3 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "docs"
  ];
}

// IngestResponse is the response of the Testing.Ingest RPC.
message IngestResponse {
  // Journals appended to by this ingestion, and their maximum offset on commit.
  map<string, int64> journal_write_heads = 1 [
    (gogoproto.castkey) = "go.gazette.dev/core/broker/protocol.Journal",
    (gogoproto.castvalue) = "go.gazette.dev/core/broker/protocol.Offset"
  ];
  // Etcd header which describes current journal partitions.
  protocol.Header.Etcd journal_etcd = 2 [ (gogoproto.nullable) = false ];
}

service Testing {
  rpc ResetState(ResetStateRequest) returns (ResetStateResponse);
  rpc AdvanceTime(AdvanceTimeRequest) returns (AdvanceTimeResponse);
  rpc Ingest(IngestRequest) returns (IngestResponse);
}

message TaskNetworkProxyRequest {
  message Open {
    // Header contains information about the shard resolution that was done by the client
    protocol.Header header = 1;

    string shard_id = 2 [
      (gogoproto.casttype) = "go.gazette.dev/core/consumer/protocol.ShardID"
    ];
    // The port number inside the container that the client wishes to connect to.
    uint32 target_port = 3;
    // The network address of the client that is establishing the connection.
    string client_addr = 4;

  }
  Open open = 1;
  bytes data = 2;
}

message TaskNetworkProxyResponse {
  // Status represents the high-level response to an Open request. If OK, then
  // the connection may proceed. Any other status indicates the reason for refusal.
  // This enum is a superset of the consumer.Status enum used by the Shards service,
  // though some statuses have taken on broader meanings.
  enum Status {
    OK = 0;
  	// The named shard does not exist.
  	SHARD_NOT_FOUND = 1;
  	// There is no current primary consumer process for the shard. This is a
  	// temporary condition which should quickly resolve, assuming sufficient
  	// consumer capacity.
  	NO_SHARD_PRIMARY = 2;
  	// The present consumer process is not the assigned primary for the shard,
  	// and was not instructed to proxy the request.
  	NOT_SHARD_PRIMARY = 3;
    // Used to indicate an error in the proxying machinery.
    // This corresponds to consumer.Status_ETCD_TRANSACTION_FAILED, which is considered
    // a specific case of the broader category of "internal" errors, since the proxy API
    // doesn't directly expose anything about etcd.
    INTERNAL_ERROR = 4;
    // Either the shard itself is stopped or failed, or else the container is.
    SHARD_STOPPED = 5;

    // The client is not allowed to connect to the port given in the request.
    // This could be either because the port does not exist or for any other
    // reason, such as if we implement IP-based access policies.
    PORT_NOT_ALLOWED = 1000;
  }
  message OpenResponse {
    Status status = 1;
    protocol.Header header = 2;
  }
  OpenResponse open_response = 1;
  bytes data = 2;
}

service NetworkProxy {
  rpc Proxy(stream TaskNetworkProxyRequest) returns (stream TaskNetworkProxyResponse);
}
