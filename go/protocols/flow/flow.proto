syntax = "proto3";

package flow;
option go_package = "github.com/estuary/flow/go/protocols/flow";

import "broker/protocol/protocol.proto";
import "consumer/protocol/protocol.proto";
import "consumer/recoverylog/recorded_op.proto";
import "ptypes/empty/empty.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// Slice represents a contiguous slice of bytes within an associated Arena.
message Slice {
  option (gogoproto.goproto_unrecognized) = false;
  option (gogoproto.goproto_unkeyed) = false;
  option (gogoproto.goproto_sizecache) = false;

  uint32 begin = 1;
  uint32 end = 2;
}

// UUIDParts is a deconstructed, RFC 4122 v1 variant Universally Unique
// Identifier as used by Gazette.
message UUIDParts {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_unrecognized) = false;
  option (gogoproto.goproto_unkeyed) = false;
  option (gogoproto.goproto_sizecache) = false;

  // Producer is the unique node identifier portion of a v1 UUID, as the high
  // 48 bits of |producer_and_flags|. The MSB must be 1 to mark this producer
  // as "multicast" and not an actual MAC address (as per RFC 4122).
  //
  // Bits 49-54 must be zero.
  //
  // The low 10 bits are the 10 least-significant bits of the v1 UUID clock
  // sequence, used by Gazette to represent flags over message transaction
  // semantics.
  fixed64 producer_and_flags = 1;
  // Clock is a v1 UUID 60-bit timestamp (60 MSBs), followed by 4 bits of
  // sequence counter.
  fixed64 clock = 2
      [ (gogoproto.casttype) = "go.gazette.dev/core/message.Clock" ];
}

// LambdaSpec describes a Flow transformation lambda and how to invoke it.
message LambdaSpec {
  option (gogoproto.equal) = true;

  // If non-empty, this is a TypeScript lambda and the field is its invocation path.
  // E.x. 'some/derivation/andTransform/Update'.
  string typescript = 1;
  // If non-empty, this is a remote lambda and the field is its invocation URL.
  // E.x. 'https://my/external/api'.
  string remote = 2;
}

// Shuffle is a description of a document shuffle, where each document
// is mapped into:
//  * An extracted, packed composite key (a "shuffle key").
//  * A rotated Clock value (an "r-clock").
// The packed key and r-clock can then be compared to individual reader
// RangeSpec's.
//
// Shuffle is a complete description of how a group of related readers
// (e.x. a set of shards collectively processing a single derivation or
// materialization) are performing their read. It contains all (and only!)
// stable descriptions of the read's behavior, and is a primary structure
// across both the shuffle server and client implementations.
//
// Shuffles are also compared using deep equality in order to identify and
// group related reads, placing all reads having equal Shuffles into common
// "read rings" which consolidate their underlying journal reads.
message Shuffle {
  option (gogoproto.equal) = true;

  // Group to which this shuffle belongs. It's used to suffix all journal
  // reads undertaken by this shuffle, and must be stable. Examples:
  //  `derive/{derivation}/{transform}`
  //  `materialize/{materialization}`
  string group_name = 1;
  // Source collection read by this transform.
  string source_collection = 2 [ (gogoproto.casttype) = "Collection" ];
  // Selector of partitions of the collection which this transform reads.
  protocol.LabelSelector source_partitions = 3 [ (gogoproto.nullable) = false ];
  // JSON pointer locating the UUID of each source document.
  string source_uuid_ptr = 4;
  // Composite key over which shuffling occurs, specified as one or more
  // JSON-Pointers indicating a message location to extract.
  repeated string shuffle_key_ptr = 5;
  // uses_source_key is true if shuffle_key_ptr is the source's native key,
  // and false if it's some other key. When shuffling using the source's key,
  // we can minimize data movement by assigning a shard coordinator for each
  // journal such that the shard's key range overlap that of the journal.
  bool uses_source_key = 6;
  // Computed shuffle lambda. If non-nil, then shuffle_key_ptr MUST be empty
  // and uses_source_key MUST be false.
  LambdaSpec shuffle_lambda = 7;
  // Schema against which shuffled documents are to be validated.
  string source_schema_uri = 8;
  // uses_source_schema is true iff source_schema_uri is the source collection's
  // schema, and false if it's a source schema specific to this transform.
  bool uses_source_schema = 9;
  // filter_r_clocks is true if the shuffle coordinator should filter documents
  // sent to each subscriber based on its covered r-clock ranges and the
  // individual document clocks. If false, the subscriber's r-clock range is
  // ignored and all documents which match the key range are sent.
  //
  // filter_r_clocks is set 'true' when reading on behalf of transforms having
  // a "publish" but not an "update" lambda, as such documents have no
  // side-effects on the reader's state store, and would not be published anyway
  // for falling outside of the reader's r-clock range.
  bool filter_r_clocks = 10;
  // Optional hash applied to extracted, packed shuffle keys. Hashes can:
  // * Mitigate shard skew which might otherwise occur due to key locality
  //   (many co-occurring updates to "nearby" keys).
  // * Give predictable storage sizes for keys which are otherwise unbounded.
  // * Allow for joins over sensitive fields, which should not be stored
  //   in-the-clear at rest where possible.
  // Either cryptographic or non-cryptographic functions may be appropriate
  // depending on the use case.
  enum Hash {
    // None performs no hash, returning the original key.
    NONE = 0;
    // MD5 returns the MD5 digest of the original key. It is not a safe
    // cryptographic hash, but is well-known and fast, with good distribution
    // properties.
    MD5 = 1;
  };
  Hash hash = 11;
  // Number of seconds for which documents of this collection are delayed
  // while reading, relative to other documents (when back-filling) and the
  // present wall-clock time (when tailing).
  uint32 read_delay_seconds = 12;
  // Priority of this shuffle, with respect to other related Shuffle reads
  // (e.x. Shuffles of a different transformation within the same derivation).
  // Higher values imply higher priority.
  uint32 priority = 13;
}

// JournalShuffle is a Shuffle of a Journal by a Coordinator shard.
// They're compared using deep equality in order to consolidate groups of
// related logical reads into a single physical read of the journal.
message JournalShuffle {
  option (gogoproto.equal) = true;

  // Journal to be shuffled.
  string journal = 1
      [ (gogoproto.casttype) = "go.gazette.dev/core/broker/protocol.Journal" ];
  // Coordinator is the Shard ID which is responsible for reads of this journal.
  string coordinator = 2
      [ (gogoproto.casttype) =
            "go.gazette.dev/core/consumer/protocol.ShardID" ];
  // Shuffle of this JournalShuffle.
  Shuffle shuffle = 3 [ (gogoproto.embed) = true ];
  // Is this a reply of the journal's content?
  // We separate ongoing vs replayed reads of a journal's content into
  // distinct rings, so that ongoing reads cannot deadlock a replay read.
  //
  // If we didn't do this, a shard might issue a replay read while
  // *also* having a full recv queue of its ongoing read. Then, the
  // the server would on sending yet another ongoing read, such that
  // it's unable to service the replay read that would ultimately
  // unblock the shard / allow it to drain new ongoing reads.
  bool replay = 4;
}

// Projection is a mapping between a document location, specified as a
// JSON-Pointer, and a corresponding field string in a flattened
// (i.e. tabular or SQL) namespace which aliases it.
message Projection {
  // Document location of this projection, as a JSON-Pointer.
  string ptr = 1;
  // Field is the flattened, tabular alias of this projection.
  string field = 2;
  // Was this projection user provided ?
  bool user_provided = 3;
  // Does this projection constitute a logical partitioning of the collection?
  bool is_partition_key = 4;
  // Does this location form (part of) the collection key?
  bool is_primary_key = 5;
  // Inference of this projection.
  Inference inference = 6;
}

// Inference details type information which is statically known
// about a given document location.
message Inference {
  // The possible types for this location.
  // Subset of ["null", "boolean", "object", "array", "integer", "numeric", "string"].
  repeated string types = 1;
  // Whether the projection must always exist (either as a location within)
  // the source document, or as a null-able column in the database.
  bool must_exist = 2;
  // String type-specific inferences.
  message String {
    // Annotated Content-Type when the projection is of "string" type.
    string content_type = 3;
    // Annotated format when the projection is of "string" type.
    string format = 4;
    // Whether the value is base64-encoded when the projection is of "string" type.
    bool is_base64 = 5;
    // Maximum length when the projection is of "string" type. Zero for no limit.
    uint32 max_length = 6;
  }
  String string = 3;
  // The title from the schema, if provided
  string title = 4;
  // The description from the schema, if provided
  string description = 5;
}

message CollectionSpec {
  // Name of this collection.
  string collection = 1 [ (gogoproto.casttype) = "Collection" ];
  // Schema against which collection documents are validated,
  // and which provides reduction annotations.
  string schema_uri = 2;
  // Composite key of the collection, as JSON-Pointers.
  repeated string key_ptrs = 3;
  // JSON pointer locating the UUID of each collection document.
  string uuid_ptr = 4;
  // Logical partition fields of this collection.
  repeated string partition_fields = 5;
  // Logical projections of this collection
  repeated Projection projections = 6;
  // JSON-encoded document template for creating Gazette consumer
  // transaction acknowledgements of writes into this collection.
  string ack_json_template = 7;
}

// TransformSpec describes a specific transform of a derivation.
message TransformSpec {
  // Derivation this transform belongs to.
  string derivation = 1 [ (gogoproto.casttype) = "Collection" ];
  // Name of this transform, scoped to it's derivation.
  string transform = 2 [ (gogoproto.casttype) = "Transform" ];
  // Shuffle applied to source documents for this transform.
  Shuffle shuffle = 3 [ (gogoproto.nullable) = false ];
  // Update lambda of this transform, if any.
  LambdaSpec update_lambda = 4;
  // If an applied update causes the register to be invalid against its
  // schema, should the document roll back instead of failing processing?
  bool rollback_on_register_conflict = 5;
  // Publish lambda of this transform, if any.
  LambdaSpec publish_lambda = 6;
}

// DerivationSpec describes a collection, and it's means of derivation.
message DerivationSpec {
  // Derivations are collections.
  CollectionSpec collection = 1;
  // Schema against which derivation registers are validated,
  // and which provides reduction annotations.
  string register_schema_uri = 2;
  // JSON-encoded initial value of novel document registers.
  string register_initial_json = 3;
  // Transforms of this derivation.
  repeated TransformSpec transforms = 4 [ (gogoproto.nullable) = false ];
}

// EndpointType enumerates the endpoint types understood by Flow.
enum EndpointType {
    // Remote is an arbitrary gRPC materialization protocol server.
    REMOTE = 0;
    POSTGRESQL = 1;
    SQLITE = 2;
    S3 = 3;
    GS = 4;
}

// FieldSelection is a selection of a collection's projection fields.
message FieldSelection {
  option (gogoproto.equal) = true;

  // Fields for each key component of the collection. Keys have the same length
  // as the collection's key, and the document pointer of the field at each index
  // matches the pointer identified by the corresponding index of the collection key.
  repeated string keys = 1;
  // All other selected fields, other than those in keys and the document field.
  // Entries are in ascending sorted order, and may be empty.
  repeated string values = 2;
  // Field having a document pointer located at the document root.
  string document = 3;
  // Additional configuration, keyed by fields included in |keys|, |values|, or |document|.
  // Values are arbitrary JSON-encoded objects.
  map<string, string> field_config = 4;
}

// MaterializationSpec describes a collection and its materialization to an endpoint.
message MaterializationSpec {
  // Name of this materialization.
  string materialization = 1 [ (gogoproto.casttype) = "Materialization" ];
  // Collection to be materialized.
  CollectionSpec collection = 2;
  // Type of the materialization's endpoint.
  EndpointType endpoint_type = 3;
  // JSON-encoded object which configures this materialization with
  // respect to the endpoint type driver.
  string endpoint_config = 4;
  // Resolved fields selected for materialization.
  FieldSelection field_selection = 5;
}

// TestSpec describes a catalog test.
message TestSpec {
  // Name of this test.
  string test = 1;
  // Steps of the test.
  message Step {
    // Type of this step.
    enum Type {
        INGEST = 0;
        VERIFY = 1;
    }
    Type step_type = 1;
    // Index of this step within the test.
    uint32 step_index = 2;
    // Collection ingested or verified by this step.
    string collection = 3 [ (gogoproto.casttype) = "Collection" ];
    // Schema of this collection.
    string collection_schema_uri = 4;
    // Grouped key pointers of the collection.
    repeated string collection_key_ptr = 5;
    // JSON pointer locating the UUID of each collection document.
    string collection_uuid_ptr = 6;
    // Newline-separated JSON documents to ingest.
    string docs_json_lines = 7;
    // When verifying, selector over logical partitions of the collection.
    protocol.LabelSelector partitions = 8 [ (gogoproto.nullable) = false ];
  }
  repeated Step steps = 2 [ (gogoproto.nullable) = false ];
}

// RangeSpec describes the ranges of shuffle keys and r-clocks which a reader
// is responsible for.
message RangeSpec {
  // Byte [begin, end) exclusive range of keys to be shuffled to this reader.
  bytes key_begin = 2;
  bytes key_end = 3;
  // Rotated [begin, end) exclusive ranges of Clocks to be shuffled to this
  // reader.
  uint64 r_clock_begin = 4;
  uint64 r_clock_end = 5;
}

// JournalRules are an ordered sequence of Rules which specify a
// condition -- as a label selector -- and, if matched, a template
// to apply to the base JournalSpec.
message JournalRules {
  message Rule {
    // Name of the rule.
    string rule = 1;
    // Label selector which must pass for the template to be applied.
    protocol.LabelSelector selector = 2 [ (gogoproto.nullable) = false ];
    // Template to union into the base JournalSpec.
    protocol.JournalSpec template = 3 [ (gogoproto.nullable) = false ];
  }
  repeated Rule rules = 1 [ (gogoproto.nullable) = false ];
}

// ShardRules are an ordered sequence of Rules which specify a
// condition -- as a label selector -- and, if matched, a template
// to apply to the base ShardSpec.
message ShardRules {
  message Rule {
    // Label selector which must pass for the template to be applied.
    protocol.LabelSelector selector = 1 [ (gogoproto.nullable) = false ];
    // Template to union into the base JournalSpec.
    consumer.ShardSpec template = 2 [ (gogoproto.nullable) = false ];
  }
  repeated Rule rules = 1 [ (gogoproto.nullable) = false ];
}

// SchemaBundle is a bundle of JSON schemas and their base URI.
message SchemaBundle {
  // Schemas of the bundle. Keys are the absolute URIs of the schema,
  // and values are JSON-encoded schema documents.
  map<string, string> bundle = 1;
}

// ShuffleRequest is the request message of a Shuffle RPC.
message ShuffleRequest {
  // Journal to be shuffled, routed to a coordinator.
  JournalShuffle shuffle = 1 [ (gogoproto.nullable) = false ];
  // Resolution header of the |shuffle.coordinator| shard.
  protocol.Header resolution = 2;
  // Ranges of responsibility which are unique to this reader,
  // against which document shuffle outcomes are matched to determine
  // read eligibility.
  RangeSpec range = 3 [ (gogoproto.nullable) = false ];
  // Offset to begin reading the journal from.
  int64 offset = 4
      [ (gogoproto.casttype) = "go.gazette.dev/core/broker/protocol.Offset" ];
  // Offset to stop reading the journal at, or zero if unbounded.
  int64 end_offset = 5
      [ (gogoproto.casttype) = "go.gazette.dev/core/broker/protocol.Offset" ];
}

// ShuffleResponse is the streamed response message of a Shuffle RPC.
message ShuffleResponse {
  // Status of the Shuffle RPC.
  consumer.Status status = 1;
  // Header of the response.
  protocol.Header header = 2;
  // Terminal error encountered while serving this ShuffleRequest. A terminal
  // error is only sent if a future ShuffleRequest of this same configuration
  // and offset will fail in the exact same way, and operator intervention is
  // required to properly recover. Such errors are returned so that the caller
  // can also abort with a useful, contextual error message.
  //
  // Examples of terminal errors include the requested journal not existing,
  // or data corruption. Errors *not* returned as |terminal_error| include
  // network errors, process failures, and other conditions which can be
  // retried.
  string terminal_error = 3;
  // Offset which was read through to produce this ShuffleResponse.
  int64 read_through = 4
      [ (gogoproto.casttype) = "go.gazette.dev/core/broker/protocol.Offset" ];
  // WriteHead of the journal as reported by the broker, as of the creation of
  // this ShuffleResponse.
  int64 write_head = 5
      [ (gogoproto.casttype) = "go.gazette.dev/core/broker/protocol.Offset" ];
  // Memory arena of this message.
  bytes arena = 6 [ (gogoproto.casttype) = "Arena" ];
  // Shuffled documents, each encoded in the 'application/json'
  // media-type.
  repeated Slice docs_json = 7 [ (gogoproto.nullable) = false ];
  // The begin offset of each document within the requested journal.
  repeated int64 begin = 8
      [ (gogoproto.casttype) = "go.gazette.dev/core/broker/protocol.Offset" ];
  // The end offset of each document within the journal.
  repeated int64 end = 9
      [ (gogoproto.casttype) = "go.gazette.dev/core/broker/protocol.Offset" ];
  // UUIDParts of each document.
  repeated UUIDParts uuid_parts = 10 [ (gogoproto.nullable) = false ];
  // Packed, embedded encoding of the shuffle key into a byte string.
  // If the Shuffle specified a Hash to use, it's applied as well.
  repeated Slice packed_key = 11 [ (gogoproto.nullable) = false ];
}

service Shuffler {
  rpc Shuffle(ShuffleRequest) returns (stream ShuffleResponse);
}

message SchemaAPI {
  // Schema API takes SchemaBundle as its request message with code 1,
  // and sends back instances of BuiltIndex with code 1.

  message BuiltIndex {
    fixed64 schema_index_memptr = 1;
  }
}

message ExtractAPI {
  message Config {
    // TODO - pass schema_index_memptr & Shuffle spec here, migrating this
    // towards a ShuffleAPI which takes over some of the responsibility of
    // current Go implementation.
    //
    // Have ExtractAPI do schema validation so DeriveAPI doesn't have to.
    // When we introduce computed lambdas, it will be within this API

    // JSON pointer of the document UUID to extract.
    // If empty, UUIDParts are not extracted.
    string uuid_ptr = 1;
    // Field JSON pointers to extract from documents and return.
    // If empty, no fields are extracted.
    repeated string field_ptrs = 2;
  };
};

message CombineAPI {
  message Config {
    // Memory address of a shared SchemaIndex, which must exist for
    // the complete lifetime of this API's use.
    fixed64 schema_index_memptr = 1;
    // Schema against which documents are to be validated,
    // and which provides reduction annotations.
    string schema_uri = 2;
    // Composite key used to group documents to be combined, specified as one or
    // more JSON-Pointers indicating a message location to extract.
    // If empty, all request documents are combined into a single response
    // document.
    repeated string key_ptr = 3;
    // Field JSON pointers to be extracted from combined documents and returned.
    // If empty, no fields are extracted.
    repeated string field_ptrs = 4;
    // JSON-Pointer at which a placeholder UUID should be inserted into
    // returned documents. If empty, no placeholder is inserted.
    string uuid_placeholder_ptr = 5;
  };
};

// DeriveAPI is a meta-message which name spaces messages of the Derive API bridge.
message DeriveAPI {
  // Config configures an instance of the derive service.
  message Config {
    // Memory address of a shared SchemaIndex, which must exist for
    // the complete lifetime of this API's use.
    fixed64 schema_index_memptr = 1;
    // Derivation to derive.
    DerivationSpec derivation = 2;
    // Memory address of an RocksDB Environment to use (as a *rocksdb_env_t).
    // Ownership of the environment is transferred with this message.
    fixed64 rocksdb_env_memptr = 3;
    // Local directory for ephemeral processing state.
    string local_dir = 4;
    // Unix Domain Socket at which the JavaScript transformer may be reached.
    string typescript_uds_path = 5;
  }

  // DocHeader precedes a JSON-encoded document.
  message DocHeader {
    // UUID of this document.
    UUIDParts uuid = 1;
    // FDB packed shuffle key of the document.
    bytes packed_key = 2;
    // Index of the transformation under which this document is being
    // processed, within the configured DerivationSpec.
    uint32 transform_index = 3;
  }

  // Prepare a commit of the transaction.
  message Prepare {
    // Checkpoint to commit.
    consumer.Checkpoint checkpoint = 1 [ (gogoproto.nullable) = false ];
  };
}

// ContentType enumerates the content types understood by Flow.
enum ContentType {
    CATALOG_SPEC = 0;
    JSON_SCHEMA = 1;
    TYPESCRIPT_MODULE = 2;
    NPM_PACKAGE = 3;
}

// BuildAPI is a meta-message which name spaces messages of the Build API bridge.
message BuildAPI {
  // Code labels message codes passed over the CGO bridge.
  enum Code {
    BEGIN = 0;
    POLL = 1;
    FETCH_REQUEST = 2;
    FETCH_SUCCESS = 3;
    FETCH_FAILED = 4;
    VALIDATE_REQUEST = 5;
    VALIDATE_RESPONSE = 6;
    DONE = 7;
    DONE_WITH_ERRORS = 8;
    CATALOG_SCHEMA = 100;
  };

  message Config {
    // Path to the base build directory.
    string directory = 1;
    // Root catalog source specification. This may be either a local path
    // relative to the current working directory, or an absolute URL.
    string source = 2;
    // Path of the catalog database to write.
    string catalog_path = 3;
    // Should the TypeScript package be built?
    bool typescript_compile = 4;
    // Should the TypeScript package be packaged into the catalog?
    bool typescript_package = 5;
    // Optional supplamental journal rules to add, beyond those already in the catalog.
    // This is used to add development & testing overrides.
    JournalRules extra_journal_rules = 6;
  }

  message Fetch {
    string resource_url = 1;
    ContentType content_type = 2;
  }
}

// IngestRequest describes documents to ingest into collections.
message IngestRequest {
  // Collection describes an ingest into a collection.
  message Collection {
    // Name of the collection into which to ingest.
    string name = 1 [ (gogoproto.casttype) = "Collection" ];
    // Newline-separated JSON documents to ingest.
    // TODO(johnny): this must be UTF-8, and can be "string" type.
    bytes docs_json_lines = 2;
  };
  repeated Collection collections = 1 [ (gogoproto.nullable) = false ];
}

// IngestResponse is the result of an Ingest RPC.
message IngestResponse {
  // Journals appended to by this ingestion, and their maximum offset on commit.
  map<string, int64> journal_write_heads = 1 [
    (gogoproto.castkey) = "go.gazette.dev/core/broker/protocol.Journal",
    (gogoproto.castvalue) = "go.gazette.dev/core/broker/protocol.Offset"
  ];
  // Etcd header which describes current journal partitions.
  protocol.Header.Etcd journal_etcd = 2 [ (gogoproto.nullable) = false ];
}

// Ingester offers transactional ingest of documents into collections.
service Ingester {
  rpc Ingest(IngestRequest) returns (IngestResponse);
  // rpc IngestMany(stream IngestRequest) returns (IngestResponse);
  // rpc IngestStream(stream IngestRequest) returns (stream IngestResponse);
}

// AdvanceTimeRequest is a testing-only request to modify effective test time.
message AdvanceTimeRequest {
  // Number of seconds to add to the current clock delta.
  uint64 add_clock_delta_seconds = 1;
}

// AdvanceTimeRequest is a testing-only response to modify effective test time.
message AdvanceTimeResponse {
  // Current effective delta from wall-clock time, in seconds.
  uint64 clock_delta_seconds = 1;
}

// ClearRegistersRequest is a testing-only request to remove all registers of a shard.
message ClearRegistersRequest {
  protocol.Header header = 1;
  string shard_id = 2
      [ (gogoproto.casttype) =
            "go.gazette.dev/core/consumer/protocol.ShardID" ];
}

// ClearRegistersResponse is a testing-only response to remove all registers of a shard.
message ClearRegistersResponse {
  consumer.Status status = 1;
  protocol.Header header = 2 [ (gogoproto.nullable) = false ];
}

service Testing {
  rpc AdvanceTime(AdvanceTimeRequest) returns (AdvanceTimeResponse);
  rpc ClearRegisters(ClearRegistersRequest) returns (ClearRegistersResponse);
}
