syntax = "proto3";

package capture;
option go_package = "github.com/estuary/flow/go/protocols/capture";

import "go/protocols/flow/flow.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// Driver is the service implemented by a materialization target system.
service Driver {
  // Spec returns the specification definition of this driver.
  // Notably this includes its endpoint and resource configuration JSON schema.
  rpc Spec(SpecRequest) returns (SpecResponse);
  // Discover returns the set of resources available from this Driver.
  rpc Discover(DiscoverRequest) returns (DiscoverResponse);
  // Validate that resources and bound CollectionSpecs are compatible with one another.
  rpc Validate(ValidateRequest) returns (ValidateResponse);
  // Capture bound resources as a stream of documents and driver checkpoints.
  rpc Capture(CaptureRequest) returns (stream CaptureResponse);
}

// SpecRequest is the request type of the Spec RPC.
message SpecRequest {
  // Endpoint type addressed by this request.
  flow.EndpointType endpoint_type = 1;
  // Driver specification, as an encoded JSON object.
  // This may be a partial specification (for example, a Docker image),
  // providing only enough information to fetch the remainder of the
  // specification schema.
  string endpoint_spec_json = 2 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "endpointSpec"
  ];
}

// SpecResponse is the response type of the Spec RPC.
message SpecResponse {
  // JSON schema of a complete endpoint specification.
  string endpoint_spec_schema_json = 1 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "endpointchema"
  ];
  // JSON schema of a complete endpoint specification.
  string resource_spec_schema_json = 2 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "endpointchema"
  ];
  // URL for connector's documention.
  string documentation_url = 3;
}

// DiscoverRequest is the request type of the Discover RPC.
message DiscoverRequest {
  // Endpoint type addressed by this request.
  flow.EndpointType endpoint_type = 1;
  // Driver specification, as an encoded JSON object.
  string endpoint_spec_json = 2 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "endpointSpec"
  ];
}

// DiscoverResponse is the response type of the Discover RPC.
message DiscoverResponse {
  // Potential bindings which the capture could provide.
  // Bindings may be returned in any order.
  message Binding {
    // A recommended display name for this discovered binding.
    string recommended_name = 1;
    // JSON-encoded object which specifies the endpoint resource to be captured.
    string resource_spec_json = 2 [
      (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "resourceSpec"
    ];
    // JSON schema of documents produced by this binding.
    string document_schema_json = 3 [
      (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "documentSchema"
    ];
    // Composite key of documents (if known), as JSON-Pointers.
    repeated string key_ptrs = 4;
  }
  repeated Binding bindings = 1;
}

// ValidateRequest is the request type of the Validate RPC.
message ValidateRequest {
  // Name of the capture being validated.
  string capture = 1 [ (gogoproto.casttype) =
    "github.com/estuary/flow/go/protocols/flow.Capture" ];
  // Endpoint type addressed by this request.
  flow.EndpointType endpoint_type = 2;
  // Driver specification, as an encoded JSON object.
  string endpoint_spec_json = 3 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "endpointSpec"
  ];
  // Bindings of endpoint resources and collections to which they would be captured.
  // Bindings are ordered and unique on the bound collection name.
  message Binding {
    // JSON-encoded object which specifies the endpoint resource to be captured.
    string resource_spec_json = 1 [
      (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "resourceSpec"
    ];
    // Collection to be captured.
    flow.CollectionSpec collection = 2 [ (gogoproto.nullable) = false ];
  }
  repeated Binding bindings = 4;
}

// ValidateResponse is the response type of the Validate RPC.
message ValidateResponse {
  // Validation responses for each binding of the request,
  // and matching the request ordering.
  message Binding {
    // Components of the resource path which fully qualify the resource
    // identified by this binding.
    // - For an RDBMS, this might be []{dbname, schema, table}.
    // - For Kafka, this might be []{topic}.
    // - For Redis, this might be []{key_prefix}.
    repeated string resource_path = 1;
  }
  repeated Binding bindings = 1;
}

// CaptureRequest is the request type of a Capture RPC.
message CaptureRequest {
  // Capture to be run, which is the CaptureSpec
  // last provided to a successful Validate RPC.
  flow.CaptureSpec capture = 1;
  // [key_begin, key_end] inclusive range of keys processed by this
  // transaction stream. Ranges reflect the disjoint chunks of ownership
  // specific to each instance of a scale-out capture implementation.
  fixed32 key_begin = 2;
  fixed32 key_end = 3;
  // Last-persisted driver checkpoint from a previous capture stream.
  // Or empty, if the driver hasn't returned a checkpoint.
  bytes driver_checkpoint_json = 4 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "driverCheckpoint"
  ];
  // If true, perform a blocking tail of the capture.
  // If false, produce all ready output and then close the stream.
  bool tail = 5;
}

// CaptureResponse is the response type of a Capture RPC.
// It will have exactly one top-level field set, which represents its message
// type.
message CaptureResponse {
  // Opened responds to CaptureRequest of the client,
  // and is sent exactly once as the first message of the stream.
  message Opened {
  }
  Opened opened = 1;

  // Captured returns documents of the capture stream.
  message Captured {
    // The capture binding for documents of this Captured response.
    uint32 binding = 1;
    // Byte arena of the response.
    bytes arena = 2 [
      (gogoproto.casttype) = "github.com/estuary/flow/go/protocols/flow.Arena"
    ];
    // Captured JSON documents.
    repeated flow.Slice docs_json = 3 [ (gogoproto.nullable) = false ];
  }
  Captured captured = 2;

  // Commit previous captured documents.
  message Commit {
    // Optional driver checkpoint of this transaction.
    // If provided, the most recent checkpoint will be persisted by the
    // Flow runtime and returned in a future CaptureRequest.
    bytes driver_checkpoint_json = 1 [
      (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "driverCheckpoint"
    ];
  }
  Commit commit = 3;
}