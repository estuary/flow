// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go/protocols/materialize/materialize.proto

package materialize

import (
	context "context"
	fmt "fmt"
	flow "github.com/estuary/flow/go/protocols/flow"
	github_com_estuary_flow_go_protocols_flow "github.com/estuary/flow/go/protocols/flow"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Type encodes a constraint type for this flow.Projection.
type Constraint_Type int32

const (
	// This specific projection must be present.
	Constraint_FIELD_REQUIRED Constraint_Type = 0
	// At least one projection with this location pointer must be present.
	Constraint_LOCATION_REQUIRED Constraint_Type = 1
	// A projection with this location is recommended, and should be included by default.
	Constraint_LOCATION_RECOMMENDED Constraint_Type = 2
	// This projection may be included, but should be omitted by default.
	Constraint_FIELD_OPTIONAL Constraint_Type = 3
	// This projection must not be present in the materialization.
	Constraint_FIELD_FORBIDDEN Constraint_Type = 4
	// This specific projection is required but is also unacceptable (e.x.,
	// because it uses an incompatible type with a previous applied version).
	Constraint_UNSATISFIABLE Constraint_Type = 5
)

var Constraint_Type_name = map[int32]string{
	0: "FIELD_REQUIRED",
	1: "LOCATION_REQUIRED",
	2: "LOCATION_RECOMMENDED",
	3: "FIELD_OPTIONAL",
	4: "FIELD_FORBIDDEN",
	5: "UNSATISFIABLE",
}

var Constraint_Type_value = map[string]int32{
	"FIELD_REQUIRED":       0,
	"LOCATION_REQUIRED":    1,
	"LOCATION_RECOMMENDED": 2,
	"FIELD_OPTIONAL":       3,
	"FIELD_FORBIDDEN":      4,
	"UNSATISFIABLE":        5,
}

func (x Constraint_Type) String() string {
	return proto.EnumName(Constraint_Type_name, int32(x))
}

func (Constraint_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{0, 0}
}

// Constraint constrains the use of a flow.Projection within a materialization.
type Constraint struct {
	Type Constraint_Type `protobuf:"varint,2,opt,name=type,proto3,enum=materialize.Constraint_Type" json:"type,omitempty"`
	// Optional human readable reason for the given constraint.
	// Implementations are strongly encouraged to supply a descriptive message.
	Reason               string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Constraint) Reset()         { *m = Constraint{} }
func (m *Constraint) String() string { return proto.CompactTextString(m) }
func (*Constraint) ProtoMessage()    {}
func (*Constraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{0}
}
func (m *Constraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Constraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Constraint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Constraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Constraint.Merge(m, src)
}
func (m *Constraint) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Constraint) XXX_DiscardUnknown() {
	xxx_messageInfo_Constraint.DiscardUnknown(m)
}

var xxx_messageInfo_Constraint proto.InternalMessageInfo

// SessionRequest is the request type of the StartSession RPC.
type SessionRequest struct {
	// Endpoint URL of the materialization system.
	EndpointUrl string `protobuf:"bytes,1,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	// Target name within the materialization system, where applicable.
	// This could be a SQL schema & table, or a pub/sub topic, etc.
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Stable ID of the flow consumer shard that this session belongs to. A null or empty value
	// indicates that the caller is not a flow consumer shard, but some other process (e.g. flowctl).
	ShardId              string   `protobuf:"bytes,3,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionRequest) Reset()         { *m = SessionRequest{} }
func (m *SessionRequest) String() string { return proto.CompactTextString(m) }
func (*SessionRequest) ProtoMessage()    {}
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{1}
}
func (m *SessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRequest.Merge(m, src)
}
func (m *SessionRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRequest proto.InternalMessageInfo

// SessionResponse is the response type of the StartSession RPC.
type SessionResponse struct {
	// Opaque session handle.
	Handle               []byte   `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionResponse) Reset()         { *m = SessionResponse{} }
func (m *SessionResponse) String() string { return proto.CompactTextString(m) }
func (*SessionResponse) ProtoMessage()    {}
func (*SessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{2}
}
func (m *SessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionResponse.Merge(m, src)
}
func (m *SessionResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionResponse proto.InternalMessageInfo

// ValidateRequest is the request type of the Validate RPC.
type ValidateRequest struct {
	// Opaque session handle.
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// Collection to be materialized.
	Collection *flow.CollectionSpec `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	// Projection configuration, keyed by the projection field name,
	// with JSON-encoded and driver-defined configuration objects.
	FieldConfig          map[string]string `protobuf:"bytes,3,rep,name=field_config,json=fieldConfig,proto3" json:"field_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ValidateRequest) Reset()         { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()    {}
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{3}
}
func (m *ValidateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateRequest.Merge(m, src)
}
func (m *ValidateRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ValidateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateRequest proto.InternalMessageInfo

// ValidateResponse is the response type of the Validate RPC.
type ValidateResponse struct {
	// Constraints over collection projections imposed by the Driver,
	// keyed by the projection field name. Projections of the CollectionSpec
	// which are missing from constraints are implicitly forbidden.
	Constraints          map[string]*Constraint `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ValidateResponse) Reset()         { *m = ValidateResponse{} }
func (m *ValidateResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateResponse) ProtoMessage()    {}
func (*ValidateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{4}
}
func (m *ValidateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateResponse.Merge(m, src)
}
func (m *ValidateResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ValidateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateResponse proto.InternalMessageInfo

// FieldSelection represents the entire set of fields for a materialization. Projected fields are
// separated into keys and values.
type FieldSelection struct {
	// The fields that are being used as the primary key for this materialization. Flow will guarantee
	// that each location that's part of a collection's key is represented here exactly once, and in
	// the same order as the keys are declared in the collection.
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// All other materialized fields, except for those in keys and the root document field, will be listed here in
	// a stable order. Note that not all materializations will have or need any "values" fields (e.g.
	// materializing to a key-value store like dynamo)
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	// The name of the field holding the root document.
	Document string `protobuf:"bytes,3,opt,name=document,proto3" json:"document,omitempty"`
	// Projection configuration, keyed by the projection field name,
	// with JSON-encoded and driver-defined configuration objects.
	FieldConfig          map[string]string `protobuf:"bytes,4,rep,name=field_config,json=fieldConfig,proto3" json:"field_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FieldSelection) Reset()         { *m = FieldSelection{} }
func (m *FieldSelection) String() string { return proto.CompactTextString(m) }
func (*FieldSelection) ProtoMessage()    {}
func (*FieldSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{5}
}
func (m *FieldSelection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldSelection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldSelection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldSelection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldSelection.Merge(m, src)
}
func (m *FieldSelection) XXX_Size() int {
	return m.ProtoSize()
}
func (m *FieldSelection) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldSelection.DiscardUnknown(m)
}

var xxx_messageInfo_FieldSelection proto.InternalMessageInfo

// ApplyRequest is the request type of the Apply RPC.
type ApplyRequest struct {
	// Opaque session handle.
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// Collection to be materialized.
	Collection *flow.CollectionSpec `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	// Selected fields for materialization
	Fields *FieldSelection `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`
	// Is this Apply a dry-run? If so, no action is undertaken and Apply will
	// report only what would have happened.
	DryRun               bool     `protobuf:"varint,4,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyRequest) Reset()         { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string { return proto.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()    {}
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{6}
}
func (m *ApplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyRequest.Merge(m, src)
}
func (m *ApplyRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ApplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyRequest proto.InternalMessageInfo

// ApplyResponse is the response type of the Apply RPC.
type ApplyResponse struct {
	// Human-readable description of the action that the Driver took (or, if dry_run, would have taken).
	// If empty, this Apply is to be considered a "no-op".
	ActionDescription    string   `protobuf:"bytes,1,opt,name=action_description,json=actionDescription,proto3" json:"action_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyResponse) Reset()         { *m = ApplyResponse{} }
func (m *ApplyResponse) String() string { return proto.CompactTextString(m) }
func (*ApplyResponse) ProtoMessage()    {}
func (*ApplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{7}
}
func (m *ApplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyResponse.Merge(m, src)
}
func (m *ApplyResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ApplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyResponse proto.InternalMessageInfo

// FenceRequest is the request type of a Fence RPC.
type FenceRequest struct {
	// Opaque session handle.
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// Driver checkpoint which was last committed from a Store RPC.
	// Or empty, if the Driver has never returned a checkpoint.
	DriverCheckpoint     []byte   `protobuf:"bytes,2,opt,name=driver_checkpoint,json=driverCheckpoint,proto3" json:"driver_checkpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FenceRequest) Reset()         { *m = FenceRequest{} }
func (m *FenceRequest) String() string { return proto.CompactTextString(m) }
func (*FenceRequest) ProtoMessage()    {}
func (*FenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{8}
}
func (m *FenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FenceRequest.Merge(m, src)
}
func (m *FenceRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *FenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FenceRequest proto.InternalMessageInfo

// FenceResponse is the response type of a Fence RPC.
type FenceResponse struct {
	// Flow checkpoint which was previously committed with this caller ID.
	// Or nil, if unknown or transactional semantics are not supported.
	FlowCheckpoint       []byte   `protobuf:"bytes,1,opt,name=flow_checkpoint,json=flowCheckpoint,proto3" json:"flow_checkpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FenceResponse) Reset()         { *m = FenceResponse{} }
func (m *FenceResponse) String() string { return proto.CompactTextString(m) }
func (*FenceResponse) ProtoMessage()    {}
func (*FenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{9}
}
func (m *FenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FenceResponse.Merge(m, src)
}
func (m *FenceResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *FenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FenceResponse proto.InternalMessageInfo

// LoadEOF indicates the end of a stream of LoadRequest or LoadResponse messages.
type LoadEOF struct {
	// Always empty hint which, when set true, hints to Flow that it may skip future
	// LoadRequests for this handle, as they will never return any documents.
	AlwaysEmptyHint      bool     `protobuf:"varint,1,opt,name=always_empty_hint,json=alwaysEmptyHint,proto3" json:"always_empty_hint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadEOF) Reset()         { *m = LoadEOF{} }
func (m *LoadEOF) String() string { return proto.CompactTextString(m) }
func (*LoadEOF) ProtoMessage()    {}
func (*LoadEOF) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{10}
}
func (m *LoadEOF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadEOF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadEOF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadEOF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadEOF.Merge(m, src)
}
func (m *LoadEOF) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LoadEOF) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadEOF.DiscardUnknown(m)
}

var xxx_messageInfo_LoadEOF proto.InternalMessageInfo

// TransactionRequest is sent from the client to the driver as part of the Transaction streaming
// rpc. Each TransactionRequest message will have exactly one non-null top-level field, which
// represents its message type. The client must always send exactly one Start message as the very first
// message of a Transaction. This may be followed by 0 or more LoadRequests, followed by exactly one
// LoadEOF message. Then it will send 0 or more StoreRequests before closing the send stream.
type TransactionRequest struct {
	// Start is sent as the first message in a Transaction, and never sent again during the same
	// transaction.
	Start *TransactionRequest_Start `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// Load will only be sent during the Loading phase of the transaction rpc.
	Load *TransactionRequest_LoadRequest `protobuf:"bytes,2,opt,name=load,proto3" json:"load,omitempty"`
	// LoadEOF indicates that no more LoadRequests will be sent during this transaction. Upon
	// receiving a LoadEOF, a driver should return any pending LoadResponse messages before sending
	// its own LoadEOF.
	LoadEOF *LoadEOF `protobuf:"bytes,3,opt,name=loadEOF,proto3" json:"loadEOF,omitempty"`
	// Store will only be sent during the Storing phase fo the transaction rpc.
	Store                *TransactionRequest_StoreRequest `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *TransactionRequest) Reset()         { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()    {}
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{11}
}
func (m *TransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionRequest.Merge(m, src)
}
func (m *TransactionRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionRequest proto.InternalMessageInfo

// Start represents the initial payload of transaction metadata.
type TransactionRequest_Start struct {
	// Opaque session handle.
	Handle []byte `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// Fields represents the projection fields to be stored. This repeats the selection and ordering
	// of the last Apply RPC, but is provided here also as a convenience.
	Fields *FieldSelection `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	// Checkpoint to write with this Store transaction, to be associated with
	// the session's caller ID and to be returned by a future Fence RPC.
	// This may be ignored if the Driver doesn't support exactly-once semantics.
	FlowCheckpoint       []byte   `protobuf:"bytes,3,opt,name=flow_checkpoint,json=flowCheckpoint,proto3" json:"flow_checkpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionRequest_Start) Reset()         { *m = TransactionRequest_Start{} }
func (m *TransactionRequest_Start) String() string { return proto.CompactTextString(m) }
func (*TransactionRequest_Start) ProtoMessage()    {}
func (*TransactionRequest_Start) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{11, 0}
}
func (m *TransactionRequest_Start) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionRequest_Start) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionRequest_Start.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionRequest_Start) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionRequest_Start.Merge(m, src)
}
func (m *TransactionRequest_Start) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TransactionRequest_Start) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionRequest_Start.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionRequest_Start proto.InternalMessageInfo

// LoadRequest represents a request to Load one or more documents.
type TransactionRequest_LoadRequest struct {
	// Byte arena of the request.
	Arena github_com_estuary_flow_go_protocols_flow.Arena `protobuf:"bytes,2,opt,name=arena,proto3,casttype=github.com/estuary/flow/go/protocols/flow.Arena" json:"arena,omitempty"`
	// Packed tuples of collection keys, enumerating the documents to load.
	PackedKeys           []flow.Slice `protobuf:"bytes,3,rep,name=packed_keys,json=packedKeys,proto3" json:"packed_keys"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TransactionRequest_LoadRequest) Reset()         { *m = TransactionRequest_LoadRequest{} }
func (m *TransactionRequest_LoadRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionRequest_LoadRequest) ProtoMessage()    {}
func (*TransactionRequest_LoadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{11, 1}
}
func (m *TransactionRequest_LoadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionRequest_LoadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionRequest_LoadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionRequest_LoadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionRequest_LoadRequest.Merge(m, src)
}
func (m *TransactionRequest_LoadRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TransactionRequest_LoadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionRequest_LoadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionRequest_LoadRequest proto.InternalMessageInfo

// StoreRequest represents a batch of 1 or more documents to store, along with their associated
// keys and extracted values. Many StoreRequest messages may be sent during the life of a
// Transaction.
type TransactionRequest_StoreRequest struct {
	// Byte arena of the request.
	Arena      github_com_estuary_flow_go_protocols_flow.Arena `protobuf:"bytes,1,opt,name=arena,proto3,casttype=github.com/estuary/flow/go/protocols/flow.Arena" json:"arena,omitempty"`
	PackedKeys []flow.Slice                                    `protobuf:"bytes,2,rep,name=packed_keys,json=packedKeys,proto3" json:"packed_keys"`
	// Packed tuples holding projection values for each document.
	PackedValues []flow.Slice `protobuf:"bytes,3,rep,name=packed_values,json=packedValues,proto3" json:"packed_values"`
	// JSON documents.
	DocsJson []flow.Slice `protobuf:"bytes,4,rep,name=docs_json,json=docsJson,proto3" json:"docs_json"`
	// Exists is true if this document previously been loaded or stored.
	Exists               []bool   `protobuf:"varint,5,rep,packed,name=exists,proto3" json:"exists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionRequest_StoreRequest) Reset()         { *m = TransactionRequest_StoreRequest{} }
func (m *TransactionRequest_StoreRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionRequest_StoreRequest) ProtoMessage()    {}
func (*TransactionRequest_StoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{11, 2}
}
func (m *TransactionRequest_StoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionRequest_StoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionRequest_StoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionRequest_StoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionRequest_StoreRequest.Merge(m, src)
}
func (m *TransactionRequest_StoreRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TransactionRequest_StoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionRequest_StoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionRequest_StoreRequest proto.InternalMessageInfo

// TransactionResponse is streamed back from a Transaction streaming rpc.
// Similar to TransactionRequest, each TransactionResponse message must include exactly one non-null top
// level field. For each Transaction RPC, the driver should send 0 or more LoadResponse messages,
// followed by exactly one LoadEOF message, followed by exactly one StoreResponse.
type TransactionResponse struct {
	// LoadResponse should only be sent during the Loading phase of the transaction rpc.
	LoadResponse *TransactionResponse_LoadResponse `protobuf:"bytes,1,opt,name=loadResponse,proto3" json:"loadResponse,omitempty"`
	// LoadEOF is sent after all LoadResponse have been sent. After this is sent, no more LoadResponse
	// messages may be sent by the driver, and any documents that have not been returned in a
	// LoadResponse will be presumed to not exist in storage.
	LoadEOF *LoadEOF `protobuf:"bytes,2,opt,name=loadEOF,proto3" json:"loadEOF,omitempty"`
	// StoreResponse is sent by the driver as the final message in a Transaction to indicate that it
	// has committed.
	StoreResponse        *TransactionResponse_StoreResponse `protobuf:"bytes,3,opt,name=storeResponse,proto3" json:"storeResponse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *TransactionResponse) Reset()         { *m = TransactionResponse{} }
func (m *TransactionResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionResponse) ProtoMessage()    {}
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{12}
}
func (m *TransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionResponse.Merge(m, src)
}
func (m *TransactionResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionResponse proto.InternalMessageInfo

// LoadResponse is sent to return documents requested by a LoadRequest. The driver may send
// LoadResponse messages at any time before it sends a LoadEOF message. This is designed to allow
// for maximum flexibility to allow all types of drivers to load documents in whatever way is most
// efficient for each system. For example, a driver could send a LoadResponse after receiving each
// LoadRequest, or it could wait until it receives a LoadEOF from the client and then send all the
// documents in a single LoadResponse, or batches of LoadResponses.
type TransactionResponse_LoadResponse struct {
	// Byte arena of the request.
	Arena github_com_estuary_flow_go_protocols_flow.Arena `protobuf:"bytes,1,opt,name=arena,proto3,casttype=github.com/estuary/flow/go/protocols/flow.Arena" json:"arena,omitempty"`
	// Loaded JSON documents.
	DocsJson             []flow.Slice `protobuf:"bytes,2,rep,name=docs_json,json=docsJson,proto3" json:"docs_json"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TransactionResponse_LoadResponse) Reset()         { *m = TransactionResponse_LoadResponse{} }
func (m *TransactionResponse_LoadResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionResponse_LoadResponse) ProtoMessage()    {}
func (*TransactionResponse_LoadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{12, 0}
}
func (m *TransactionResponse_LoadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionResponse_LoadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionResponse_LoadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionResponse_LoadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionResponse_LoadResponse.Merge(m, src)
}
func (m *TransactionResponse_LoadResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TransactionResponse_LoadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionResponse_LoadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionResponse_LoadResponse proto.InternalMessageInfo

// StoreResponse is sent exactly once at the end of a successful Transaction. Successful Transactions
// must send a single StoreResponse as their final message, though it is perfectly acceptable to
// leave the driver_checkpoint undefined.
type TransactionResponse_StoreResponse struct {
	// Arbitrary driver defined checkpoint. Flow persists the provided checkpoint
	// within the same internal transaction which triggered this Store RPC,
	// and will present the latest checkpoint to a future Fence RPC.
	// This may be ignored if the Driver has no checkpoints.
	DriverCheckpoint     []byte   `protobuf:"bytes,1,opt,name=driver_checkpoint,json=driverCheckpoint,proto3" json:"driver_checkpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionResponse_StoreResponse) Reset()         { *m = TransactionResponse_StoreResponse{} }
func (m *TransactionResponse_StoreResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionResponse_StoreResponse) ProtoMessage()    {}
func (*TransactionResponse_StoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e8b62b327f34bc6, []int{12, 1}
}
func (m *TransactionResponse_StoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionResponse_StoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionResponse_StoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionResponse_StoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionResponse_StoreResponse.Merge(m, src)
}
func (m *TransactionResponse_StoreResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TransactionResponse_StoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionResponse_StoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionResponse_StoreResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("materialize.Constraint_Type", Constraint_Type_name, Constraint_Type_value)
	proto.RegisterType((*Constraint)(nil), "materialize.Constraint")
	proto.RegisterType((*SessionRequest)(nil), "materialize.SessionRequest")
	proto.RegisterType((*SessionResponse)(nil), "materialize.SessionResponse")
	proto.RegisterType((*ValidateRequest)(nil), "materialize.ValidateRequest")
	proto.RegisterMapType((map[string]string)(nil), "materialize.ValidateRequest.FieldConfigEntry")
	proto.RegisterType((*ValidateResponse)(nil), "materialize.ValidateResponse")
	proto.RegisterMapType((map[string]*Constraint)(nil), "materialize.ValidateResponse.ConstraintsEntry")
	proto.RegisterType((*FieldSelection)(nil), "materialize.FieldSelection")
	proto.RegisterMapType((map[string]string)(nil), "materialize.FieldSelection.FieldConfigEntry")
	proto.RegisterType((*ApplyRequest)(nil), "materialize.ApplyRequest")
	proto.RegisterType((*ApplyResponse)(nil), "materialize.ApplyResponse")
	proto.RegisterType((*FenceRequest)(nil), "materialize.FenceRequest")
	proto.RegisterType((*FenceResponse)(nil), "materialize.FenceResponse")
	proto.RegisterType((*LoadEOF)(nil), "materialize.LoadEOF")
	proto.RegisterType((*TransactionRequest)(nil), "materialize.TransactionRequest")
	proto.RegisterType((*TransactionRequest_Start)(nil), "materialize.TransactionRequest.Start")
	proto.RegisterType((*TransactionRequest_LoadRequest)(nil), "materialize.TransactionRequest.LoadRequest")
	proto.RegisterType((*TransactionRequest_StoreRequest)(nil), "materialize.TransactionRequest.StoreRequest")
	proto.RegisterType((*TransactionResponse)(nil), "materialize.TransactionResponse")
	proto.RegisterType((*TransactionResponse_LoadResponse)(nil), "materialize.TransactionResponse.LoadResponse")
	proto.RegisterType((*TransactionResponse_StoreResponse)(nil), "materialize.TransactionResponse.StoreResponse")
}

func init() {
	proto.RegisterFile("go/protocols/materialize/materialize.proto", fileDescriptor_3e8b62b327f34bc6)
}

var fileDescriptor_3e8b62b327f34bc6 = []byte{
	// 1197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xef, 0xfa, 0x57, 0x92, 0xb7, 0x76, 0xe2, 0x4c, 0xf3, 0xfd, 0xd6, 0x5d, 0x42, 0x6a, 0x2c,
	0x21, 0x42, 0x4b, 0x36, 0x95, 0x03, 0xa8, 0x02, 0x14, 0xe4, 0x9f, 0x60, 0x70, 0xe3, 0x74, 0xec,
	0x14, 0x89, 0x8b, 0xb5, 0xdd, 0x9d, 0x38, 0x4b, 0x36, 0x3b, 0x66, 0x67, 0xdd, 0xb2, 0x48, 0x9c,
	0x11, 0x12, 0xfc, 0x0f, 0x1c, 0x38, 0xf1, 0x17, 0x70, 0xe1, 0x9e, 0x23, 0x7f, 0x41, 0x05, 0xe5,
	0xc4, 0x11, 0x8e, 0x9c, 0xd0, 0xce, 0x8c, 0xe3, 0x5d, 0xd7, 0x8e, 0x73, 0x68, 0x2f, 0xab, 0x99,
	0x37, 0xef, 0x33, 0xfb, 0x79, 0xef, 0x7d, 0xe6, 0xcd, 0xc0, 0xed, 0x01, 0xdd, 0x1d, 0x7a, 0xd4,
	0xa7, 0x26, 0x75, 0xd8, 0xee, 0x99, 0xe1, 0x13, 0xcf, 0x36, 0x1c, 0xfb, 0x6b, 0x12, 0x1d, 0xeb,
	0xdc, 0x03, 0xa9, 0x11, 0x93, 0xb6, 0x19, 0x03, 0x1e, 0x3b, 0xf4, 0x09, 0xff, 0x08, 0x57, 0x6d,
	0x63, 0x40, 0x07, 0x94, 0x0f, 0x77, 0xc3, 0x91, 0xb0, 0x96, 0x7e, 0x57, 0x00, 0x6a, 0xd4, 0x65,
	0xbe, 0x67, 0xd8, 0xae, 0x8f, 0xee, 0x42, 0xca, 0x0f, 0x86, 0xa4, 0x90, 0x28, 0x2a, 0xdb, 0xab,
	0xe5, 0x4d, 0x3d, 0xfa, 0xc7, 0x89, 0x9b, 0xde, 0x0b, 0x86, 0x04, 0x73, 0x4f, 0xf4, 0x7f, 0xc8,
	0x78, 0xc4, 0x60, 0xd4, 0x2d, 0x24, 0x8b, 0xca, 0xf6, 0x0a, 0x96, 0xb3, 0xd2, 0xb7, 0x0a, 0xa4,
	0x42, 0x37, 0x84, 0x60, 0xb5, 0xd9, 0x6a, 0xb4, 0xeb, 0x7d, 0xdc, 0x78, 0x70, 0xd4, 0xc2, 0x8d,
	0x7a, 0xfe, 0x1a, 0xfa, 0x1f, 0xac, 0xb7, 0x3b, 0xb5, 0x4a, 0xaf, 0xd5, 0x39, 0x98, 0x98, 0x15,
	0x54, 0x80, 0x8d, 0x88, 0xb9, 0xd6, 0xb9, 0x7f, 0xbf, 0x71, 0x50, 0x6f, 0xd4, 0xf3, 0x89, 0xc9,
	0x26, 0x9d, 0xc3, 0x70, 0xb5, 0xd2, 0xce, 0x27, 0xd1, 0x75, 0x58, 0x13, 0xb6, 0x66, 0x07, 0x57,
	0x5b, 0xf5, 0x7a, 0xe3, 0x20, 0x9f, 0x42, 0xeb, 0x90, 0x3b, 0x3a, 0xe8, 0x56, 0x7a, 0xad, 0x6e,
	0xb3, 0x55, 0xa9, 0xb6, 0x1b, 0xf9, 0x74, 0xe9, 0x18, 0x56, 0xbb, 0x84, 0x31, 0x9b, 0xba, 0x98,
	0x7c, 0x39, 0x22, 0xcc, 0x47, 0xaf, 0x41, 0x96, 0xb8, 0xd6, 0x90, 0xda, 0xae, 0xdf, 0x1f, 0x79,
	0x4e, 0x41, 0xe1, 0xcc, 0xd5, 0xb1, 0xed, 0xc8, 0x73, 0xc2, 0xb0, 0x7c, 0xc3, 0x1b, 0x10, 0x9f,
	0xa7, 0x62, 0x05, 0xcb, 0x19, 0xba, 0x09, 0xcb, 0xec, 0xc4, 0xf0, 0xac, 0xbe, 0x6d, 0xc9, 0x80,
	0x97, 0xf8, 0xbc, 0x65, 0x95, 0xde, 0x84, 0xb5, 0x8b, 0xff, 0xb0, 0x21, 0x75, 0x19, 0x4f, 0xce,
	0x89, 0xe1, 0x5a, 0x0e, 0xe1, 0xbf, 0xc8, 0x62, 0x39, 0x2b, 0xfd, 0xad, 0xc0, 0xda, 0x43, 0xc3,
	0xb1, 0x2d, 0xc3, 0x27, 0x63, 0x52, 0x73, 0x7c, 0xd1, 0xdb, 0x00, 0x26, 0x75, 0x1c, 0x62, 0xfa,
	0x36, 0x75, 0x39, 0x1b, 0xb5, 0xbc, 0xa1, 0xf3, 0xc2, 0xd6, 0x2e, 0xec, 0xdd, 0x21, 0x31, 0x71,
	0xc4, 0x0f, 0x1d, 0x42, 0xf6, 0xd8, 0x26, 0x8e, 0xd5, 0x37, 0xa9, 0x7b, 0x6c, 0x0f, 0x0a, 0xc9,
	0x62, 0x72, 0x5b, 0x2d, 0xef, 0xc4, 0x0a, 0x3a, 0xc5, 0x40, 0x6f, 0x86, 0x80, 0x1a, 0xf7, 0x6f,
	0xb8, 0xbe, 0x17, 0x60, 0xf5, 0x78, 0x62, 0xd1, 0xf6, 0x21, 0x3f, 0xed, 0x80, 0xf2, 0x90, 0x3c,
	0x25, 0x81, 0xcc, 0x5f, 0x38, 0x44, 0x1b, 0x90, 0x7e, 0x6c, 0x38, 0x23, 0x22, 0xd3, 0x26, 0x26,
	0xef, 0x25, 0xee, 0x29, 0xa5, 0x5f, 0x15, 0xc8, 0x4f, 0xfe, 0x28, 0x13, 0x74, 0x08, 0xaa, 0x79,
	0x21, 0x2b, 0x56, 0x50, 0x38, 0x4b, 0x7d, 0x0e, 0x4b, 0x81, 0x89, 0xe8, 0x90, 0x49, 0x9a, 0x91,
	0x2d, 0xb4, 0xcf, 0x20, 0x3f, 0xed, 0x30, 0x83, 0xe6, 0x4e, 0x94, 0xa6, 0x5a, 0xbe, 0x31, 0x47,
	0xe8, 0x51, 0xfe, 0x7f, 0x29, 0xb0, 0xca, 0x13, 0xd0, 0x25, 0xe3, 0x24, 0x23, 0x48, 0x9d, 0x92,
	0x40, 0xd0, 0x5e, 0xc1, 0x7c, 0x1c, 0x96, 0x91, 0x63, 0x58, 0x21, 0xc1, 0xad, 0x72, 0x86, 0x34,
	0x58, 0xb6, 0xa8, 0x39, 0x3a, 0x23, 0xae, 0x2f, 0x85, 0x73, 0x31, 0x47, 0x9d, 0xa9, 0x62, 0xa5,
	0x78, 0x1a, 0xde, 0x8a, 0x91, 0x8a, 0xff, 0xfa, 0x25, 0xd7, 0xea, 0x67, 0x05, 0xb2, 0x95, 0xe1,
	0xd0, 0x09, 0x5e, 0x8e, 0x38, 0xf7, 0x20, 0xc3, 0xd9, 0x32, 0x9e, 0x09, 0xb5, 0xfc, 0xca, 0x25,
	0x91, 0x62, 0xe9, 0x8a, 0x6e, 0xc0, 0x92, 0xe5, 0x05, 0x7d, 0x6f, 0xe4, 0x16, 0x52, 0x45, 0x65,
	0x7b, 0x19, 0x67, 0x2c, 0x2f, 0xc0, 0x23, 0xb7, 0xb4, 0x0f, 0x39, 0xc9, 0x55, 0x8a, 0x6a, 0x07,
	0x90, 0xc1, 0xb1, 0x7d, 0x8b, 0x30, 0xd3, 0xb3, 0x87, 0x9c, 0x9c, 0x08, 0x7c, 0x5d, 0xac, 0xd4,
	0x27, 0x0b, 0xa5, 0x2e, 0x64, 0x9b, 0xc4, 0x35, 0x17, 0x1e, 0xc4, 0x3b, 0xb0, 0x6e, 0x79, 0xf6,
	0x63, 0xe2, 0xf5, 0xcd, 0x13, 0x62, 0x9e, 0xf2, 0x56, 0xc1, 0x43, 0xce, 0xe2, 0xbc, 0x58, 0xa8,
	0x5d, 0xd8, 0x4b, 0xf7, 0x20, 0x27, 0x37, 0x95, 0xa4, 0xde, 0x80, 0xb5, 0x30, 0x2d, 0x51, 0xac,
	0xd8, 0x7e, 0x35, 0x34, 0x47, 0x90, 0xef, 0xc0, 0x52, 0x9b, 0x1a, 0x56, 0xa3, 0xd3, 0x44, 0xb7,
	0x61, 0xdd, 0x70, 0x9e, 0x18, 0x01, 0xeb, 0x93, 0xb3, 0xa1, 0x1f, 0xf4, 0x4f, 0xc6, 0xa8, 0x65,
	0xbc, 0x26, 0x16, 0x1a, 0xa1, 0xfd, 0xe3, 0x10, 0xf6, 0x53, 0x06, 0x50, 0xcf, 0x33, 0x5c, 0x26,
	0x02, 0x1c, 0x07, 0xf3, 0x3e, 0xa4, 0x99, 0x6f, 0x78, 0x02, 0xa6, 0x96, 0x5f, 0x8f, 0x65, 0xfa,
	0x79, 0x7f, 0xbd, 0x1b, 0x3a, 0x63, 0x81, 0x41, 0x1f, 0x42, 0xca, 0xa1, 0x86, 0x25, 0xeb, 0x7a,
	0x67, 0x11, 0x36, 0xa4, 0x2d, 0xc7, 0x98, 0x03, 0x91, 0x0e, 0x4b, 0x8e, 0x88, 0x45, 0x56, 0x7a,
	0x23, 0xb6, 0x87, 0x8c, 0x13, 0x8f, 0x9d, 0x50, 0x35, 0x64, 0x4b, 0x3d, 0xc2, 0x2b, 0x3c, 0x7d,
	0x02, 0x66, 0xb2, 0xa5, 0xde, 0xb8, 0x6e, 0x58, 0x40, 0xb5, 0x6f, 0x20, 0xcd, 0x83, 0x98, 0x5b,
	0xc7, 0x89, 0xfa, 0x12, 0x57, 0x57, 0xdf, 0x8c, 0xf2, 0x25, 0x67, 0x95, 0x4f, 0xfb, 0x5e, 0x01,
	0x35, 0x92, 0x08, 0xd4, 0x82, 0xb4, 0xe1, 0x11, 0xd7, 0x10, 0x4a, 0xa9, 0xee, 0xfd, 0xfb, 0xf4,
	0xd6, 0xee, 0xc0, 0xf6, 0x4f, 0x46, 0x8f, 0x74, 0x93, 0x9e, 0xed, 0x12, 0xe6, 0x8f, 0x0c, 0x2f,
	0x10, 0xb7, 0xf5, 0x73, 0xf7, 0xb7, 0x5e, 0x09, 0xa1, 0x58, 0xec, 0x80, 0xca, 0xa0, 0x0e, 0x0d,
	0xf3, 0x94, 0x58, 0x7d, 0xde, 0x75, 0x44, 0x4b, 0x57, 0xc5, 0x69, 0xeb, 0x3a, 0xb6, 0x49, 0xaa,
	0xa9, 0xf3, 0xa7, 0xb7, 0xae, 0x61, 0x10, 0x5e, 0x9f, 0x92, 0x80, 0x69, 0x3f, 0x24, 0x20, 0x1b,
	0xcd, 0xd2, 0x84, 0x8f, 0xf2, 0xa2, 0xf9, 0x24, 0xae, 0xc0, 0x07, 0xbd, 0x0b, 0x39, 0x89, 0x91,
	0x5d, 0x72, 0x6e, 0x14, 0x59, 0xe1, 0xf7, 0x50, 0xb4, 0x4f, 0x1d, 0x56, 0x2c, 0x6a, 0xb2, 0xfe,
	0x17, 0xe1, 0x4b, 0x23, 0x35, 0x0f, 0x13, 0xb6, 0x54, 0xf6, 0x09, 0xa3, 0x6e, 0x58, 0x7c, 0xf2,
	0x95, 0xcd, 0x7c, 0x56, 0x48, 0x17, 0x93, 0x61, 0xb3, 0x10, 0xb3, 0xd2, 0x2f, 0x49, 0xb8, 0x1e,
	0x13, 0x92, 0x3c, 0x9e, 0x0f, 0x20, 0xeb, 0xf0, 0xaa, 0x89, 0xb9, 0x3c, 0x2e, 0x3b, 0xf3, 0x05,
	0x28, 0x2f, 0xa3, 0x76, 0x04, 0x84, 0x63, 0x5b, 0x44, 0xc5, 0x9f, 0xb8, 0x8a, 0xf8, 0x7b, 0x90,
	0x63, 0xa2, 0x52, 0x92, 0x83, 0x38, 0x32, 0xfa, 0x42, 0x0e, 0xdd, 0x28, 0x0a, 0xc7, 0x37, 0xd1,
	0xbe, 0x53, 0x20, 0x1b, 0x25, 0xf9, 0x22, 0x05, 0x10, 0x2b, 0x4a, 0x62, 0x61, 0x51, 0xb4, 0x0f,
	0x20, 0x17, 0xe3, 0x3a, 0xbb, 0xa5, 0x2a, 0xb3, 0x5b, 0x6a, 0xf9, 0x9f, 0x04, 0x64, 0xea, 0xdc,
	0x88, 0x5a, 0xa1, 0xa8, 0x0d, 0xcf, 0x97, 0xef, 0x2d, 0x14, 0x3f, 0xc2, 0xf1, 0xd7, 0x9e, 0xb6,
	0x39, 0x7b, 0x51, 0x52, 0xf8, 0x08, 0x96, 0xc7, 0x2f, 0x0c, 0xb4, 0x79, 0xd9, 0xf3, 0x48, 0x7b,
	0xf5, 0xd2, 0x67, 0x09, 0xda, 0x87, 0x34, 0xbf, 0x86, 0xd0, 0xcd, 0x98, 0x5f, 0xf4, 0x1a, 0xd5,
	0xb4, 0x59, 0x4b, 0x13, 0x3c, 0xbf, 0x31, 0xa6, 0xf0, 0xd1, 0xab, 0x69, 0x0a, 0x1f, 0xbf, 0x60,
	0x7a, 0xa0, 0x46, 0xc4, 0x81, 0x6e, 0x2d, 0xe8, 0x9d, 0x5a, 0x71, 0x91, 0xae, 0xb6, 0x95, 0xbb,
	0x4a, 0xb5, 0x7a, 0xfe, 0xc7, 0xd6, 0xb5, 0xf3, 0x67, 0x5b, 0xca, 0x6f, 0xcf, 0xb6, 0x94, 0x1f,
	0xff, 0xdc, 0x52, 0x3e, 0xbf, 0x7b, 0x25, 0xb1, 0x44, 0xf6, 0x7e, 0x94, 0xe1, 0xe6, 0xbd, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x76, 0xb5, 0x4e, 0xd9, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DriverClient is the client API for Driver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverClient interface {
	// Session begins a scoped interaction with the driver from a single process context.
	// It maps an endpoint URL, target, and caller ID to a returned opaque session handle,
	// which is to be used with further Driver interactions. Note that at any given time,
	// there may be *many* concurrent Sessions.
	StartSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	// Validate that a CollectionSpec is compatible with a materialization target,
	// and return constraints over the projections of the collection.
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	// Apply a CollectionSpec and selected Projections to a materialization target.
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	// Fence inserts a transactional "write fence" boundary by fencing the caller
	// ID encapsulated within a session, to the session's unique handle. Typically this
	// is done by tying the caller ID to a unique session nonce in a transaction,
	// or by increasing a epoch value of the caller ID.
	//
	// For example a RDBMS might use a "writers" table holding a caller ID key,
	// a current session nonce, and a last checkpoint. The Fence RPC would update the
	// nonce to the current session's unique value -- effectively "poisoning" transactions
	// of prior sessions -- and return the checkpoint. Store RPCs must in turn verify
	// their session nonce is still effective before committing a transaction.
	//
	// On return, it's guaranteed that no session previously fenced to the caller ID
	// (now a "zombie" session) can commit transactions as part of Store RPCs which
	// update documents or checkpoints. Fence returns the checkpoint last committed
	// by this caller ID in a Store RPC.
	//
	// Fence is an *optional* API which is required for materialization targets that
	// support end-to-end "exactly once" semantics. Stores which support only "at least once"
	// semantics can implement Fence as a no-op, returning a zero-value FenceResponse.
	Fence(ctx context.Context, in *FenceRequest, opts ...grpc.CallOption) (*FenceResponse, error)
	// Transaction is a bi-directional streaming rpc that corresponds to each transaction within the
	// flow consumer. The Transaction rpc follows a strict lifecycle:
	//
	// 1. Init: The client (flow-consumer) sends a Start message, and then the client immediately
	//    transitions to the Loading state.
	// 2. Loading:
	//    - The client sends 0 or more LoadRequest messages, terminated by a LoadEOF message.
	//    - The driver may send 0 or more LoadResponse messages, followed by a LoadEOF message. These
	//    responses may be sent asynchronously, and at whatever cadence is most performant for the
	//    driver. Drivers may wait until they receive the LoadEOF from the client before they send any
	//    responses, or they may send responses earlier. Any requested document that is missing from
	//    the set of LoadResponses is presumed to simply not exist.
	// 3. Storing:
	//    - The client sends 0 or more StoreRequest messages, and then closes the send side of its
	//    stream.
	//    - The driver processes each StoreRequest and returns exactly one StoreResponse as the final
	//    message sent to the client. The transaction is now complete.
	// Note that for drivers that do not support loads, they may immediately send a LoadEOF message
	// after the transaction is started. If the `always_empty_hint` is `true`, then the client
	// should (but is not required to) send a LoadEOF message immediately after sending
	// its Start message. Thus, the lifecycle of a Transaction RPC is always the same, regardless of
	// whether a client supports loads or not.
	Transaction(ctx context.Context, opts ...grpc.CallOption) (Driver_TransactionClient, error)
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) StartSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/materialize.Driver/StartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/materialize.Driver/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	out := new(ApplyResponse)
	err := c.cc.Invoke(ctx, "/materialize.Driver/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Fence(ctx context.Context, in *FenceRequest, opts ...grpc.CallOption) (*FenceResponse, error) {
	out := new(FenceResponse)
	err := c.cc.Invoke(ctx, "/materialize.Driver/Fence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Transaction(ctx context.Context, opts ...grpc.CallOption) (Driver_TransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Driver_serviceDesc.Streams[0], "/materialize.Driver/Transaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverTransactionClient{stream}
	return x, nil
}

type Driver_TransactionClient interface {
	Send(*TransactionRequest) error
	Recv() (*TransactionResponse, error)
	grpc.ClientStream
}

type driverTransactionClient struct {
	grpc.ClientStream
}

func (x *driverTransactionClient) Send(m *TransactionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverTransactionClient) Recv() (*TransactionResponse, error) {
	m := new(TransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DriverServer is the server API for Driver service.
type DriverServer interface {
	// Session begins a scoped interaction with the driver from a single process context.
	// It maps an endpoint URL, target, and caller ID to a returned opaque session handle,
	// which is to be used with further Driver interactions. Note that at any given time,
	// there may be *many* concurrent Sessions.
	StartSession(context.Context, *SessionRequest) (*SessionResponse, error)
	// Validate that a CollectionSpec is compatible with a materialization target,
	// and return constraints over the projections of the collection.
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	// Apply a CollectionSpec and selected Projections to a materialization target.
	Apply(context.Context, *ApplyRequest) (*ApplyResponse, error)
	// Fence inserts a transactional "write fence" boundary by fencing the caller
	// ID encapsulated within a session, to the session's unique handle. Typically this
	// is done by tying the caller ID to a unique session nonce in a transaction,
	// or by increasing a epoch value of the caller ID.
	//
	// For example a RDBMS might use a "writers" table holding a caller ID key,
	// a current session nonce, and a last checkpoint. The Fence RPC would update the
	// nonce to the current session's unique value -- effectively "poisoning" transactions
	// of prior sessions -- and return the checkpoint. Store RPCs must in turn verify
	// their session nonce is still effective before committing a transaction.
	//
	// On return, it's guaranteed that no session previously fenced to the caller ID
	// (now a "zombie" session) can commit transactions as part of Store RPCs which
	// update documents or checkpoints. Fence returns the checkpoint last committed
	// by this caller ID in a Store RPC.
	//
	// Fence is an *optional* API which is required for materialization targets that
	// support end-to-end "exactly once" semantics. Stores which support only "at least once"
	// semantics can implement Fence as a no-op, returning a zero-value FenceResponse.
	Fence(context.Context, *FenceRequest) (*FenceResponse, error)
	// Transaction is a bi-directional streaming rpc that corresponds to each transaction within the
	// flow consumer. The Transaction rpc follows a strict lifecycle:
	//
	// 1. Init: The client (flow-consumer) sends a Start message, and then the client immediately
	//    transitions to the Loading state.
	// 2. Loading:
	//    - The client sends 0 or more LoadRequest messages, terminated by a LoadEOF message.
	//    - The driver may send 0 or more LoadResponse messages, followed by a LoadEOF message. These
	//    responses may be sent asynchronously, and at whatever cadence is most performant for the
	//    driver. Drivers may wait until they receive the LoadEOF from the client before they send any
	//    responses, or they may send responses earlier. Any requested document that is missing from
	//    the set of LoadResponses is presumed to simply not exist.
	// 3. Storing:
	//    - The client sends 0 or more StoreRequest messages, and then closes the send side of its
	//    stream.
	//    - The driver processes each StoreRequest and returns exactly one StoreResponse as the final
	//    message sent to the client. The transaction is now complete.
	// Note that for drivers that do not support loads, they may immediately send a LoadEOF message
	// after the transaction is started. If the `always_empty_hint` is `true`, then the client
	// should (but is not required to) send a LoadEOF message immediately after sending
	// its Start message. Thus, the lifecycle of a Transaction RPC is always the same, regardless of
	// whether a client supports loads or not.
	Transaction(Driver_TransactionServer) error
}

// UnimplementedDriverServer can be embedded to have forward compatible implementations.
type UnimplementedDriverServer struct {
}

func (*UnimplementedDriverServer) StartSession(ctx context.Context, req *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (*UnimplementedDriverServer) Validate(ctx context.Context, req *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (*UnimplementedDriverServer) Apply(ctx context.Context, req *ApplyRequest) (*ApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (*UnimplementedDriverServer) Fence(ctx context.Context, req *FenceRequest) (*FenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fence not implemented")
}
func (*UnimplementedDriverServer) Transaction(srv Driver_TransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/materialize.Driver/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).StartSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/materialize.Driver/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/materialize.Driver/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Fence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Fence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/materialize.Driver/Fence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Fence(ctx, req.(*FenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Transaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServer).Transaction(&driverTransactionServer{stream})
}

type Driver_TransactionServer interface {
	Send(*TransactionResponse) error
	Recv() (*TransactionRequest, error)
	grpc.ServerStream
}

type driverTransactionServer struct {
	grpc.ServerStream
}

func (x *driverTransactionServer) Send(m *TransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverTransactionServer) Recv() (*TransactionRequest, error) {
	m := new(TransactionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "materialize.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSession",
			Handler:    _Driver_StartSession_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Driver_Validate_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Driver_Apply_Handler,
		},
		{
			MethodName: "Fence",
			Handler:    _Driver_Fence_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transaction",
			Handler:       _Driver_Transaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "go/protocols/materialize/materialize.proto",
}

func (m *Constraint) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Constraint) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Constraint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintMaterialize(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *SessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShardId) > 0 {
		i -= len(m.ShardId)
		copy(dAtA[i:], m.ShardId)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.ShardId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EndpointUrl) > 0 {
		i -= len(m.EndpointUrl)
		copy(dAtA[i:], m.EndpointUrl)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.EndpointUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FieldConfig) > 0 {
		for k := range m.FieldConfig {
			v := m.FieldConfig[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMaterialize(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMaterialize(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMaterialize(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Constraints) > 0 {
		for k := range m.Constraints {
			v := m.Constraints[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMaterialize(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMaterialize(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMaterialize(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldSelection) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldSelection) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldSelection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FieldConfig) > 0 {
		for k := range m.FieldConfig {
			v := m.FieldConfig[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMaterialize(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMaterialize(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMaterialize(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Document) > 0 {
		i -= len(m.Document)
		copy(dAtA[i:], m.Document)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Document)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DryRun {
		i--
		if m.DryRun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Fields != nil {
		{
			size, err := m.Fields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActionDescription) > 0 {
		i -= len(m.ActionDescription)
		copy(dAtA[i:], m.ActionDescription)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.ActionDescription)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DriverCheckpoint) > 0 {
		i -= len(m.DriverCheckpoint)
		copy(dAtA[i:], m.DriverCheckpoint)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.DriverCheckpoint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FlowCheckpoint) > 0 {
		i -= len(m.FlowCheckpoint)
		copy(dAtA[i:], m.FlowCheckpoint)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.FlowCheckpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadEOF) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadEOF) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadEOF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AlwaysEmptyHint {
		i--
		if m.AlwaysEmptyHint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Store != nil {
		{
			size, err := m.Store.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LoadEOF != nil {
		{
			size, err := m.LoadEOF.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Load != nil {
		{
			size, err := m.Load.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Start != nil {
		{
			size, err := m.Start.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionRequest_Start) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionRequest_Start) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionRequest_Start) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FlowCheckpoint) > 0 {
		i -= len(m.FlowCheckpoint)
		copy(dAtA[i:], m.FlowCheckpoint)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.FlowCheckpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Fields != nil {
		{
			size, err := m.Fields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionRequest_LoadRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionRequest_LoadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionRequest_LoadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PackedKeys) > 0 {
		for iNdEx := len(m.PackedKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PackedKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMaterialize(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Arena) > 0 {
		i -= len(m.Arena)
		copy(dAtA[i:], m.Arena)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Arena)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TransactionRequest_StoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionRequest_StoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionRequest_StoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Exists) > 0 {
		for iNdEx := len(m.Exists) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Exists[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Exists)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DocsJson) > 0 {
		for iNdEx := len(m.DocsJson) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocsJson[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMaterialize(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PackedValues) > 0 {
		for iNdEx := len(m.PackedValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PackedValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMaterialize(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PackedKeys) > 0 {
		for iNdEx := len(m.PackedKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PackedKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMaterialize(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Arena) > 0 {
		i -= len(m.Arena)
		copy(dAtA[i:], m.Arena)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Arena)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StoreResponse != nil {
		{
			size, err := m.StoreResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LoadEOF != nil {
		{
			size, err := m.LoadEOF.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.LoadResponse != nil {
		{
			size, err := m.LoadResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaterialize(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionResponse_LoadResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionResponse_LoadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionResponse_LoadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DocsJson) > 0 {
		for iNdEx := len(m.DocsJson) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocsJson[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMaterialize(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Arena) > 0 {
		i -= len(m.Arena)
		copy(dAtA[i:], m.Arena)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.Arena)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionResponse_StoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionResponse_StoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionResponse_StoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DriverCheckpoint) > 0 {
		i -= len(m.DriverCheckpoint)
		copy(dAtA[i:], m.DriverCheckpoint)
		i = encodeVarintMaterialize(dAtA, i, uint64(len(m.DriverCheckpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMaterialize(dAtA []byte, offset int, v uint64) int {
	offset -= sovMaterialize(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Constraint) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMaterialize(uint64(m.Type))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EndpointUrl)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	l = len(m.ShardId)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.Collection != nil {
		l = m.Collection.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if len(m.FieldConfig) > 0 {
		for k, v := range m.FieldConfig {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMaterialize(uint64(len(k))) + 1 + len(v) + sovMaterialize(uint64(len(v)))
			n += mapEntrySize + 1 + sovMaterialize(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for k, v := range m.Constraints {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.ProtoSize()
				l += 1 + sovMaterialize(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMaterialize(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMaterialize(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldSelection) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovMaterialize(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovMaterialize(uint64(l))
		}
	}
	l = len(m.Document)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if len(m.FieldConfig) > 0 {
		for k, v := range m.FieldConfig {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMaterialize(uint64(len(k))) + 1 + len(v) + sovMaterialize(uint64(len(v)))
			n += mapEntrySize + 1 + sovMaterialize(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.Collection != nil {
		l = m.Collection.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.Fields != nil {
		l = m.Fields.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.DryRun {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActionDescription)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FenceRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	l = len(m.DriverCheckpoint)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FenceResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FlowCheckpoint)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadEOF) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlwaysEmptyHint {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != nil {
		l = m.Start.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.Load != nil {
		l = m.Load.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.LoadEOF != nil {
		l = m.LoadEOF.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.Store != nil {
		l = m.Store.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionRequest_Start) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.Fields != nil {
		l = m.Fields.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	l = len(m.FlowCheckpoint)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionRequest_LoadRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arena)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if len(m.PackedKeys) > 0 {
		for _, e := range m.PackedKeys {
			l = e.ProtoSize()
			n += 1 + l + sovMaterialize(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionRequest_StoreRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arena)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if len(m.PackedKeys) > 0 {
		for _, e := range m.PackedKeys {
			l = e.ProtoSize()
			n += 1 + l + sovMaterialize(uint64(l))
		}
	}
	if len(m.PackedValues) > 0 {
		for _, e := range m.PackedValues {
			l = e.ProtoSize()
			n += 1 + l + sovMaterialize(uint64(l))
		}
	}
	if len(m.DocsJson) > 0 {
		for _, e := range m.DocsJson {
			l = e.ProtoSize()
			n += 1 + l + sovMaterialize(uint64(l))
		}
	}
	if len(m.Exists) > 0 {
		n += 1 + sovMaterialize(uint64(len(m.Exists))) + len(m.Exists)*1
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoadResponse != nil {
		l = m.LoadResponse.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.LoadEOF != nil {
		l = m.LoadEOF.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.StoreResponse != nil {
		l = m.StoreResponse.ProtoSize()
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionResponse_LoadResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arena)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if len(m.DocsJson) > 0 {
		for _, e := range m.DocsJson {
			l = e.ProtoSize()
			n += 1 + l + sovMaterialize(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionResponse_StoreResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DriverCheckpoint)
	if l > 0 {
		n += 1 + l + sovMaterialize(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMaterialize(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMaterialize(x uint64) (n int) {
	return sovMaterialize(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Constraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Constraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Constraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Constraint_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = append(m.Handle[:0], dAtA[iNdEx:postIndex]...)
			if m.Handle == nil {
				m.Handle = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = append(m.Handle[:0], dAtA[iNdEx:postIndex]...)
			if m.Handle == nil {
				m.Handle = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &flow.CollectionSpec{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldConfig == nil {
				m.FieldConfig = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMaterialize
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaterialize
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMaterialize
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMaterialize
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaterialize
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMaterialize
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMaterialize
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMaterialize(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMaterialize
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FieldConfig[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Constraints == nil {
				m.Constraints = make(map[string]*Constraint)
			}
			var mapkey string
			var mapvalue *Constraint
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMaterialize
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaterialize
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMaterialize
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMaterialize
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaterialize
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMaterialize
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMaterialize
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Constraint{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMaterialize(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMaterialize
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Constraints[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldSelection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldSelection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldSelection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Document = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldConfig == nil {
				m.FieldConfig = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMaterialize
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaterialize
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMaterialize
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMaterialize
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaterialize
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMaterialize
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMaterialize
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMaterialize(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMaterialize
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FieldConfig[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = append(m.Handle[:0], dAtA[iNdEx:postIndex]...)
			if m.Handle == nil {
				m.Handle = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &flow.CollectionSpec{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &FieldSelection{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DryRun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DryRun = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = append(m.Handle[:0], dAtA[iNdEx:postIndex]...)
			if m.Handle == nil {
				m.Handle = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverCheckpoint = append(m.DriverCheckpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.DriverCheckpoint == nil {
				m.DriverCheckpoint = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowCheckpoint = append(m.FlowCheckpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.FlowCheckpoint == nil {
				m.FlowCheckpoint = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadEOF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadEOF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadEOF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEmptyHint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlwaysEmptyHint = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &TransactionRequest_Start{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Load == nil {
				m.Load = &TransactionRequest_LoadRequest{}
			}
			if err := m.Load.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadEOF", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadEOF == nil {
				m.LoadEOF = &LoadEOF{}
			}
			if err := m.LoadEOF.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Store == nil {
				m.Store = &TransactionRequest_StoreRequest{}
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionRequest_Start) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Start: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Start: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = append(m.Handle[:0], dAtA[iNdEx:postIndex]...)
			if m.Handle == nil {
				m.Handle = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &FieldSelection{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowCheckpoint = append(m.FlowCheckpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.FlowCheckpoint == nil {
				m.FlowCheckpoint = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionRequest_LoadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arena", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arena = append(m.Arena[:0], dAtA[iNdEx:postIndex]...)
			if m.Arena == nil {
				m.Arena = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackedKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackedKeys = append(m.PackedKeys, flow.Slice{})
			if err := m.PackedKeys[len(m.PackedKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionRequest_StoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arena", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arena = append(m.Arena[:0], dAtA[iNdEx:postIndex]...)
			if m.Arena == nil {
				m.Arena = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackedKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackedKeys = append(m.PackedKeys, flow.Slice{})
			if err := m.PackedKeys[len(m.PackedKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackedValues = append(m.PackedValues, flow.Slice{})
			if err := m.PackedValues[len(m.PackedValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocsJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocsJson = append(m.DocsJson, flow.Slice{})
			if err := m.DocsJson[len(m.DocsJson)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMaterialize
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Exists = append(m.Exists, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMaterialize
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMaterialize
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMaterialize
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Exists) == 0 {
					m.Exists = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaterialize
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Exists = append(m.Exists, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadResponse == nil {
				m.LoadResponse = &TransactionResponse_LoadResponse{}
			}
			if err := m.LoadResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadEOF", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadEOF == nil {
				m.LoadEOF = &LoadEOF{}
			}
			if err := m.LoadEOF.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreResponse == nil {
				m.StoreResponse = &TransactionResponse_StoreResponse{}
			}
			if err := m.StoreResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionResponse_LoadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arena", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arena = append(m.Arena[:0], dAtA[iNdEx:postIndex]...)
			if m.Arena == nil {
				m.Arena = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocsJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocsJson = append(m.DocsJson, flow.Slice{})
			if err := m.DocsJson[len(m.DocsJson)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionResponse_StoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaterialize
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaterialize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverCheckpoint = append(m.DriverCheckpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.DriverCheckpoint == nil {
				m.DriverCheckpoint = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaterialize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaterialize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMaterialize(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMaterialize
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaterialize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMaterialize
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMaterialize
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMaterialize
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMaterialize        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMaterialize          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMaterialize = fmt.Errorf("proto: unexpected end of group")
)
