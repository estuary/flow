syntax = "proto3";

package materialize;
option go_package = "github.com/estuary/flow/go/protocols/materialize";

import "go/protocols/flow/flow.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;


// Constraint constrains the use of a flow.Projection within a materialization.
message Constraint {
  // Type encodes a constraint type for this flow.Projection.
  enum Type {
    // This specific projection must be present.
    FIELD_REQUIRED = 0;
    // At least one projection with this location pointer must be present.
    LOCATION_REQUIRED = 1;
    // A projection with this location is recommended, and should be included by default.
    LOCATION_RECOMMENDED = 2;
    // This projection may be included, but should be omitted by default.
    FIELD_OPTIONAL = 3;
    // This projection must not be present in the materialization.
    FIELD_FORBIDDEN = 4;
    // This specific projection is required but is also unacceptable (e.x.,
    // because it uses an incompatible type with a previous applied version).
    UNSATISFIABLE = 5;
  }
  Type type = 2;
  // Optional human readable reason for the given constraint.
  // Implementations are strongly encouraged to supply a descriptive message.
  string reason = 3;
}

// Driver is the service implemented by a materialization target system.
service Driver {
  // Validate that a CollectionSpec is compatible with a materialization target,
  // and return constraints over the projections of the collection.
  rpc Validate(ValidateRequest) returns (ValidateResponse);
  // Apply a CollectionSpec and FieldSelections to a materialization target.
  rpc Apply(ApplyRequest) returns (ApplyResponse);
  // Transactions is a very long lived RPC through which the Flow runtime and a
  // materialization endpoint cooperatively execute an unbounded number of
  // transactions. The RPC follows the following lifecycle:
  //
  // :Open:
  //    - The Flow runtime client sends TransactionRequest.Open,
  //      opening the stream and requesting it be fenced from other streams.
  // :Opened:
  //    - The driver server sends TransactionResponse.Opened after,
  //      where supported, ensuring other stream clients are fenced.
  //
  // TransactionRequest.Open and TransactionResponse.Opened are sent only
  // once, at the commencement of the stream. Thereafter the protocol loops:
  //
  // :Load:
  //    - The client sends zero or more TransactionRequest.Load.
  //    - The driver server may immediately send any number of
  //      TransactionResponse.Loaded in response.
  //    - Or, it may defer responding with some or all loads until later.
  // :Prepare:
  //    - The client sends TransactionRequest.Prepare.
  //    - At this time, the server must flush remaining TransactionResponse.Loaded.
  // :Prepared:
  //    - The server sends TransactionResponse.Prepared.
  // :Store:
  //    - The client sends zero or more TransactionRequest.Store.
  // :Commit:
  //    - The client sends TransactionRequest.Commit.
  //    - The server commits the prepared Flow checkpoint and all stores.
  // :Committed:
  //    - The server sends TransactionResponse.Committed.
  //    - The Flow runtime persists the prepared driver checkpoint.
  //    - Client and server begin a new transaction and loop to "Load".
  //
  // An error of any kind rolls back the transaction in progress and terminates the stream.
  rpc Transactions(stream TransactionRequest) returns (stream TransactionResponse);
}

// ValidateRequest is the request type of the Validate RPC.
message ValidateRequest {
  // Endpoint which this request is addressing.
  string endpoint_name = 1;
  // Endpoint type addressed by this request.
  flow.EndpointType endpoint_type = 2;
  // Driver-specific configuration, as an encoded JSON object.
  string endpoint_config_json = 3;
  // Collection to be materialized.
  flow.CollectionSpec collection = 4;
  // Projection configuration, keyed by the projection field name,
  // with JSON-encoded and driver-defined configuration objects.
  map<string, string> field_config_json = 5;
}

// ValidateResponse is the response type of the Validate RPC.
message ValidateResponse {
  // Constraints over collection projections imposed by the Driver,
  // keyed by the projection field name. Projections of the CollectionSpec
  // which are missing from constraints are implicitly forbidden.
  map<string, Constraint> constraints = 1;
  // Components of the resource path identified by this endpoint configuration.
  // Resource paths fully qualify the resource identified by the request.
  // - For an RDBMS, this would be []{dbname, schema, table}.
  // - For Kafka, this would be []{topic}.
  // - For Redis, this would be []{key_prefix}.
  // Some drivers may not have any path components. Semantically, this means
  // the endpoint already represents a granular and indivisible resource.
  repeated string resource_path = 2;
}

// ApplyRequest is the request type of the Apply RPC.
message ApplyRequest {
  // Materialization to be applied.
  flow.MaterializationSpec materialization = 1;
  // Is this Apply a dry-run? If so, no action is undertaken and Apply will
  // report only what would have happened.
  bool dry_run = 2;
}

// ApplyResponse is the response type of the Apply RPC.
message ApplyResponse {
  // Human-readable description of the action that the Driver took (or, if dry_run, would have taken).
  // If empty, this Apply is to be considered a "no-op".
  string action_description = 1;
}

// TransactionRequest is the request type of a Transaction RPC.
// It will have exactly one top-level field set, which represents its message type.
message TransactionRequest {
  // Open a transaction stream and, where supported, fence off other
  // streams having this same |shard_fqn| from issuing further commits.
  //
  // Fencing semantics are optional, but required for exactly-once semantics.
  // Non-transactional stores can ignore this aspect and achieve at-least-once.
  //
  // Where implemented, servers must guarantee that no other streams of this
  // |shard_fqn| (now "zombie" streams) can commit transactions, and must then
  // return the final checkpoint committed by this |shard_fqn| in its response.
  message Open {
    // Materialization to be transacted, which is the MaterializationSpec
    // last provided to a successful Apply RPC.
    flow.MaterializationSpec materialization = 1;
    // Stable ID to which transactions are fenced. The Flow runtime uses
    // fully-qualified shard names to provide stable identifiers.
    // Driver implementations may treat these as opaque values.
    string shard_fqn = 2;
    // Last-persisted driver checkpoint from a previous transaction stream.
    // Or empty, if the driver hasn't returned a checkpoint.
    bytes driver_checkpoint = 3;
  }
  Open open = 1;

  // Load one or more documents identified by key.
  // Keys may included documents which have never before been stored,
  // but a given key will be sent in a transaction Load just one time.
  message Load {
    // Byte arena of the request.
    bytes arena = 2 [ (gogoproto.casttype) = "github.com/estuary/flow/go/protocols/flow.Arena" ];
    // Packed tuples of collection keys, enumerating the documents to load.
    repeated flow.Slice packed_keys = 3 [ (gogoproto.nullable) = false ];
  }
  Load load = 2;

  // Prepare to commit. No further Loads will be sent in this transaction.
  message Prepare {
    // Flow checkpoint to commit with this transaction.
    bytes flow_checkpoint = 1;
  }
  Prepare prepare = 3;

  // Store documents of this transaction commit.
  message Store {
    // Byte arena of the request.
    bytes arena = 1 [ (gogoproto.casttype) = "github.com/estuary/flow/go/protocols/flow.Arena" ];
    // Packed tuples holding keys of each document.
    repeated flow.Slice packed_keys = 2 [ (gogoproto.nullable) = false ];
    // Packed tuples holding values for each document.
    repeated flow.Slice packed_values = 3 [ (gogoproto.nullable) = false ];
    // JSON documents.
    repeated flow.Slice docs_json = 4 [ (gogoproto.nullable) = false ];
    // Exists is true if this document as previously been loaded or stored.
    repeated bool exists = 5;
  }
  Store store = 4;

  // Commit the transaction.
  message Commit {}
  Commit commit = 5;
}

// TransactionResponse is the response type of a Transaction RPC.
// It will have exactly one top-level field set, which represents its message type.
message TransactionResponse {
  // Opened responds to TransactionRequest.Open of the client.
  message Opened {
    // Flow checkpoint which was previously committed with this |shard_fqn|.
    // May be nil, if unknown or if transactional semantics are not supported,
    // in which case the Flow runtime will use its most-recent persisted checkpoint.
    bytes flow_checkpoint = 1;
    // Materialize combined delta updates of documents rather than full reductions.
    //
    // When set, the Flow runtime will not attempt to load documents via
    // TransactionRequest.Load, and also disables re-use of cached documents
    // stored in prior transactions. Each stored document is exclusively combined
    // from updates processed by the runtime within the current transaction only.
    //
    // This is appropriate for drivers over streams, WebHooks, and append-only files.
    //
    // For example, given a collection which reduces a sum count for each key,
    // its materialization will produce a stream of delta updates to the count,
    // such that a reader of the stream will arrive at the correct total count.
    bool delta_updates = 2;
  }
  Opened opened = 1;

  // Loaded responds to TransactionRequest.Loads of the client.
  // It returns documents of requested keys which have previously been stored.
  // Keys not found in the store MUST be omitted. Documents may be in any order,
  // both within and across Loaded response messages, but a document of a given
  // key MUST be sent at most one time in a Transaction.
  message Loaded {
    // Byte arena of the request.
    bytes arena = 1 [ (gogoproto.casttype) = "github.com/estuary/flow/go/protocols/flow.Arena" ];
    // Loaded JSON documents.
    repeated flow.Slice docs_json = 2 [ (gogoproto.nullable) = false ];
  }
  Loaded loaded = 2;

  // Prepared responds to a TransactionRequest.Prepare of the client.
  // No further Loaded responses will be sent.
  message Prepared {
    // Optional driver checkpoint of this transaction.
    // If provided, the most recent checkpoint will be persisted by the
    // Flow runtime and returned in a future Fence request.
    bytes driver_checkpoint = 1;
  }
  Prepared prepared = 3;

  // Acknowledge the transaction as committed.
  message Committed {}
  Committed committed = 4;
}