syntax = "proto3";

package materialize;
option go_package = "github.com/estuary/flow/go/protocols/materialize";

import "go/protocols/flow/flow.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// Constraint constrains the use of a flow.Projection within a materialization.
message Constraint {
  // Type encodes a constraint type for this flow.Projection.
  enum Type {
    // This specific projection must be present.
    FIELD_REQUIRED = 0;
    // At least one projection with this location pointer must be present.
    LOCATION_REQUIRED = 1;
    // A projection with this location is recommended, and should be included by
    // default.
    LOCATION_RECOMMENDED = 2;
    // This projection may be included, but should be omitted by default.
    FIELD_OPTIONAL = 3;
    // This projection must not be present in the materialization.
    FIELD_FORBIDDEN = 4;
    // This specific projection is required but is also unacceptable (e.x.,
    // because it uses an incompatible type with a previous applied version).
    UNSATISFIABLE = 5;
  }
  Type type = 2;
  // Optional human readable reason for the given constraint.
  // Implementations are strongly encouraged to supply a descriptive message.
  string reason = 3;
}

// Driver is the service implemented by a materialization connector.
service Driver {
  // Spec returns the specification definition of this driver.
  // Notably this includes its endpoint and resource configuration JSON schema.
  rpc Spec(SpecRequest) returns (SpecResponse);
  // Validate that store resources and proposed collection bindings are
  // compatible, and return constraints over the projections of each binding.
  rpc Validate(ValidateRequest) returns (ValidateResponse);
  // ApplyUpsert applies a new or updated materialization to the store.
  rpc ApplyUpsert(ApplyRequest) returns (ApplyResponse);
  // ApplyDelete deletes an existing materialization from the store.
  rpc ApplyDelete(ApplyRequest) returns (ApplyResponse);
  // Transactions is a very long lived RPC through which the Flow runtime and a
  // Driver cooperatively execute an unbounded number of transactions.
  //
  // This RPC workflow maintains a materialized view of a Flow collection
  // in an external system. It has distinct load, prepare, store, and commit
  // phases. The Flow runtime and driver cooperatively maintain a fully-reduced
  // view of each document by loading current states from the store, reducing in
  // a number of updates, and then transactionally storing updated documents and
  // checkpoints.
  //
  // Push-only Endpoints & Delta Updates
  // ===================================
  //
  // Some systems, such as APIs, Webhooks, and Pub/Sub, are push-only in nature.
  // Flow materializations can run in a "delta updates" mode, where the load
  // phase is always skipped and Flow does not attempt to store fully-reduced
  // documents. Instead, during the store phase, the runtime sends delta
  // updates which reflect the combined roll-up of collection documents
  // processed only within this transaction.
  //
  // To illustrate the meaning of a delta update, consider documents which are
  // simple counters, having a collection schema that uses a `sum` reduction
  // strategy.
  //
  // Without delta updates, Flow would reduce documents -1, 3, and 2 by `sum`
  // to arrive at document 4, which is stored. The next transaction,
  // document 4 is loaded and reduced with 6, -7, and -1 to arrive at a new
  // stored document 2. This document, 2, represents the full reduction of the
  // collection documents materialized thus far.
  //
  // Compare to delta updates mode: collection documents -1, 3, and 2 are
  // combined to store a delta-update document of 4. The next transaction starts
  // anew, and 6, -7, and -1 combine to arrive at a delta-update document of -2.
  // These delta updates are a windowed combine over documents seen in the
  // current transaction only, and unlike before are not a full reduction of the
  // document. If delta updates were written to pub/sub, note that a subscriber
  // could further reduce over each delta update to recover the fully reduced
  // document of 2.
  //
  // Note that many use cases require only `lastWriteWins` reduction behavior,
  // and for these use cases delta updates does the "right thing" by trivially
  // re-writing each document with its most recent version. This matches the
  // behavior of Kafka Connect, for example.
  //
  // On Transactionality
  // ===================
  //
  // The beating heart of transactionality in materializations is this:
  // there is a consumption checkpoint, and there is a state of the view.
  // As the materialization progresses, both the checkpoint and the view state
  // will change. Updates to the checkpoint and to the view state MUST always
  // commit together, in the exact same transaction.
  //
  // Flow transaction tasks have a backing transactional recovery log,
  // which is capable of durable commits that update both the checkpoint
  // and also a (reasonably small) driver-defined state. More on driver
  // states later.
  //
  // Many interesting systems are also fully transactional in nature.
  //
  // When implementing a matherialization driver, the first question an
  // implementor must answer is: whose commit is authoritative?
  // Flow's recovery log, or the materialized system ?
  // This protocol supports either.
  //
  // Implementation Pattern: Remote Store is Authoritative
  // =====================================================
  //
  // In this pattern, the remote store persists view states and the Flow
  // consumption checkpoints which those views reflect (there are many such
  // checkpoints: one per task split). The Flow recovery log is not used.
  //
  // Typically this workflow runs in the context of a synchronous BEGIN/COMMIT
  // transaction, which updates table states and a Flow checkpoint together.
  // The transaction need be scoped only to the store phase of this workflow,
  // as the Flow runtime assumes only read-committed loads.
  //
  // Flow is a distributed system, and an important consideration is the effect
  // of a "zombie" assignment of a materialization task, which can race a
  // newly-promoted assignment of that same task.
  //
  // Fencing is a technique which uses the transactional capabilities of a store
  // to "fence off" an older zombie assignment, such that it's prevented from
  // committing further transactions. This avoids a failure mode where:
  //  - New assignment N recovers a checkpoint at Ti.
  //  - Zombie assignment Z commits another transaction at Ti+1.
  //  - N beings processing from Ti, inadvertently duplicating the effects of
  //  Ti+1.
  //
  // When authoritative, the remote store must implement fencing behavior.
  // As a sketch, the store can maintain a nonce value alongside the checkpoint
  // of each task split. The nonce is updated on each open of this RPC,
  // and each commit transaction then verifies that the nonce has not been
  // changed.
  //
  // In the future, if another RPC opens and updates the nonce, it fences off
  // this instance of the task split and prevents it from committing further
  // transactions.
  //
  // Implementation Pattern: Recovery Log with Non-Transactional Store
  // =================================================================
  //
  // In this pattern, the recovery log persists the Flow checkpoint and handles
  // fencing semantics. During the load and store phases, the driver
  // directly manipulates a non-transactional store or API.
  //
  // Note that this pattern is at-least-once. A transaction may fail part-way
  // through and be restarted, causing its effects to be partially or fully
  // replayed.
  //
  // Care must be taken if the collection's schema has reduction annotations
  // such as `sum`, as those reductions may be applied more than once due to
  // a partially completed, but ultimately failed transaction.
  //
  // If the collection's schema is last-write-wins, this mode still provides
  // effectively-once behavior. Collections which aren't last-write-wins
  // can be turned into last-write-wins through the use of derivation
  // registers.
  //
  // Implementation Pattern: Recovery Log with Idempotent Apply
  // ==========================================================
  //
  // In this pattern the recovery log is authoritative, but the driver uses
  // external stable storage to stage the effects of a transaction -- rather
  // than directly applying them to the store -- such that those effects can be
  // idempotently applied after the transaction commits.
  //
  // This allows stores which feature a weaker transactionality guarantee to
  // still be used in an exactly-once way, so long as they support an idempotent
  // apply operation.
  //
  // Driver checkpoints can facilitate this pattern. For example, a driver might
  // generate a unique filename in S3 and reference it in its prepared
  // checkpoint, which is committed to the recovery log. During the "store"
  // phase, it writes to this S3 file. After the transaction commits, it tells
  // the store of the new file to incorporate. The store must handle
  // idempotency, by applying the effects of the unique file just once, even if
  // told of the file multiple times.
  //
  // A related extension of this pattern is for the driver to embed a Flow
  // checkpoint into its driver checkpoint. Doing so allows the driver to
  // express an intention to restart from an older alternative checkpoint, as
  // compared to the most recent committed checkpoint of the recovery log.
  //
  // As mentioned above, it's crucial that store states and checkpoints commit
  // together. While seemingly bending that rule, this pattern is consistent
  // with it because, on commit, the semantic contents of the store include BOTH
  // its base state, as well as the staged idempotent update. The store just may
  // not know it yet, but eventually it must because of the retried idempotent
  // apply.
  //
  // Note the driver must therefore ensure that staged updates are fully applied
  // before returning an "load" responses, in order to provide the correct
  // read-committed semantics required by the Flow runtime.
  //
  // RPC Lifecycle
  // =============
  //
  // The RPC follows the following lifecycle:
  //
  // :TransactionRequest.Open:
  //    - The Flow runtime opens the stream.
  // :TransactionResponse.Opened:
  //    - If the remote store is authoritative, it must fence off other RPCs
  //      of this task split from committing further transactions,
  //      and it retrieves a Flow checkpoint which is returned to the runtime.
  //
  // TransactionRequest.Open and TransactionResponse.Opened are sent only
  // once, at the commencement of the stream. Thereafter the protocol loops:
  //
  // Load phase
  // ==========
  //
  // The Load phases is Load requests *intermixed* with one
  // Acknowledge/Acknowledged message flow. The driver must accomodate an
  // Acknowledge that occurs before, during, or after a sequence of Load
  // requests. It's guaranteed to see exactly one Acknowledge request during
  // this phase.
  //
  // :TransactionRequest.Acknowledge:
  //    - The runtime tells the driver that a commit to the recovery log has
  //      completed.
  //    - The driver applies a staged update to the base store, where
  //      applicable.
  //    - Note Acknowledge is sent in the very first iteration for consistency.
  //      Semantically, it's an acknowledgement of the recovered checkpoint.
  //      If a previous invocation failed after recovery log commit but before
  //      applying the staged change, this is an opportunity to ensure that
  //      apply occurs.
  // :TransactionResponse.Acknowledged:
  //    - The driver responds to the runtime only after applying a staged
  //      update, where applicable.
  //    - If there is no staged update, the driver immediately responds on
  //      seeing Acknowledge.
  //
  // :TransactionRequest.Load:
  //    - The runtime sends zero or more Load messages.
  //    - The driver may send any number of TransactionResponse.Loaded in
  //      response.
  //    - If the driver will apply a staged update, it must await Acknowledge
  //      and have applied the update to the store *before* evaluating any
  //      Loads, to ensure correct read-committed behavior.
  //    - The driver may defer responding with some or all loads until the
  //      prepare phase.
  // :TransactionResponse.Loaded:
  //    - The driver sends zero or more Loaded messages, once for each loaded
  //      document.
  //    - Document keys not found in the store are omitted and not sent as
  //      Loaded.
  //
  // Prepare phase
  // =============
  //
  // The prepare phase begins only after the prior transaction has both
  // committed and also been acknowledged. It marks the bounds of the present
  // transaction.
  //
  // Upon entering this phase, the driver must immediately evaluate any deferred
  // Load requests and send remaining Loaded responses.
  //
  // :TransactionRequest.Prepare:
  //    - The runtime sends a Prepare message with its Flow checkpoint.
  // :TransactionResponse.Prepared:
  //    - The driver sends Prepared after having flushed all Loaded responses.
  //    - The driver may include a driver checkpoint update which will be
  //      committed to the recovery log with this transaction.
  //
  // Store phase
  // ===========
  //
  // The store phase is when the runtime sends the driver materialized document
  // updates, as well as an indication of whether the document is an insert,
  // update, or delete (in other words, was it returned in a Loaded response?).
  //
  // :TransactionRequest.Store:
  //    - The runtime sends zero or more Store messages.
  //
  // Commit phase
  // ============
  //
  // The commit phase marks the end of the store phase, and tells the driver of
  // the runtime's intent to commit to its recovery log. If the remote store is
  // authoritative, the driver must commit its transaction at this time.
  //
  // :TransactionRequest.Commit:
  //    - The runtime sends a Commit message, denoting its intention to commit.
  //    - If the remote store is authoritative, the driver includes the Flow
  //      checkpoint into its transaction and commits it along with view state
  //      updates.
  //    - Otherwise, the driver immediately responds with DriverCommitted.
  // :TransactionResponse.DriverCommitted:
  //    - The driver sends a DriverCommitted message.
  //    - The runtime commits Flow and driver checkpoint to its recovery
  //      log. The completion of this commit will be marked by an
  //      Acknowledge during the next load phase.
  //    - Runtime and driver begin a new, pipelined transaction by looping to
  //      load while this transaction continues to commit.
  //
  // An error of any kind rolls back the transaction in progress and terminates
  // the stream.
  rpc Transactions(stream TransactionRequest)
      returns (stream TransactionResponse);
}

// SpecRequest is the request type of the Spec RPC.
message SpecRequest {
  // Endpoint type addressed by this request.
  flow.EndpointType endpoint_type = 1;
  // Driver specification, as an encoded JSON object.
  // This may be a partial specification (for example, a Docker image),
  // providing only enough information to fetch the remainder of the
  // specification schema.
  string endpoint_spec_json = 2 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "endpointSpec"
  ];
}

// SpecResponse is the response type of the Spec RPC.
message SpecResponse {
  // JSON schema of an endpoint specification.
  string endpoint_spec_schema_json = 1 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "endpointSpecSchema"
  ];
  // JSON schema of a resource specification.
  string resource_spec_schema_json = 2 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "resourceSpecSchema"
  ];
  // URL for connector's documention.
  string documentation_url = 3;
}

// ValidateRequest is the request type of the Validate RPC.
message ValidateRequest {
  // Name of the materialization being validated.
  string materialization = 1
      [ (gogoproto.casttype) =
            "github.com/estuary/flow/go/protocols/flow.Materialization" ];
  // Endpoint type addressed by this request.
  flow.EndpointType endpoint_type = 2;
  // Driver specification, as an encoded JSON object.
  string endpoint_spec_json = 3 [
    (gogoproto.casttype) = "encoding/json.RawMessage",
    json_name = "endpointSpec"
  ];
  // Bindings of endpoint resources and collections from which they would be
  // materialized. Bindings are ordered and unique on the bound collection name.
  message Binding {
    // JSON-encoded object which specifies the endpoint resource to be
    // materialized.
    string resource_spec_json = 1 [
      (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "resourceSpec"
    ];
    // Collection to be materialized.
    flow.CollectionSpec collection = 2 [ (gogoproto.nullable) = false ];
    // Projection configuration, keyed by the projection field name,
    // with JSON-encoded and driver-defined configuration objects.
    map<string, string> field_config_json = 3 [
      (gogoproto.castvalue) = "encoding/json.RawMessage",
      json_name = "fieldConfig"
    ];
  }
  repeated Binding bindings = 4;
}

// ValidateResponse is the response type of the Validate RPC.
message ValidateResponse {
  // Validation responses for each binding of the request, and matching the
  // request ordering. Each Binding must have a unique resource_path.
  message Binding {
    // Constraints over collection projections imposed by the Driver,
    // keyed by the projection field name. Projections of the CollectionSpec
    // which are missing from constraints are implicitly forbidden.
    map<string, Constraint> constraints = 1;
    // Components of the resource path which fully qualify the resource
    // identified by this binding.
    // - For an RDBMS, this might be []{dbname, schema, table}.
    // - For Kafka, this might be []{topic}.
    // - For Redis, this might be []{key_prefix}.
    repeated string resource_path = 2;
    // Materialize combined delta updates of documents rather than full
    // reductions.
    //
    // When set, the Flow runtime will not attempt to load documents via
    // TransactionRequest.Load, and also disables re-use of cached documents
    // stored in prior transactions. Each stored document is exclusively
    // combined from updates processed by the runtime within the current
    // transaction only.
    //
    // This is appropriate for drivers over streams, WebHooks, and append-only
    // files.
    //
    // For example, given a collection which reduces a sum count for each key,
    // its materialization will produce a stream of delta updates to the count,
    // such that a reader of the stream will arrive at the correct total count.
    bool delta_updates = 3;
  }
  repeated Binding bindings = 1;
}

// ApplyRequest is the request type of the ApplyUpsert and ApplyDelete RPCs.
message ApplyRequest {
  // Materialization to be applied.
  flow.MaterializationSpec materialization = 1;
  // Version of the MaterializationSpec being applied.
  string version = 2;
  // Is this Apply a dry-run? If so, no action is undertaken and Apply will
  // report only what would have happened.
  bool dry_run = 3;
}

// ApplyResponse is the response type of the ApplyUpsert and ApplyDelete RPCs.
message ApplyResponse {
  // Human-readable description of the action that the Driver took (or, if
  // dry_run, would have taken). If empty, this Apply is to be considered a
  // "no-op".
  string action_description = 1;
}

// TransactionRequest is the request type of a Transaction RPC.
// It will have exactly one top-level field set, which represents its message
// type.
message TransactionRequest {
  // Open a transaction stream.
  //
  // If the Flow recovery log is authoritative:
  // The driver is given its last committed driver checkpoint in this request.
  // It MAY return a Flow checkpoint in its opened response -- perhaps an older
  // Flow checkpoint which was previously embedded within its driver checkpoint.
  //
  // If the remote store is authoritative:
  // The driver MUST fence off other streams of this materialization that
  // overlap the provided [key_begin, key_end) range, such that those streams
  // cannot issue further commits. The driver MUST return its stored checkpoint
  // for this materialization and range [key_begin, key_end] in its Opened
  // response.
  //
  message Open {
    // Materialization to be transacted.
    flow.MaterializationSpec materialization = 1;
    // Version of the opened MaterializationSpec.
    // The driver may want to require that this match the version last
    // provided to a successful Apply RPC. It's possible that it won't,
    // due to expected propagation races in Flow's distributed runtime.
    string version = 2;
    // [begin, end] inclusive range of keys processed by this transaction
    // stream. Ranges are with respect to a 32-bit hash of a packed document
    // key.
    fixed32 key_begin = 3;
    fixed32 key_end = 4;
    // Last-persisted driver checkpoint committed in the Flow runtime recovery
    // log. Or empty, if the driver has cleared or never set its checkpoint.
    bytes driver_checkpoint_json = 5 [
      (gogoproto.casttype) = "encoding/json.RawMessage",
      json_name = "driverCheckpoint"
    ];
  }
  Open open = 1;

  // Load one or more documents identified by key.
  // Keys may included documents which have never before been stored,
  // but a given key will be sent in a transaction Load just one time.
  message Load {
    // The materialization binding for documents of this Load request.
    uint32 binding = 1;
    // Byte arena of the request.
    bytes arena = 2
        [ (gogoproto.casttype) = "github.com/estuary/flow/go/protocols/flow.Arena" ];
    // Packed tuples of collection keys, enumerating the documents to load.
    repeated flow.Slice packed_keys = 3 [ (gogoproto.nullable) = false ];
  }
  Load load = 2;

  // Prepare to commit. No further Loads will be sent in this transaction.
  message Prepare {
    // Flow checkpoint to commit with this transaction.
    bytes flow_checkpoint = 1;
  }
  Prepare prepare = 3;

  // Store documents of this transaction commit.
  message Store {
    // The materialization binding for documents of this Store request.
    uint32 binding = 1;
    // Byte arena of the request.
    bytes arena = 2
        [ (gogoproto.casttype) = "github.com/estuary/flow/go/protocols/flow.Arena" ];
    // Packed tuples holding keys of each document.
    repeated flow.Slice packed_keys = 3 [ (gogoproto.nullable) = false ];
    // Packed tuples holding values for each document.
    repeated flow.Slice packed_values = 4 [ (gogoproto.nullable) = false ];
    // JSON documents.
    repeated flow.Slice docs_json = 5 [ (gogoproto.nullable) = false ];
    // Exists is true if this document as previously been loaded or stored.
    repeated bool exists = 6;
  }
  Store store = 4;

  // Mark the end of the Store phase, and if the remote store is authoritative,
  // instruct it to commit its transaction.
  message Commit {}
  Commit commit = 5;

  // Notify the driver that the previous transaction has committed to the Flow
  // runtime's recovery log.
  message Acknowledge {}
  Acknowledge acknowledge = 6;
}

// TransactionResponse is the response type of a Transaction RPC.
// It will have exactly one top-level field set, which represents its message
// type.
message TransactionResponse {
  // Opened responds to TransactionRequest.Open of the client.
  message Opened {
    // Flow checkpoint to begin processing from.
    // If empty, the most recent checkpoint of the Flow recovery log is used.
    //
    // Or, a driver may send the value []byte{0xf8, 0xff, 0xff, 0xff, 0xf, 0x1}
    // to explicitly begin processing from a zero-valued checkpoint, effectively
    // rebuilding the materialization from scratch. This sentinel is a trivial
    // encoding of the max-value 2^29-1 protobuf tag with boolean true.
    bytes flow_checkpoint = 1;
  }
  Opened opened = 1;

  // Loaded responds to TransactionRequest.Loads of the client.
  // It returns documents of requested keys which have previously been stored.
  // Keys not found in the store MUST be omitted. Documents may be in any order,
  // both within and across Loaded response messages, but a document of a given
  // key MUST be sent at most one time in a Transaction.
  message Loaded {
    // The materialization binding for documents of this Loaded response.
    uint32 binding = 1;
    // Byte arena of the request.
    bytes arena = 2
        [ (gogoproto.casttype) = "github.com/estuary/flow/go/protocols/flow.Arena" ];
    // Loaded JSON documents.
    repeated flow.Slice docs_json = 3 [ (gogoproto.nullable) = false ];
  }
  Loaded loaded = 2;

  // Prepared responds to a TransactionRequest.Prepare of the client.
  // No further Loaded responses will be sent.
  flow.DriverCheckpoint prepared = 3;

  // Mark the end of the Store phase, indicating that all documents have been
  // fully stored.
  //
  // If the remote store is authoritative, tell the Flow runtime that it has
  // committed.
  //
  // If the recovery log is authoritative, DriverCommitted is sent but no actual
  // transactional driver commit is performed.
  message DriverCommitted {}
  DriverCommitted driver_committed = 4;

  // Notify the Flow runtime of receipt of it's confirmation that the
  // Flow recovery log has committed.
  //
  // If the driver utilizes staged data which is idempotently applied,
  // it must apply staged data of the commit at this time, and respond
  // with Acknowledged only once that's completed.
  message Acknowledged {}
  Acknowledged acknowledged = 5;
}

// Extra messages used by connectors
message Extra {
  message ValidateExistingProjectionRequest {
      // Existing Materialization Binding
      flow.MaterializationSpec.Binding existing_binding = 1;

      // Proposed ValidateRequest Binding
      ValidateRequest.Binding proposed_binding = 2;
  }

  message ValidateBindingAgainstConstraints {
      // Materialization Binding
      flow.MaterializationSpec.Binding binding = 1;

      // Constraints map
      map<string, Constraint> constraints = 2;
  }
}