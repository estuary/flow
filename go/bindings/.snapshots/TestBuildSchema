(*catalog.BuiltCatalog)({
  Config: (flow.BuildAPI_Config) directory:"testdata" source:"file:///b.schema.yaml" source_type:JSON_SCHEMA catalog_path:"/stable/path" ,
  UUID: (uuid.UUID) (len=16) 6ba7b811-9dad-11d1-80b4-00c04fd430c8,
  Errors: ([]catalog.BuildError) <nil>,
  Captures: ([]flow.CaptureSpec) <nil>,
  Collections: ([]flow.CollectionSpec) <nil>,
  Derivations: ([]flow.DerivationSpec) <nil>,
  JournalRules: (flow.JournalRules) ,
  Locations: ([]catalog.SchemaLocation) (len=1) {
    (catalog.SchemaLocation) {
      Schema: (string) (len=21) "file:///b.schema.yaml",
      Location: (string) "",
      Spec: (flow.Inference) types:"string" must_exist:true string:<format:"email" > title:"A title" description:"An email description" 
    }
  },
  Materializations: ([]flow.MaterializationSpec) <nil>,
  NPMPackage: ([]uint8) <nil>,
  Schemas: (flow.SchemaBundle) bundle:<key:"file:///a.schema.yaml" value:"{\"$defs\":{\"foo\":{\"description\":\"An email description\",\"format\":\"email\",\"type\":\"string\"}}}" > bundle:<key:"file:///b.schema.yaml" value:"{\"$ref\":\"a.schema.yaml#/$defs/foo\",\"title\":\"A title\"}" > ,
  ShardRules: (flow.ShardRules) ,
  Tests: ([]flow.TestSpec) <nil>
})
