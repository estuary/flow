([]catalog.SchemaLocation) (len=34) {
  (catalog.SchemaLocation) {
    Schema: (string) (len=34) "builtin://flow/ops-log-schema.json",
    Location: (string) "",
    Spec: (flow.Inference) types:"object" title:"Flow task logs" description:"Logs related to the processing of a Flow capture, derivation, or materialization" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=34) "builtin://flow/ops-log-schema.json",
    Location: (string) (len=7) "/fields",
    Spec: (flow.Inference) types:"object" description:"Map of keys and values that are associated with this log entry." exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=34) "builtin://flow/ops-log-schema.json",
    Location: (string) (len=6) "/level",
    Spec: (flow.Inference) types:"string" string:<> exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=34) "builtin://flow/ops-log-schema.json",
    Location: (string) (len=8) "/message",
    Spec: (flow.Inference) types:"string" string:<> exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=34) "builtin://flow/ops-log-schema.json",
    Location: (string) (len=6) "/shard",
    Spec: (flow.Inference) types:"object" title:"Flow shard id" description:"Identifies a specific shard of a task, which may be the source of a log message or metrics" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=34) "builtin://flow/ops-log-schema.json",
    Location: (string) (len=15) "/shard/keyBegin",
    Spec: (flow.Inference) types:"string" string:<> description:"The inclusive beginning of the shard's assigned key range" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=34) "builtin://flow/ops-log-schema.json",
    Location: (string) (len=11) "/shard/kind",
    Spec: (flow.Inference) types:"string" string:<> description:"The type of the catalog task" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=34) "builtin://flow/ops-log-schema.json",
    Location: (string) (len=11) "/shard/name",
    Spec: (flow.Inference) types:"string" string:<> description:"The name of the catalog task (without the task type prefix)" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=34) "builtin://flow/ops-log-schema.json",
    Location: (string) (len=18) "/shard/rClockBegin",
    Spec: (flow.Inference) types:"string" string:<> description:"The inclusive beginning of the shard's assigned rClock range" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=34) "builtin://flow/ops-log-schema.json",
    Location: (string) (len=3) "/ts",
    Spec: (flow.Inference) types:"string" string:<format:"date-time" > description:"Timestamp corresponding to the start of the transaction" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) "",
    Spec: (flow.Inference) types:"object" title:"Flow task stats" description:"Statistics related to the processing of a Flow capture, derivation, or materialization" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=8) "/capture",
    Spec: (flow.Inference) types:"object" description:"Capture stats, organized by collection. The keys of this object are the collection names, and the values are the stats for that collection." exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=7) "/derive",
    Spec: (flow.Inference) types:"object" exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=11) "/derive/out",
    Spec: (flow.Inference) types:"object" exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=22) "/derive/out/bytesTotal",
    Spec: (flow.Inference) types:"integer" description:"Total number of bytes representing the JSON encoded documents" exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=21) "/derive/out/docsTotal",
    Spec: (flow.Inference) types:"integer" description:"Total number of documents" exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=17) "/derive/registers",
    Spec: (flow.Inference) types:"object" exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=30) "/derive/registers/createdTotal",
    Spec: (flow.Inference) types:"integer" description:"The total number of new register keys that were created" exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=18) "/derive/transforms",
    Spec: (flow.Inference) types:"object" description:"A map of each transform (transform name, not collection name) to stats for that transform" exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=12) "/materialize",
    Spec: (flow.Inference) types:"object" description:"A map of each binding source (collection name) to combiner stats for that binding" exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=17) "/openSecondsTotal",
    Spec: (flow.Inference) types:"number" description:"Total time that the transaction was open before starting to commit" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=6) "/shard",
    Spec: (flow.Inference) types:"object" title:"Flow shard id" description:"Identifies a specific shard of a task, which may be the source of a log message or metrics" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=15) "/shard/keyBegin",
    Spec: (flow.Inference) types:"string" string:<> description:"The inclusive beginning of the shard's assigned key range" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=11) "/shard/kind",
    Spec: (flow.Inference) types:"string" string:<> description:"The type of the catalog task" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=11) "/shard/name",
    Spec: (flow.Inference) types:"string" string:<> description:"The name of the catalog task (without the task type prefix)" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=18) "/shard/rClockBegin",
    Spec: (flow.Inference) types:"string" string:<> description:"The inclusive beginning of the shard's assigned rClock range" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=3) "/ts",
    Spec: (flow.Inference) types:"string" string:<format:"date-time" > description:"Timestamp corresponding to the start of the transaction" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=36) "builtin://flow/ops-stats-schema.json",
    Location: (string) (len=9) "/txnCount",
    Spec: (flow.Inference) types:"integer" description:"Total number of transactions represented by this stats document" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=61) "file:///build.flow.yaml?ptr=/collections/a~1collection/schema",
    Location: (string) "",
    Spec: (flow.Inference) types:"object" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=61) "file:///build.flow.yaml?ptr=/collections/a~1collection/schema",
    Location: (string) (len=6) "/a_key",
    Spec: (flow.Inference) types:"string" string:<> exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=61) "file:///build.flow.yaml?ptr=/collections/a~1collection/schema",
    Location: (string) (len=6) "/a_val",
    Spec: (flow.Inference) types:"integer" exists:MAY 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=81) "file:///build.flow.yaml?ptr=/collections/a~1derivation/derivation/register/schema",
    Location: (string) "",
    Spec: (flow.Inference) types:"array" types:"boolean" types:"null" types:"number" types:"object" types:"string" string:<> exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=61) "file:///build.flow.yaml?ptr=/collections/a~1derivation/schema",
    Location: (string) "",
    Spec: (flow.Inference) types:"object" exists:MUST 
  },
  (catalog.SchemaLocation) {
    Schema: (string) (len=61) "file:///build.flow.yaml?ptr=/collections/a~1derivation/schema",
    Location: (string) (len=6) "/a_key",
    Spec: (flow.Inference) types:"string" string:<> exists:MUST 
  }
}
