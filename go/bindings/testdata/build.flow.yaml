collections:
  a/collection:
    schema:
      type: object
      properties:
        a_key: { type: string }
        a_val: { type: integer }
      required: [a_key]
    key: [/a_key]

  a/derivation:
    schema:
      type: object
      properties:
        a_key: { type: string }
      required: [a_key]
    key: [/a_key]

    derive:
      using:
        typescript:
          module: |
            import { IDerivation, Document, SourceSwizzle } from 'flow/a/derivation.ts';

            export class Derivation extends IDerivation {
                swizzle(source: { doc: SourceSwizzle }): Document[] {
                  const doc = source.doc;
                  return [{a_key: doc.a_key.repeat(doc.a_val ? doc.a_val : 1)}];
                }
            }
      transforms:
        - name: swizzle
          source:
            name: a/collection

captures:
  example/capture:
    endpoint:
      connector:
        image: ghcr.io/estuary/source-test:dev
        config:
          greetings: 1000
    bindings:
      - resource:
          stream: greetings
          syncMode: incremental
        target: a/collection

materializations:
  example/materialization:
    endpoint:
      connector:
        image: ghcr.io/estuary/materialize-sqlite:dev
        config: {}
    bindings:
      - source: a/derivation
        resource: { table: a_table }

tests:
  example/test:
    - ingest:
        collection: a/collection
        documents:
          - { a_key: one, a_val: 2 }
          - { a_key: three, a_val: 4 }
    - verify:
        collection: a/derivation
        documents:
          - { a_key: one }
          - { a_key: three }

storageMappings:
  "": { stores: [{ provider: S3, bucket: a-bucket }] }
