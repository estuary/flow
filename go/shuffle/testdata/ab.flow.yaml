collections:
  a/collection:
    schema:
      type: object
      properties:
        a: { type: integer }
        aa: { type: string }
        b: { type: string }
      required: [a, aa]
    key: [/a, /aa]

  a/derivation:
    schema:
      type: object
      properties:
        a: { type: integer }
      required: [a]
    key: [/a]

    derive:
      using:
        typescript:
          module: |
            import { IDerivation, Document, SourceSwizzle } from 'flow/a/derivation.ts';

            export class Derivation extends IDerivation {
                swizzle(source: { doc: SourceSwizzle }): Document[] {
                  return [];
                }
            }
      transforms:
        # Note that our test depends on this transform being validated as `readOnly`.
        # TODO(johnny): Switch this to a SQL SELECT that's actually read-only,
        # rather than the current manual twiddling.
        - name: swizzle
          source:
            name: a/collection

storageMappings:
  "": { stores: [{ provider: S3, bucket: a-bucket }] }
