"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4915],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(96540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},79591:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guides/flatten-array","title":"How to flatten an array using TypeScript","description":"This guide will show you how to flatten an array field in a collection by creating a TypeScript derivation in Estuary Flow.","source":"@site/docs/guides/flatten-array.md","sourceDirName":"guides","slug":"/guides/flatten-array","permalink":"/guides/flatten-array","draft":false,"unlisted":false,"editUrl":"https://github.com/estuary/flow/edit/master/site/docs/guides/flatten-array.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"How to transform data using SQL","permalink":"/guides/derivation_tutorial_sql"},"next":{"title":"Getting Started With flowctl","permalink":"/guides/get-started-with-flowctl"}}');var o=t(74848),r=t(28453);const a={},s="How to flatten an array using TypeScript",l={},c=[{value:"Step 1: Set up your GitPod environment",id:"step-1-set-up-your-gitpod-environment",level:2},{value:"Step 2: Set up your schema",id:"step-2-set-up-your-schema",level:2},{value:"Step 3: Write your TypeScript derivation",id:"step-3-write-your-typescript-derivation",level:2},{value:"Step 4: Preview your derivation",id:"step-4-preview-your-derivation",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"how-to-flatten-an-array-using-typescript",children:"How to flatten an array using TypeScript"})}),"\n",(0,o.jsx)(n.p,{children:"This guide will show you how to flatten an array field in a collection by creating a TypeScript derivation in Estuary Flow."}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["We'll be using GitPod and TypeScript for our derivation in this guide. Check out our other guides if you're interested in ",(0,o.jsxs)(n.a,{href:"/guides/flowctl/create-derivation",children:["creating derivations locally with ",(0,o.jsx)(n.code,{children:"flowctl"})]})," or ",(0,o.jsx)(n.a,{href:"/guides/derivation_tutorial_sql",children:"using SQL for transformations"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["The collection we'll be working with (",(0,o.jsx)(n.code,{children:"user_content"}),") contains a field called ",(0,o.jsx)(n.code,{children:"tags"}),", which is an array of objects. Each object in the array has a name and a value. We'll be flattening this array into a new collection, with two separate fields: ",(0,o.jsx)(n.code,{children:"tag_name"})," and ",(0,o.jsx)(n.code,{children:"tag_value"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The original data looks like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "id": "1",\n  "name": "example",\n  "tags": [\n    {\n      "name": "tag1",\n      "value": "value1"\n    },\n    {\n      "name": "tag2",\n      "value": "value2"\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"The resulting data will have the following structure:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "tag_name": "tag1",\n  "tag_value": "value1"\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-1-set-up-your-gitpod-environment",children:"Step 1: Set up your GitPod environment"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["In the Estuary Flow dashboard, click on the ",(0,o.jsx)(n.strong,{children:"Collections"})," tab."]}),"\n",(0,o.jsx)(n.li,{children:"Select the checkbox next to the collection you want to work with."}),"\n",(0,o.jsxs)(n.li,{children:["Click on the ",(0,o.jsx)(n.strong,{children:"Transform"})," button at the top of the table."]}),"\n",(0,o.jsxs)(n.li,{children:["Select ",(0,o.jsx)(n.strong,{children:"TypeScript"})," as the language, and give your new derived collection a name."]}),"\n",(0,o.jsxs)(n.li,{children:["Click ",(0,o.jsx)(n.strong,{children:"Proceed to GitPod"})," to open the GitPod environment."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The GitPod environment will generate a file structure and stub files to get you started. This may take a few moments."}),"\n",(0,o.jsx)(n.h2,{id:"step-2-set-up-your-schema",children:"Step 2: Set up your schema"}),"\n",(0,o.jsxs)(n.p,{children:["In a folder called ",(0,o.jsx)(n.code,{children:"<your_tenant>"}),", you'll find a file called ",(0,o.jsx)(n.code,{children:"flow.yaml"}),". This file contains the schema for your derived collection. You'll need to modify this file to match the structure of the data you're working with."]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Open the ",(0,o.jsx)(n.code,{children:"flow.yaml"})," file in the GitPod environment."]}),"\n",(0,o.jsx)(n.p,{children:"Your schema should look something like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"---\ncollections:\n  <your_tenant>/<derivation_name>:\n    schema:\n      type: object\n      properties:\n        your_key:\n          type: string\n      required:\n        - your_key\n    key:\n      - /your_key\n    derive:\n      using:\n        typescript:\n          module: <derivation_name>.ts\n      transforms:\n        - name: user_content\n          source: <your_tenant>/<capture_name>/public/<collection_name>\n          shuffle: any\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["We need to modify the schema to match what we want our derived collection to look like. We'll be using the ",(0,o.jsx)(n.code,{children:"tags"})," field from the original data, so we'll need to add a new property for each field we want to include in the derived collection. We'll also need to set a key for the derived collection."]}),"\n",(0,o.jsxs)(n.p,{children:["These updates to the ",(0,o.jsx)(n.code,{children:"flow.yaml"})," file will look something like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"---\ncollections:\n  <your_tenant>/<derivation_name>:\n    schema:\n      type: object\n      properties:\n        tag_name:\n          type: string\n        tag_value:\n          type: string\n      required:\n        - tag_name\n        - tag_value\n    key:\n      - /tag_name\n    derive:\n      using:\n        typescript:\n          module: <derivation_name>.ts\n      transforms:\n        - name: user_content\n          source: <your_tenant>/<capture_name>/public/<collection_name>\n          shuffle: any\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Save the ",(0,o.jsx)(n.code,{children:"flow.yaml"})," file."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-3-write-your-typescript-derivation",children:"Step 3: Write your TypeScript derivation"}),"\n",(0,o.jsxs)(n.p,{children:["In the GitPod environment, you'll find a file called ",(0,o.jsx)(n.code,{children:"<derivation_name>.ts"})," in the same folder as the ",(0,o.jsx)(n.code,{children:"flow.yaml"})," file you just edited. This is where you'll write your TypeScript code to flatten the array."]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Open the ",(0,o.jsx)(n.code,{children:"<derivation_name>.ts"})," file in the GitPod environment."]}),"\n",(0,o.jsx)(n.p,{children:"You'll see a basic structure for your TypeScript code. It should look something like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import {\n  IDerivation,\n  Document,\n  SourceUserContent,\n} from "flow/sean-estuary/test-derivation.ts";\n\nexport class Derivation extends IDerivation {\n  userContent(_read: { doc: SourceUserContent }): Document[] {\n    throw new Error("Not implemented");\n  }\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Now, let's modify the ",(0,o.jsx)(n.code,{children:"userContent"})," function to flatten the array. We'll loop through each document in the ",(0,o.jsx)(n.code,{children:"SourceUserContent"}),", and for each document, we'll loop through the ",(0,o.jsx)(n.code,{children:"tags"})," array. For each tag, we'll create a new document with the ",(0,o.jsx)(n.code,{children:"tag_name"})," and ",(0,o.jsx)(n.code,{children:"tag_value"})," fields."]}),"\n",(0,o.jsxs)(n.p,{children:["Update the ",(0,o.jsx)(n.code,{children:"userContent"})," function to look like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import {\n  IDerivation,\n  Document,\n  SourceUserContent,\n} from "flow/sean-estuary/test-derivation.ts";\n\nexport class Derivation extends IDerivation {\n  userContent(_read: { doc: SourceUserContent }): Document[] {\n    const doc = _read.doc;\n    const output: Document[] = [];\n\n    if (doc.tags) {\n      const tagsJson = JSON.parse(doc.tags); // Since our tags are arriving as a string from Google Sheets\n      for (const tag of tagsJson) {\n        output.push({\n          tag_name: tag.name,\n          tag_value: tag.value,\n        });\n      }\n    }\n    return output;\n  }\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Save the ",(0,o.jsx)(n.code,{children:"<derivation_name>.ts"})," file."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-4-preview-your-derivation",children:"Step 4: Preview your derivation"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"In the GitPod environment, open a terminal."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Run the following command to test your derivation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"flowctl preview --source flow.yaml\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"This will show you a preview of the derived collection, including the flattened fields. Make sure everything looks good."}),"\n",(0,o.jsx)(n.p,{children:"For example, an original row like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "_meta": {\n    ...\n  },\n  "id": "1",\n  "name": "test1",\n  "tags": "[{"name":"PFJUjs6Wec","value":"HB668r7MfN"},{"name":"aIWpjtpNnj","value":"elQ9948Wpf"}]"\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Should appear in your preview as two individual records:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "_meta": {\n    ...\n  },\n  "tag_name": "PFJUjs6Wec",\n  "tag_value": "HB668r7MfN"\n}\n{\n  "_meta": {\n    ...\n  },\n  "tag_name": "aIWpjtpNnj",\n  "tag_value": "elQ9948Wpf"\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Once you've confirmed your results, you can proceed to publish your derivation to Estuary Flow:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"flowctl catalog publish --source flow.yaml\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Congratulations! You've successfully flattened an array in TypeScript using Estuary Flow. You can now use this technique to flatten other arrays in your data as well."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);