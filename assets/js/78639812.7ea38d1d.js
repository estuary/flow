"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8181],{20828:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"guides/flowctl/ci-cd","title":"flowctl in Automated and Programmatic Contexts","description":"While Estuary\'s UI is a convenient way to create and manage resources, some users may prefer to treat their captures, materializations, and other resources as infrastructure-as-code.","source":"@site/docs/guides/flowctl/ci-cd.md","sourceDirName":"guides/flowctl","slug":"/guides/flowctl/ci-cd","permalink":"/guides/flowctl/ci-cd","draft":false,"unlisted":false,"editUrl":"https://github.com/estuary/flow/edit/master/site/docs/guides/flowctl/ci-cd.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Troubleshoot a task with flowctl","permalink":"/guides/flowctl/troubleshoot-task"},"next":{"title":"Customizing Data Flows","permalink":"/guides/customize-dataflows/"}}');var s=t(74848),r=t(28453),a=t(65537),o=t(79329);const l={},c="flowctl in Automated and Programmatic Contexts",d={},u=[{value:"Creating Estuary Resources Locally",id:"creating-estuary-resources-locally",level:2},{value:"Capture Configuration",id:"capture-configuration",level:3},{value:"Collection Configuration",id:"collection-configuration",level:3},{value:"Derivation Configuration",id:"derivation-configuration",level:3},{value:"Materialization Configuration",id:"materialization-configuration",level:3},{value:"Testing Specifications",id:"testing-specifications",level:2},{value:"Publishing Resources",id:"publishing-resources",level:2},{value:"Choosing a Data Plane",id:"choosing-a-data-plane",level:3},{value:"Editing Existing Resources Locally",id:"editing-existing-resources-locally",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"flowctl-in-automated-and-programmatic-contexts",children:[(0,s.jsx)(n.code,{children:"flowctl"})," in Automated and Programmatic Contexts"]})}),"\n",(0,s.jsx)(n.p,{children:"While Estuary's UI is a convenient way to create and manage resources, some users may prefer to treat their captures, materializations, and other resources as infrastructure-as-code.\nThis allows resource specifications to be checked into your own version control system with a clearly logged history of changes.\nYou can then set your infra-as-code repositories up with a CI/CD pipeline to automate deployment."}),"\n",(0,s.jsx)(n.p,{children:"This guide will show you how to configure Estuary Flow resources programmatically for use in CI/CD workflows or other automation."}),"\n",(0,s.jsxs)(n.p,{children:["For instructions on using the UI instead, see information on Estuary's ",(0,s.jsx)(n.a,{href:"/concepts/web-app",children:"web application"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"creating-estuary-resources-locally",children:"Creating Estuary Resources Locally"}),"\n",(0,s.jsx)(n.p,{children:"During development, you can locally create, manage, and test your resources before committing your changes."}),"\n",(0,s.jsx)(n.p,{children:"Before creating these resources, you will need:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["An ",(0,s.jsx)(n.a,{href:"https://dashboard.estuary.dev/register",children:"Estuary account"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"flowctl"})," ",(0,s.jsx)(n.a,{href:"/guides/get-started-with-flowctl",children:"installed"})," on your machine"]}),"\n",(0,s.jsxs)(n.li,{children:["An Estuary ",(0,s.jsx)(n.a,{href:"/guides/how_to_generate_refresh_token",children:"access token"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can authenticate your ",(0,s.jsx)(n.code,{children:"flowctl"})," session in one of two ways:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Set the ",(0,s.jsx)(n.code,{children:"FLOW_AUTH_TOKEN"})," environment variable to your Estuary access token. This is the recommended way to handle a CI or automation setup."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Or run the ",(0,s.jsx)(n.code,{children:"flowctl auth login"})," command and paste in your token. This is handy for local development."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You will then be able to connect with Estuary to set up your resources."}),"\n",(0,s.jsxs)(n.p,{children:["Programmatically, all Estuary resources start with a ",(0,s.jsx)(n.code,{children:"flow.yaml"})," configuration file. You can create and test this file locally, and can upload it to Estuary when ready to create your resources."]}),"\n",(0,s.jsxs)(n.p,{children:["You can specify all of your resources (captures, collections, and materializations) in one ",(0,s.jsx)(n.code,{children:"flow.yaml"})," file or separate them out based on resource type, schema definition, or desired data plane."]}),"\n",(0,s.jsx)(n.p,{children:"The sections below provide example configurations."}),"\n",(0,s.jsx)(n.h3,{id:"capture-configuration",children:"Capture Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["To create a ",(0,s.jsx)(n.a,{href:"/concepts/captures",children:"capture"}),", start with a local ",(0,s.jsx)(n.code,{children:"flow.yaml"})," file.\nYou will need to use the capture connector's ",(0,s.jsx)(n.a,{href:"/reference/Connectors/capture-connectors/",children:"reference"})," for details on the available settings, authorization methods, and required fields for the configuration.\nThe connector's reference page will include an example specification you can use to get started."]}),"\n",(0,s.jsx)(n.p,{children:"At a minimum, the configuration will need to specify:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The capture name"}),"\n",(0,s.jsx)(n.li,{children:"The connector image for the capture"}),"\n",(0,s.jsx)(n.li,{children:"Any credentials needed for source system authentication"}),"\n",(0,s.jsx)(n.li,{children:"The resource streams from the source system you wish to use"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Consider these example specifications:"}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(o.A,{value:"Stripe (API) Capture",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"captures:\n  Artificial-Industries/ci-cd/source-stripe-native:\n    endpoint:\n      connector:\n        image: ghcr.io/estuary/source-stripe-native:dev\n        config:\n          credentials:\n            credentials_title: Private App Credentials\n            access_token: <Access Token>\n    bindings:\n      - resource:\n          stream: charges\n          syncMode: incremental\n        target: Artificial-Industries/ci-cd/stripe_charges\n      - resource:\n          stream: plans\n          syncMode: full_refresh\n        target: Artificial-Industries/ci-cd/stripe_plans\n"})})}),(0,s.jsx)(o.A,{value:"PostgreSQL (Database) Capture",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"captures:\n  Artificial-Industries/ci-cd/source-postgres:\n    endpoint:\n      connector:\n        image: ghcr.io/estuary/source-postgres:dev\n        config:\n          address: <host>:<port>\n          database: postgres\n          user: flow_capture\n          password: <password>\n    bindings:\n      - resource:\n          stream: shipments\n          namespace: public\n          syncMode: incremental\n        target: Artificial-Industries/ci-cd/postgres_shipments\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Note that you will not be able to successfully publish a capture by itself. You will also need to define the collections that relate to the capture's bindings."}),"\n",(0,s.jsx)(n.h3,{id:"collection-configuration",children:"Collection Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["When you create a capture configuration, you will also need to create associated ",(0,s.jsx)(n.a,{href:"/concepts/collections",children:"collection"})," configurations. Your resource streams will flow into these collections as a staging area before final materialization."]}),"\n",(0,s.jsxs)(n.p,{children:["Collections provide an opportunity to enforce schemas and transform data with ",(0,s.jsx)(n.a,{href:"#derivation-configuration",children:"derivations"}),".\nWhen using the UI, Estuary will intelligently infer these schemas for you. When you're creating your own specifications from scratch, however, you will need to be very aware of your source system's schema in order to replicate it accurately."]}),"\n",(0,s.jsxs)(n.p,{children:["Create a collection specification for each ",(0,s.jsx)(n.strong,{children:"target"})," you identified in your capture bindings. The collection specification should, at a minimum, include:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The schema, with its properties and their types"}),"\n",(0,s.jsx)(n.li,{children:"Any required fields in the schema, including the key field"}),"\n",(0,s.jsxs)(n.li,{children:["The key field used to identify and order documents","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Since the key can be a composite, JSON pointers are used to identify relevant fields, so field names should begin with ",(0,s.jsx)(n.code,{children:"/"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Consider these example specifications:"}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(o.A,{value:"Stripe (API) Collections",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"collections:\n  Artificial-Industries/ci-cd/stripe_charges:\n    schema:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n        created:\n          type: string\n        amount:\n          type: integer\n        {...}\n    key:\n      - /id\n  Artificial-Industries/ci-cd/stripe_plans:\n    schema:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n        active:\n          type: boolean\n        interval:\n          type: string\n        {...}\n    key:\n      - /id\n"})})}),(0,s.jsx)(o.A,{value:"PostgreSQL (Database) Collections",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"collections:\n  Artificial-Industries/ci-cd/postgres_shipments:\n    schema:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        is_priority:\n          type: boolean\n        {...}\n    key:\n      - /id\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"derivation-configuration",children:"Derivation Configuration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/concepts/derivations",children:"Derivations"})," are often more complex than other Estuary resources.\nBesides a ",(0,s.jsx)(n.code,{children:"flow.yaml"})," configuration file, you may also need a TypeScript or SQL script to define the transformation. Not all pipelines will require derivation resources."]}),"\n",(0,s.jsxs)(n.p,{children:["A derivation is a type of collection--one that is derived from one or more existing collections. To create a specification for a derivation, you will therefore need to ",(0,s.jsx)(n.a,{href:"#collection-configuration",children:"define the key, schema properties, and required fields"})," as for any collection."]}),"\n",(0,s.jsx)(n.p,{children:"In addition, you will need to specify how to derive this schema:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Provide a pointer to the TypeScript or SQL file that handles the transformation","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Or you may opt to define a lambda function within ",(0,s.jsx)(n.code,{children:"flow.yaml"})," for simple transformations"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"List the existing collections that provide source data for the derivation"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A full example specification may therefore look like:"}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(o.A,{value:"Join Collections",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"collections:\n  Artificial-Industries/customers-with-orders:\n    schema:\n      type: object\n      properties:\n        customer_id:\n          type: string\n        name:\n          type: string\n        orders:\n          type: array\n          items:\n            type: object\n            properties:\n              order_id:\n                type: string\n          reduce:\n            strategy: merge\n            key:\n              - /order_id\n      required:\n        - customer_id\n      reduce:\n        strategy: merge\n    key:\n      - /customer_id\n\n    derive:\n      using:\n        typescript:\n          module: full-outer-join.flow.ts\n      transforms:\n        - name: fromOrders\n          source:\n            name: Artificial-Industries/join-collections/orders\n          shuffle:\n            key:\n              - /customer_id\n        - name: fromCustomers\n          source:\n            name: Artificial-Industries/join-collections/customers\n          shuffle:\n            key:\n              - /customer_id\n"})})}),(0,s.jsx)(o.A,{value:"In-Line Derivation Function",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"collections:\n  Artificial-Industries/line-item-totals:\n    schema:\n      type: object\n      properties:\n        id:\n          type: string\n        order_number:\n          type: string\n        item:\n          type: string\n        total:\n          type: string\n      required:\n        - id\n    key:\n      - /id\n  derive:\n    using:\n      sqlite: {}\n    transforms:\n      - name: fromLineItems\n        source: Artificial-Industries/line-items\n        shuffle: any\n        lambda:\n          SELECT $id,\n          $order_number,\n          $item,\n          PRINTF('$%.2f', $price + $sales_tax) AS total;\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["If you specify a separate module for a transformation in your ",(0,s.jsx)(n.code,{children:"flow.yaml"}),", you can generate stub files to help get started with your derivation.\nWhen you're finished with the specification, run the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"flowctl generate --source path/to/your/flow.yaml\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This ",(0,s.jsx)(n.code,{children:"flowctl"})," command requires Docker. Successfully running it will generate relevant stub files, which you can modify to return your expected schema."]}),"\n",(0,s.jsxs)(n.p,{children:["For more on configuring transformations, see other ",(0,s.jsx)(n.a,{href:"/guides/#derivations",children:"derivation guides"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"materialization-configuration",children:"Materialization Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Creating a new ",(0,s.jsx)(n.a,{href:"/concepts/materialization",children:"materialization"})," resource is similar to creating a capture.\nIn a local ",(0,s.jsx)(n.code,{children:"flow.yaml"})," file, you can fill out a specification according to the materialization connector's ",(0,s.jsx)(n.a,{href:"/reference/Connectors/materialization-connectors/",children:"reference guide"}),".\nThe reference will indicate which fields are required and how you can authenticate. It will also provide an example specification you can use to get started."]}),"\n",(0,s.jsx)(n.p,{children:"The configuration, at a minimum, will need to specify:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The materialization name"}),"\n",(0,s.jsx)(n.li,{children:"The connector image for the materialization"}),"\n",(0,s.jsx)(n.li,{children:"Any credentials needed for destination system authentication"}),"\n",(0,s.jsx)(n.li,{children:"The data collections to use as sources and which tables they should map to"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Consider this example specification:"}),"\n",(0,s.jsx)(a.A,{children:(0,s.jsx)(o.A,{value:"Snowflake (Warehouse) Materialization",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"materializations:\n  Artificial-Industries/ci-cd/materialize-snowflake:\n    endpoint:\n  \t  connector:\n        image: ghcr.io/estuary/materialize-snowflake:dev\n    \tconfig:\n          host: orgname-accountname.snowflakecomputing.com\n          database: estuary_db\n          schema: estuary_schema\n          credentials:\n            auth_type: jwt\n            user: estuary_user\n            privateKey: |\n              -----BEGIN PRIVATE KEY-----\n              MIIEv....\n              ...\n              ...\n              -----END PRIVATE KEY-----\n    bindings:\n  \t  - resource:\n      \t  table: shipments\n        source: Artificial-Industries/ci-cd/postgres_shipments\n"})})})}),"\n",(0,s.jsx)(n.h2,{id:"testing-specifications",children:"Testing Specifications"}),"\n",(0,s.jsxs)(n.p,{children:["You can add ",(0,s.jsx)(n.a,{href:"/concepts/tests",children:"tests"})," to your specifications to ensure baseline expected behavior. Tests are defined as any other resource. You can specify ",(0,s.jsx)(n.code,{children:"ingest"})," and ",(0,s.jsx)(n.code,{children:"verify"})," steps to provide and evaluate test documents."]}),"\n",(0,s.jsx)(n.p,{children:"While Estuary performs basic tests by default, it's best practice to define your own tests when working in a programmatic context.\nThat way, you can incorporate testing into your CI/CD workflow to ensure you only publish changes that conform with your requirements for your data."}),"\n",(0,s.jsx)(n.p,{children:"Consider this example specification:"}),"\n",(0,s.jsx)(a.A,{children:(0,s.jsx)(o.A,{value:"Test Derivation Output",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'tests:\n  Artificial-Industries/tests/example:\n    - ingest:\n        collection: Artificial-Industries/line-items\n        documents:\n          - { id: "1", item: "popcorn", price: 499, sales_tax: 25 }\n          - { id: "2", item: "hot dog", price: 650, sales_tax: 32 }\n    - verify:\n        collection: Artificial-Industries/line-item-totals\n        documents:\n          - { id: "1", item: "popcorn", total: "$5.24" }\n          - { id: "2", item: "hot dog", total: "$6.82" }\n'})})})}),"\n",(0,s.jsx)(n.p,{children:"Run tests using:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"flowctl catalog test --source <SOURCE>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Your output will be similar to the following:"}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(o.A,{value:"Successful Test",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"test:1> Running  1  tests...\ntest:1> \u2714\ufe0f flow://test/Artificial-Industries/tests/example :: Artificial-Industries/tests/example\ntest:1>\ntest:1> Ran 1 tests, 1 passed, 0 failed\nTests successful\n"})})}),(0,s.jsx)(o.A,{value:"Failed Test",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"test:1> Running  1  tests...\ntest:1> \u274c flow://test/Artificial-Industries/tests/example failure at step /1/verify :\ntest:1> verify: actual and expected document(s) did not match:\ntest:1> mismatched document at index 0:\n{...}\ntest:1> Ran 1 tests, 0 passed, 1 failed\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"publishing-resources",children:"Publishing Resources"}),"\n",(0,s.jsx)(n.p,{children:"Once you're happy with your resources and any tests have passed, your automation can publish your changes to Estuary."}),"\n",(0,s.jsxs)(n.p,{children:["Your automation will need to be authenticated to use ",(0,s.jsx)(n.code,{children:"flowctl"})," for your resources on your behalf. You can do so by setting the ",(0,s.jsx)(n.code,{children:"FLOW_AUTH_TOKEN"})," environment variable:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"export FLOW_AUTH_TOKEN=your_refresh_token\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The session will then be authenticated to use the ",(0,s.jsx)(n.code,{children:"catalog publish"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"flowctl catalog publish --source <SOURCE>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The command's default behavior is to summarize the resource configurations to publish and prompt for confirmation. You can skip this prompt with the ",(0,s.jsx)(n.code,{children:"--auto-approve"})," option."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"catalog publish"})," command will ",(0,s.jsx)(n.a,{href:"/concepts/flowctl#using-flowctls-auto-encryption",children:"automatically encrypt any secrets"})," in your endpoint configurations."]}),"\n",(0,s.jsx)(n.h3,{id:"choosing-a-data-plane",children:"Choosing a Data Plane"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"flowctl"})," commands, including ",(0,s.jsx)(n.code,{children:"catalog publish"}),", automatically select a data plane based on your configured ",(0,s.jsx)(n.a,{href:"/getting-started/installation",children:"storage mappings"}),".\nThe command will default to using the first listed data plane for your primary storage bucket.\nThis may be, for example, the ",(0,s.jsx)(n.code,{children:"ops/dp/public/gcp-us-central1-c2"})," or ",(0,s.jsx)(n.code,{children:"ops/dp/public/aws-us-east1-c1"})," data plane."]}),"\n",(0,s.jsxs)(n.p,{children:["You can also specify a different public data plane or your own ",(0,s.jsx)(n.a,{href:"/private-byoc/",children:"private or BYOC"})," data plane.\nWhichever data plane you choose must be supported by the primary storage mapping for your prefix."]}),"\n",(0,s.jsx)(n.p,{children:"You can check your available data planes from the dashboard:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Log into the Estuary dashboard and navigate to the ",(0,s.jsx)(n.a,{href:"https://dashboard.estuary.dev/admin/",children:"Admin"})," page."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Under the ",(0,s.jsx)(n.strong,{children:"Settings"})," tab, scroll to the ",(0,s.jsx)(n.strong,{children:"Cloud Storage"})," section."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For your ",(0,s.jsx)(n.strong,{children:"Catalog Prefix"}),", find the storage row listed as ",(0,s.jsx)(n.strong,{children:"Primary"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"This row provides all available data planes for that storage mapping."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can copy the full name of your desired data plane from this listing or retrieve it from the ",(0,s.jsx)(n.strong,{children:"Data Planes"})," section:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["On the same ",(0,s.jsx)(n.strong,{children:"Settings"})," page in the dashboard, scroll to the ",(0,s.jsx)(n.strong,{children:"Data Planes"})," section."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Choose between the ",(0,s.jsx)(n.strong,{children:"Public"})," or ",(0,s.jsx)(n.strong,{children:"Private"})," data plane tabs."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Next to your desired data plane, click the ",(0,s.jsx)(n.strong,{children:"Copy"})," button. The full name of the data plane will be copied to your clipboard."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"When publishing resources to a data plane besides the default, make sure to specify this data plane name in an option:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"flowctl catalog publish --init-data-plane ops/dp/public/aws-eu-west-1-c2 --source ./flow.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:"All resources that interact with each other (such as derivations or materializations along with their relevant sources) must be part of the same data plane.\nIf you wish to publish resources to different data planes, you will need to save the specifications in different files and run separate commands for each."}),"\n",(0,s.jsx)(n.h2,{id:"editing-existing-resources-locally",children:"Editing Existing Resources Locally"}),"\n",(0,s.jsxs)(n.p,{children:["If you are starting from a published resource, you can pull the latest version from Estuary to your local directory with the ",(0,s.jsx)(n.code,{children:"flowctl catalog pull-specs"})," command."]}),"\n",(0,s.jsxs)(n.p,{children:["You can add options to the ",(0,s.jsx)(n.code,{children:"pull-specs"})," command to target certain resources or customize your experience:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--captures"}),", ",(0,s.jsx)(n.code,{children:"--collections"}),", ",(0,s.jsx)(n.code,{children:"--materializations"}),": Only pull specifications from a specific type of resource"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--name <NAME>"}),": Pull the specification for a single, named resource"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--target <TARGET>"}),": Local root specification to write to (defaults to ",(0,s.jsx)(n.code,{children:"flow.yaml"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--overwrite"}),": Determine whether existing specs are overwritten by copies from the Flow control plane; useful if existing local copies have gotten out of date"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--flat"}),": Determine whether specs are written to a single specification file or follow a canonical layout"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"When you begin local development to update a resource specification, you may want to pull a fresh copy of the spec directly from Estuary, even if you check changes into your own infra-as-code repo. This will ensure any changes made via the UI or as part of an extended support session get captured."})}),"\n",(0,s.jsxs)(n.p,{children:["See more on how to ",(0,s.jsx)(n.a,{href:"/guides/flowctl/edit-specification-locally",children:"edit your specifications locally"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},65537:(e,n,t)=>{t.d(n,{A:()=>v});var i=t(96540),s=t(34164),r=t(65627),a=t(56347),o=t(50372),l=t(30604),c=t(11861),d=t(78749);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:s}}=e;return{value:n,label:t,attributes:i,default:s}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const s=(0,a.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=h(e),[a,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[c,u]=f({queryString:t,groupId:s}),[m,y]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,r]=(0,d.Dv)(t);return[s,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:s}),g=(()=>{const e=c??m;return p({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{g&&l(g)}),[g]);return{selectedValue:a,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),y(e)}),[u,y,r]),tabValues:r}}var y=t(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function j(e){let{className:n,block:t,selectedValue:i,selectValue:a,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),s=o[t].value;s!==i&&(c(n),a(s))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...r,className:(0,s.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:r}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function b(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,x.jsx)(j,{...n,...e}),(0,x.jsx)(w,{...n,...e})]})}function v(e){const n=(0,y.A)();return(0,x.jsx)(b,{...e,children:u(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var i=t(34164);const s={tabItem:"tabItem_Ymn6"};var r=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.A)(s.tabItem,a),hidden:t,children:n})}}}]);