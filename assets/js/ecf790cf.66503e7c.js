"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1346],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}},66286:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"guides/derivation_tutorial_sql","title":"How to transform data using SQL","description":"This guide will teach you how to write and publish a simple SQL derivation that you can use to transform data from one collection to another.","source":"@site/docs/guides/derivation_tutorial_sql.md","sourceDirName":"guides","slug":"/guides/derivation_tutorial_sql","permalink":"/guides/derivation_tutorial_sql","draft":false,"unlisted":false,"editUrl":"https://github.com/estuary/flow/edit/master/site/docs/guides/derivation_tutorial_sql.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Connecting to Estuary Flow from Kafka using Dekaf","permalink":"/guides/dekaf_reading_collections_from_kafka"},"next":{"title":"How to flatten an array using TypeScript","permalink":"/guides/flatten-array"}}');var s=t(74848),o=t(28453);const a={},r="How to transform data using SQL",d={},l=[{value:"Introduction<a></a>",id:"introduction",level:2},{value:"Setting up your development environment<a></a>",id:"setting-up-your-development-environment",level:2},{value:"Writing the derivation<a></a>",id:"writing-the-derivation",level:2},{value:"Verify<a></a>",id:"verify",level:2},{value:"Wrapping up<a></a>",id:"wrapping-up",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"how-to-transform-data-using-sql",children:"How to transform data using SQL"})}),"\n",(0,s.jsx)(n.p,{children:"This guide will teach you how to write and publish a simple SQL derivation that you can use to transform data from one collection to another."}),"\n",(0,s.jsxs)(n.h2,{id:"introduction",children:["Introduction",(0,s.jsx)("a",{id:"introduction"})]}),"\n",(0,s.jsx)(n.p,{children:"This tutorial will show you how to implement a stateless transformation using SQL. You\u2019ll learn how to implement a flow that transforms events coming from the live, real-time Wikipedia API."}),"\n",(0,s.jsxs)(n.h2,{id:"setting-up-your-development-environment",children:["Setting up your development environment",(0,s.jsx)("a",{id:"setting-up-your-development-environment"})]}),"\n",(0,s.jsxs)(n.p,{children:["In order to implement transformations through ",(0,s.jsx)(n.a,{href:"https://docs.estuary.dev/concepts/#derivations",children:"derivations"}),", you\u2019ll need to set up your development environment. You\u2019ll need a text editor and ",(0,s.jsx)(n.a,{href:"https://docs.estuary.dev/concepts/flowctl/",children:"flowctl"}),", the CLI-tool for Flow installed on your machine. Check out the ",(0,s.jsx)(n.a,{href:"https://docs.estuary.dev/concepts/flowctl/#installation-and-setup",children:"docs page"})," on installation instructions."]}),"\n",(0,s.jsxs)(n.p,{children:["Before continuing, sign in to the Estuary Flow dashboard, make sure you enable access to the Wikipedia demo. Using ",(0,s.jsx)(n.code,{children:"flowctl"}),", quickly verify you are able to view the demo collections used in this guide."]}),"\n",(0,s.jsxs)(n.p,{children:["Execute the below command to display the documents in the ",(0,s.jsx)(n.code,{children:"demo/wikipedia/recentchange-sampled"})," collection:"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This collection is a 3% sample of the enormous ",(0,s.jsx)(n.code,{children:"demo/wikipedia/recentchange"})," collection which contains millions of documents. Since the purpose of this tutorial is to demonstrate a proof of concept, we avoid publishing a derivation that processes hundreds of gigabytes of data."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"flowctl collections read --collection demo/wikipedia/recentchange-sampled --uncommitted\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you see a stream of JSON documents on your terminal, you\u2019re all good - feel free to cancel the process by pressing ",(0,s.jsx)(n.code,{children:"C^C"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Examine a sample JSON that lives in the demo collection, as this is the data you\u2019ll be using as the input for our derivation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n\xa0\xa0"$schema": "/mediawiki/recentchange/1.0.0",\n\xa0\xa0"_meta": {\n\xa0\xa0\xa0\xa0"file": "recentchange",\n\xa0\xa0\xa0\xa0"offset": 12837,\n\xa0\xa0\xa0\xa0"uuid": "f8f07d87-f5bf-11ee-8401-4fdf95f7b91a"\n\xa0\xa0},\n\xa0\xa0"bot": false,\n\xa0\xa0"comment": "[[:File:Jeton. Ordinaire des guerres - btv1b10405460g (1 of 2).jpg]] added to category",\n\xa0\xa0"id": 2468434138,\n\xa0\xa0"meta": {\n\xa0\xa0\xa0\xa0"domain": "commons.wikimedia.org",\n\xa0\xa0\xa0\xa0"dt": "2024-04-08T15:52:13Z",\n\xa0\xa0\xa0\xa0"id": "d9e8698f-4eac-4262-a451-b7ca247e401c",\n\xa0\xa0\xa0\xa0"offset": 5008568732,\n\xa0\xa0\xa0\xa0"partition": 0,\n\xa0\xa0\xa0\xa0"request_id": "b5372124-63fa-45e1-b35e-86784f1692bc",\n\xa0\xa0\xa0\xa0"stream": "mediawiki.recentchange",\n\xa0\xa0\xa0\xa0"topic": "eqiad.mediawiki.recentchange",\n\xa0\xa0\xa0\xa0"uri": "https://commons.wikimedia.org/wiki/Category:Jetons"\n\xa0\xa0},\n\xa0\xa0"namespace": 14,\n\xa0\xa0"notify_url": "https://commons.wikimedia.org/w/index.php?diff=866807860&oldid=861559382&rcid=2468434138",\n\xa0\xa0"parsedcomment": "<a href=\\"/wiki/File:Jeton._Ordinaire_des_guerres_-_btv1b10405460g_(1_of_2).jpg\\" title=\\"File:Jeton. Ordinaire des guerres - btv1b10405460g (1 of 2).jpg\\">File:Jeton. Ordinaire des guerres - btv1b10405460g (1 of 2).jpg</a> added to category",\n\xa0\xa0"server_name": "commons.wikimedia.org",\n\xa0\xa0"server_script_path": "/w",\n\xa0\xa0"server_url": "https://commons.wikimedia.org",\n\xa0\xa0"timestamp": 1712591533,\n\xa0\xa0"title": "Category:Jetons",\n\xa0\xa0"title_url": "https://commons.wikimedia.org/wiki/Category:Jetons",\n\xa0\xa0"type": "categorize",\n\xa0\xa0"user": "Denghi\xf9Comm",\n\xa0\xa0"wiki": "commonswiki"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The transformation in this tutorial will make use of the ",(0,s.jsx)(n.code,{children:"length"}),", ",(0,s.jsx)(n.code,{children:"bot"})," and ",(0,s.jsx)(n.code,{children:"user_id"})," fields to calculate how many lines a given non-bot user has modified on a day."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n\xa0...\n\xa0"user_id": "User"\n\xa0"bot": 0\n\xa0"length": 1253\n\xa0...\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"writing-the-derivation",children:["Writing the derivation",(0,s.jsx)("a",{id:"writing-the-derivation"})]}),"\n",(0,s.jsxs)(n.p,{children:["Set up your folder structure so you can organize the resources required for the derivation. Create a working directory to follow along, and inside, create a ",(0,s.jsx)(n.code,{children:"flow.yaml"})," file."]}),"\n",(0,s.jsxs)(n.p,{children:["Inside your ",(0,s.jsx)(n.code,{children:"flow.yaml"})," file, add the following contents:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"---\ncollections:\n\xa0\xa0Dani/derivation-tutorial/edits-by-users:\n\n\xa0\xa0\xa0\xa0schema:\n\xa0\xa0\xa0\xa0\xa0\xa0type: object\n\xa0\xa0\xa0\xa0\xa0\xa0properties:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0user_id:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0type: string\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0date:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0format: date\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0type: string\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0total_edits:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0reduce:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0strategy: sum\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0type: number\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0total_new_lines:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0reduce:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0strategy: sum\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0type: number\n\xa0\xa0\xa0\xa0\xa0\xa0reduce:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0strategy: merge\n\xa0\xa0\xa0\xa0\xa0\xa0required:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0- date\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0- user_id\n\n\xa0\xa0\xa0\xa0key:\n\xa0\xa0\xa0\xa0\xa0\xa0- /date\n\xa0\xa0\xa0\xa0\xa0\xa0- /user_id\n\n\xa0\xa0\xa0\xa0derive:\n\xa0\xa0\xa0\xa0\xa0\xa0using:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0sqlite: {}\n\xa0\xa0\xa0\xa0\xa0\xa0transforms:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0- name: edits_by_users\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0source: demo/wikipedia/recentchange-sampled\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0shuffle: any\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0lambda: |\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0select\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$user as user_id,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0substr($meta$dt,1,10) as date,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa01 as total_edits,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0coalesce($length$new - $length$old, 0) as total_new_lines\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0where $type = 'edit' and $user is not null and $bot = 0;\n"})}),"\n",(0,s.jsx)(n.p,{children:"\xa0"}),"\n",(0,s.jsxs)(n.p,{children:["The Flow consists of just one collection, which is what you define here, called ",(0,s.jsx)(n.code,{children:"edits-by-users"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Let\u2019s go over this in a bit more detail."}),"\n",(0,s.jsxs)(n.p,{children:["First of all, the collection needs a schema. The schema of the incoming data (also called the ",(0,s.jsx)(n.a,{href:"https://docs.estuary.dev/concepts/schemas/#write-and-read-schemas",children:"\u201cwrite\u201d schema"}),") is already defined by the demo, you only have to define the schema of the documents the transformation will output, which is the \u201cread\u201d schema."]}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"flow.yaml"})," file, the schema is defined in-line with the rest of the configuration."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"schema:\n\xa0\xa0type: object\n\xa0\xa0properties:\n\xa0\xa0\xa0\xa0user_id:\n\xa0\xa0\xa0\xa0\xa0\xa0type: string\n\xa0\xa0\xa0\xa0date:\n\xa0\xa0\xa0\xa0\xa0\xa0format: date\n\xa0\xa0\xa0\xa0\xa0\xa0type: string\n\xa0\xa0\xa0\xa0total_edits:\n\xa0\xa0\xa0\xa0\xa0\xa0reduce:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0strategy: sum\n\xa0\xa0\xa0\xa0\xa0\xa0type: number\n\xa0\xa0\xa0\xa0total_new_lines:\n\xa0\xa0\xa0\xa0\xa0\xa0reduce:\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0strategy: sum\n\xa0\xa0\xa0\xa0\xa0\xa0type: number\n\xa0\xa0reduce:\n\xa0\xa0\xa0\xa0strategy: merge\n\xa0\xa0required:\n\xa0\xa0\xa0\xa0- date\n\xa0\xa0\xa0\xa0- user_id\n"})}),"\n",(0,s.jsx)(n.p,{children:"As you can see, this schema includes less fields than what is available in the incoming documents, this is expected, but if you wish to include more, this is where you would add them first."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"user_id"})," and ",(0,s.jsx)(n.code,{children:"date"})," fields do not contain any modifications, but the other two have their reduction strategy defined as well to be ",(0,s.jsx)(n.code,{children:"sum"}),". This strategy reduces two numbers or integers by adding their values."]}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about how reduction strategies work, check out the ",(0,s.jsx)(n.a,{href:"https://docs.estuary.dev/reference/reduction-strategies/",children:"documentation"})," page."]}),"\n",(0,s.jsx)(n.p,{children:"Moving on, the next section in the yaml file defines the key of the documents."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"key:\n\xa0\xa0- /date\n\xa0\xa0- /user_id\n"})}),"\n",(0,s.jsx)(n.p,{children:"Every Flow collection must declare a key which is used to group its documents. Keys are specified as an array of JSON pointers to document locations. The important detail here is to know that a collection key instructs Flow how documents of a collection are to be reduced, such as while being materialized to an endpoint."}),"\n",(0,s.jsx)(n.p,{children:"The final section is where you specify that this collection is derived from another collection."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"derive:\n\xa0\xa0using:\n\xa0\xa0\xa0\xa0sqlite: {}\n\xa0\xa0transforms:\n\xa0\xa0\xa0\xa0- name: edits_by_users\n\xa0\xa0\xa0\xa0\xa0\xa0source: demo/wikipedia/recentchange-sampled\n\xa0\xa0\xa0\xa0\xa0\xa0shuffle: any\n\xa0\xa0\xa0\xa0\xa0\xa0lambda: |\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0select\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$user as user_id,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0substr($meta$dt,1,10) as date,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa01 as total_edits,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0coalesce($length$new - $length$old, 0) as total_new_lines\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0where $type = 'edit' and $user is not null and $bot = 0;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here you define the SQL statement that gets executed on the documents of the source collection."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"source: demo/wikipedia/recentchange-sampled"})," property lets Flow know that the source collection is the demo collection from mentioned at in the beginning of the tutorial while ",(0,s.jsx)(n.code,{children:"shuffle"})," tells Flow how to colocate documents while processing, which in this case is set to ",(0,s.jsx)(n.code,{children:"any"}),", meaning source documents can be processed by any available compute."]}),"\n",(0,s.jsx)(n.p,{children:"The SQL is straightforward"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select\n    $user as user_id,\n    substr($meta$dt,1,10) as date,\n    1 as total_edits,\n    coalesce($length$new - $length$old, 0) as total_new_lines\nwhere $type = 'edit' and $user is not null and $bot = 0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We select the ",(0,s.jsx)(n.code,{children:"user_id"}),", parse the event ",(0,s.jsx)(n.code,{children:"date"})," and calculate the amount of line changes. We also select ",(0,s.jsx)(n.code,{children:"1"})," for the value of ",(0,s.jsx)(n.code,{children:"total_edits"}),", this is important because during the reduction phase, due to having selected ",(0,s.jsx)(n.code,{children:"sum"})," as the strategy, these values will get added together to form the total number of edits in the result. We also filter out non-edit events, bot users or events without a user_id to have a somewhat clean dataset."]}),"\n",(0,s.jsxs)(n.h2,{id:"verify",children:["Verify",(0,s.jsx)("a",{id:"verify"})]}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.code,{children:"flowctl"})," to quickly verify your derivation before publishing it. Use the ",(0,s.jsx)(n.code,{children:"preview"})," command to get an idea of the resulting collections."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'flowctl preview --source flow.yaml --name Dani/derivation-tutorial/edits-by-users\n\n{"date":"2024-04-08","total_edits":3,"total_new_lines":110,"user_id":"Renamerr"}\n{"date":"2024-04-08","total_edits":1,"total_new_lines":769,"user_id":"Sebring12Hrs"}\n{"date":"2024-04-08","total_edits":5,"total_new_lines":3360,"user_id":"Sic19"}\n{"date":"2024-04-08","total_edits":1,"total_new_lines":82,"user_id":"Simeon"}\n^C\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As you can see, the output format matches the defined schema.\xa0 The last step would be to publish your derivation to Flow, which you can also do using ",(0,s.jsx)(n.code,{children:"flowctl"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Publishing the derivation will initialize the transformation on the live, real-time Wikipedia stream, make sure to delete it after completing the tutorial."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"flowctl catalog publish --source flow.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:"After successfully publishing your derivation, head over to the Collections page on the Web UI and you will be able to see your derivation in action!"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://storage.googleapis.com/estuary-marketing-strapi-uploads/uploads//Screenshot_2024_05_09_at_17_04_08_7aa8dc036d/Screenshot_2024_05_09_at_17_04_08_7aa8dc036d.png",alt:"Verifying derivation on Web UI"})}),"\n",(0,s.jsxs)(n.h2,{id:"wrapping-up",children:["Wrapping up",(0,s.jsx)("a",{id:"wrapping-up"})]}),"\n",(0,s.jsx)(n.p,{children:"In this guide you learned how to write your first stateless SQL derivation to filter data in a collection."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);