"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4795],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(96540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},47425:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"reference/Connectors/materialization-connectors/Dekaf/bytewax","title":"Bytewax","description":"This connector materializes Flow collections as Kafka-compatible messages that a Bytewax Kafka consumer can read. Bytewax is a Python framework for building scalable dataflow applications, designed for","source":"@site/docs/reference/Connectors/materialization-connectors/Dekaf/bytewax.md","sourceDirName":"reference/Connectors/materialization-connectors/Dekaf","slug":"/reference/Connectors/materialization-connectors/Dekaf/bytewax","permalink":"/reference/Connectors/materialization-connectors/Dekaf/bytewax","draft":false,"unlisted":false,"editUrl":"https://github.com/estuary/flow/edit/master/site/docs/reference/Connectors/materialization-connectors/Dekaf/bytewax.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dekaf","permalink":"/reference/Connectors/materialization-connectors/Dekaf/"},"next":{"title":"ClickHouse","permalink":"/reference/Connectors/materialization-connectors/Dekaf/clickhouse"}}');var o=t(74848),r=t(28453);const a={},s="Bytewax",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Variants",id:"variants",level:2},{value:"Setup",id:"setup",level:2},{value:"Connecting Estuary Flow to Bytewax",id:"connecting-estuary-flow-to-bytewax",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Properties",id:"properties",level:3},{value:"Endpoint",id:"endpoint",level:4},{value:"Bindings",id:"bindings",level:4},{value:"Sample",id:"sample",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"bytewax",children:"Bytewax"})}),"\n",(0,o.jsxs)(n.p,{children:["This connector materializes Flow collections as Kafka-compatible messages that a Bytewax Kafka consumer can read. ",(0,o.jsx)(n.a,{href:"https://bytewax.io/",children:"Bytewax"})," is a Python framework for building scalable dataflow applications, designed for\nhigh-throughput, low-latency data processing tasks."]}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.p,{children:"To use this connector, you'll need:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"At least one Flow collection"}),"\n",(0,o.jsx)(n.li,{children:"A Python development setup"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"variants",children:"Variants"}),"\n",(0,o.jsxs)(n.p,{children:["This connector is a variant of the default Dekaf connector. For other integration options, see the main ",(0,o.jsx)(n.a,{href:"/reference/Connectors/materialization-connectors/Dekaf/",children:"Dekaf"})," page."]}),"\n",(0,o.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsx)(n.p,{children:"Provide an auth token when setting up the Dekaf connector. This can be a password of your choosing and will be used to authenticate consumers to your Kafka topics."}),"\n",(0,o.jsxs)(n.p,{children:["Once the connector is created, note the full materialization name, such as ",(0,o.jsx)(n.code,{children:"YOUR-ORG/YOUR-PREFIX/YOUR-MATERIALIZATION"}),". You will use this as the username."]}),"\n",(0,o.jsx)(n.h2,{id:"connecting-estuary-flow-to-bytewax",children:"Connecting Estuary Flow to Bytewax"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Install Bytewax and the Kafka Python client:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"pip install bytewax kafka-python\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Create a Python script for your Bytewax dataflow. You can use the following template, inserting your own Kafka topic name(s), your full materialization name, and the auth token you created:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import json\nfrom datetime import timedelta\nfrom bytewax.dataflow import Dataflow\nfrom bytewax.inputs import KafkaInputConfig\nfrom bytewax.outputs import StdOutputConfig\nfrom bytewax.window import TumblingWindowConfig, SystemClockConfig\n\n# Estuary Flow Dekaf configuration\nKAFKA_BOOTSTRAP_SERVERS = "dekaf.estuary-data.com:9092"\nKAFKA_TOPIC = "/your-collection-name"\n\n# Parse incoming messages\ndef parse_message(msg):\n    data = json.loads(msg)\n    # Process your data here\n    return data\n\n# Define your dataflow\n src = KafkaSource(brokers=KAFKA_BOOTSTRAP_SERVERS, topics=[KAFKA_TOPIC], add_config={\n     "security.protocol": "SASL_SSL",\n     "sasl.mechanism": "PLAIN",\n     "sasl.username": "YOUR_MATERIALIZATION_NAME",\n     "sasl.password": os.getenv("DEKAF_AUTH_TOKEN"),\n })\n\n flow = Dataflow()\n flow.input("input", src)\n flow.input("input", KafkaInputConfig(KAFKA_BOOTSTRAP_SERVERS, KAFKA_TOPIC))\n flow.map(parse_message)\n # Add more processing steps as needed\n flow.output("output", StdOutputConfig())\n\n if __name__ == "__main__":\n     from bytewax.execution import run_main\n     run_main(flow)\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Run your Bytewax dataflow:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"python your_dataflow_script.py\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Your Bytewax dataflow is now processing data from Estuary Flow in real-time."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"To use this connector, begin with data in one or more Flow collections.\nUse the below properties to configure a Dekaf materialization, which will direct one or more of your Flow collections to your desired topics."}),"\n",(0,o.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,o.jsx)(n.h4,{id:"endpoint",children:"Endpoint"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Property"}),(0,o.jsx)(n.th,{children:"Title"}),(0,o.jsx)(n.th,{children:"Description"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Required/Default"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/token"})}),(0,o.jsx)(n.td,{children:"Auth Token"}),(0,o.jsx)(n.td,{children:"The password that Kafka consumers can use to authenticate to this task."}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsx)(n.td,{children:"Required"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/strict_topic_names"})}),(0,o.jsx)(n.td,{children:"Strict Topic Names"}),(0,o.jsx)(n.td,{children:"Whether or not to expose topic names in a strictly Kafka-compliant format."}),(0,o.jsx)(n.td,{children:"boolean"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"false"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/deletions"})}),(0,o.jsx)(n.td,{children:"Deletion Mode"}),(0,o.jsxs)(n.td,{children:["Can choose between ",(0,o.jsx)(n.code,{children:"kafka"})," or ",(0,o.jsx)(n.code,{children:"cdc"})," deletion modes."]}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"kafka"})})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"bindings",children:"Bindings"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Property"}),(0,o.jsx)(n.th,{children:"Title"}),(0,o.jsx)(n.th,{children:"Description"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Required/Default"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/topic_name"})}),(0,o.jsx)(n.td,{children:"Topic Name"}),(0,o.jsx)(n.td,{children:"Kafka topic name that Dekaf will publish under."}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsx)(n.td,{children:"Required"})]})})]}),"\n",(0,o.jsx)(n.h3,{id:"sample",children:"Sample"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"materializations:\n  ${PREFIX}/${mat_name}:\n    endpoint:\n      dekaf:\n        config:\n          token: <auth-token>\n          strict_topic_names: false\n          deletions: kafka\n        variant: bytewax\n    bindings:\n      - resource:\n          topic_name: ${COLLECTION_NAME}\n        source: ${PREFIX}/${COLLECTION_NAME}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);