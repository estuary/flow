"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[9729],{28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var s=a(96540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}},92756:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guides/dekaf_reading_collections_from_kafka","title":"Connecting to Estuary Flow from Kafka using Dekaf","description":"Dekaf is Estuary Flow\'s Kafka API compatibility layer, allowing consumers to read data from Estuary Flow collections","source":"@site/docs/guides/dekaf_reading_collections_from_kafka.md","sourceDirName":"guides","slug":"/guides/dekaf_reading_collections_from_kafka","permalink":"/guides/dekaf_reading_collections_from_kafka","draft":false,"unlisted":false,"editUrl":"https://github.com/estuary/flow/edit/master/site/docs/guides/dekaf_reading_collections_from_kafka.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dbt Cloud Integration","permalink":"/guides/dbt-integration"},"next":{"title":"How to transform data using SQL","permalink":"/guides/derivation_tutorial_sql"}}');var o=a(74848),t=a(28453);const i={},r="Connecting to Estuary Flow from Kafka using Dekaf",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Connection Details",id:"connection-details",level:2},{value:"How to Connect to Dekaf",id:"how-to-connect-to-dekaf",level:2},{value:"1. Create a Dekaf materialization connector",id:"1-create-a-dekaf-materialization-connector",level:3},{value:"2. Set Up Your Kafka Client",id:"2-set-up-your-kafka-client",level:3},{value:"Example Kafka Client Configuration",id:"example-kafka-client-configuration",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"connecting-to-estuary-flow-from-kafka-using-dekaf",children:"Connecting to Estuary Flow from Kafka using Dekaf"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Dekaf"})," is Estuary Flow's Kafka API compatibility layer, allowing consumers to read data from Estuary Flow collections\nas if they were Kafka topics. Additionally, Dekaf provides a schema registry API for managing schemas. This guide will\nwalk you through the steps to connect to Estuary Flow using Dekaf and its schema registry."]}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Collections"})," represent datasets within Estuary Flow. All captured documents are written to a collection, and all\nmaterialized documents are read from a collection."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Dekaf"})," enables you to interact with these collections as though they were Kafka topics, providing seamless\nintegration with existing Kafka-based tools and workflows."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Kafka Topic Emulation"}),": Access Estuary Flow collections as if they were Kafka topics."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Schema Registry Emulation"}),": Manage and retrieve schemas assigned to Estuary Flow collections, emulating Confluent's\nSchema Registry."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"connection-details",children:"Connection Details"}),"\n",(0,o.jsxs)(n.p,{children:["To connect to Estuary Flow via Dekaf, use the following connection details in conjunction with a\n",(0,o.jsx)(n.a,{href:"/reference/Connectors/materialization-connectors/Dekaf/",children:"Dekaf materialization connector"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Broker Address"}),": ",(0,o.jsx)(n.code,{children:"dekaf.estuary-data.com"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Schema Registry Address"}),": ",(0,o.jsx)(n.code,{children:"https://dekaf.estuary-data.com"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Security Protocol"}),": ",(0,o.jsx)(n.code,{children:"SASL_SSL"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SASL Mechanism"}),": ",(0,o.jsx)(n.code,{children:"PLAIN"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SASL Username"}),": The full name of your Dekaf materialization, such as ",(0,o.jsx)(n.code,{children:"YOUR-ORG/YOUR-PREFIX/YOUR-MATERIALIZATION"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SASL Password"}),": The auth token from your Dekaf materialization"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Schema Registry Username"}),": The full name of your Dekaf materialization"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Schema Registry Password"}),": The auth token from your Dekaf materialization"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"how-to-connect-to-dekaf",children:"How to Connect to Dekaf"}),"\n",(0,o.jsx)(n.h3,{id:"1-create-a-dekaf-materialization-connector",children:"1. Create a Dekaf materialization connector"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["From the ",(0,o.jsx)(n.a,{href:"https://dashboard.estuary.dev",children:"Estuary dashboard"}),", navigate to the ",(0,o.jsx)(n.strong,{children:"Destinations"})," tab."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Click ",(0,o.jsx)(n.strong,{children:"New Materialization"})," and choose a Dekaf connector."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:'There are several Dekaf connector variations besides the generic "Dekaf," such as Tinybird. Currently, they don\'t behave appreciably differently from each other.\nYou may use the different variations to keep your data organized, manage what data you share, and see at a glance where your data is going.'}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Provide a ",(0,o.jsx)(n.strong,{children:"name"})," and ",(0,o.jsx)(n.strong,{children:"auth token"})," to your materialization."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The full materialization name, which also includes your organization/prefix, will be used as the ",(0,o.jsx)(n.strong,{children:"username"})," when consumers connect to Dekaf."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The auth token that you provide will be used as the ",(0,o.jsx)(n.strong,{children:"password"})," when consumers connect to Dekaf. Make sure to use a secure token."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["(Optional) Adjust additional configuration details, such as the ",(0,o.jsx)(n.strong,{children:"Strict Topic Names"})," or ",(0,o.jsx)(n.strong,{children:"Deletion Mode"})," settings."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Choose data collections to materialize. Click ",(0,o.jsx)(n.strong,{children:"Source from capture"})," or add individual collections."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Each collection you add to the materialization will be available for consumers to read as a ",(0,o.jsx)(n.strong,{children:"topic"}),". By default, the topic name is the collection name."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Select ",(0,o.jsx)(n.strong,{children:"Next"}),", then ",(0,o.jsx)(n.strong,{children:"Save and Publish"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"2-set-up-your-kafka-client",children:"2. Set Up Your Kafka Client"}),"\n",(0,o.jsx)(n.p,{children:"Configure your Kafka client using the connection details provided."}),"\n",(0,o.jsx)(n.h4,{id:"example-kafka-client-configuration",children:"Example Kafka Client Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Below is an example configuration for a Kafka client using Python\u2019s ",(0,o.jsx)(n.code,{children:"kafka-python"})," library:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from kafka import KafkaConsumer\n\n# Configuration details\nconf = {\n    'bootstrap_servers': 'dekaf.estuary-data.com:9092',\n    'security_protocol': 'SASL_SSL',\n    'sasl_mechanism': 'PLAIN',\n    'sasl_plain_username': 'Your_Org/Your_Prefix/Your_Materialization',\n    'sasl_plain_password': 'Your_Auth_Token',\n    'group_id': 'your_group_id',\n    'auto_offset_reset': 'earliest'\n}\n\n# Create Consumer instance\nconsumer = KafkaConsumer(\n    'your_topic_name',\n    bootstrap_servers=conf['bootstrap_servers'],\n    security_protocol=conf['security_protocol'],\n    sasl_mechanism=conf['sasl_mechanism'],\n    sasl_plain_username=conf['sasl_plain_username'],\n    sasl_plain_password=conf['sasl_plain_password'],\n    group_id=conf['group_id'],\n    auto_offset_reset=conf['auto_offset_reset'],\n    enable_auto_commit=True,\n    value_deserializer=lambda x: x.decode('utf-8')\n)\n\n# Poll for messages\ntry:\n    for msg in consumer:\n        print(f\"Received message: {msg.value}\")\nexcept KeyboardInterrupt:\n    pass\nfinally:\n    consumer.close()\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can also use ",(0,o.jsx)(n.a,{href:"https://github.com/edenhill/kcat",children:"kcat"})," (formerly known as kafkacat) to test reading messages from an\nEstuary Flow collection as if it were a Kafka topic."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'kcat -C \\\n    -X broker.address.family=v4 \\\n    -X security.protocol=SASL_SSL \\\n    -X sasl.mechanism=PLAIN \\\n    -X sasl.username="Your_Org/Your_Prefix/Your_Materialization" \\\n    -X sasl.password="Your_Auth_Token" \\\n    -b dekaf.estuary-data.com:9092 \\\n    -t "Your_Topic_Name" \\\n    -p 0 \\\n    -o beginning \\\n    -s avro \\\n    -r https://{Your_Org/Your_Prefix/Your_Materialization}:{Your_Auth_Token}@dekaf.estuary-data.com\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);