---
source: crates/agent/src/controllers/mod.rs
expression: schema
---
{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "definitions": {
    "ActivationStatus": {
      "description": "Status of the activation of the task in the data-plane",
      "properties": {
        "last_activated": {
          "$ref": "#/definitions/Id",
          "description": "The publication id that was last activated in the data plane. If this is less than the `last_pub_id` of the controlled spec, then an activation is still pending."
        }
      },
      "type": "object"
    },
    "AffectedConsumer": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/RejectedField"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "fields",
        "name"
      ],
      "type": "object"
    },
    "Collection": {
      "description": "Collection names are paths of Unicode letters, numbers, '-', '_', or '.'. Each path component is separated by a slash '/', and a name may not begin or end in a '/'.",
      "examples": [
        "acmeCo/collection"
      ],
      "pattern": "^[\\p{Letter}\\p{Number}\\-_\\.]+(/[\\p{Letter}\\p{Number}\\-_\\.]+)*$",
      "type": "string"
    },
    "Error": {
      "properties": {
        "catalog_name": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "scope": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "detail"
      ],
      "type": "object"
    },
    "Id": {
      "type": "string"
    },
    "IncompatibleCollection": {
      "properties": {
        "affected_materializations": {
          "items": {
            "$ref": "#/definitions/AffectedConsumer"
          },
          "type": "array"
        },
        "collection": {
          "type": "string"
        },
        "requires_recreation": {
          "description": "Reasons why the collection would need to be re-created in order for a publication of the draft spec to succeed.",
          "items": {
            "$ref": "#/definitions/ReCreateReason"
          },
          "type": "array"
        }
      },
      "required": [
        "collection"
      ],
      "type": "object"
    },
    "InferredSchemaStatus": {
      "description": "Status of the inferred schema",
      "properties": {
        "schema_last_updated": {
          "description": "The time at which the inferred schema was last published. This will only be present if the inferred schema was published at least once.",
          "format": "date-time",
          "type": "string"
        },
        "schema_md5": {
          "description": "The md5 sum of the inferred schema that was last published",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "JobStatus": {
      "description": "JobStatus is the possible outcomes of a handled publication.",
      "oneOf": [
        {
          "properties": {
            "type": {
              "enum": [
                "queued"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "properties": {
            "evolution_id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Id"
                },
                {
                  "type": "null"
                }
              ]
            },
            "incompatible_collections": {
              "items": {
                "$ref": "#/definitions/IncompatibleCollection"
              },
              "type": "array"
            },
            "type": {
              "enum": [
                "buildFailed"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "properties": {
            "type": {
              "enum": [
                "testFailed"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "properties": {
            "type": {
              "enum": [
                "publishFailed"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "properties": {
            "type": {
              "enum": [
                "success"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "description": "Returned when there are no draft specs (after pruning unbound collections). There will not be any `draft_errors` in this case, because there's no `catalog_name` to associate with an error. And it may not be desirable to treat this as an error, depending on the scenario.",
          "properties": {
            "type": {
              "enum": [
                "emptyDraft"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "description": "One or more expected `last_pub_id`s did not match the actual `last_pub_id`, indicating that specs have been changed since the draft was created.",
          "properties": {
            "failures": {
              "items": {
                "$ref": "#/definitions/LockFailure"
              },
              "type": "array"
            },
            "type": {
              "enum": [
                "expectPubIdMismatch"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "LockFailure": {
      "description": "Represents an optimistic lock failure when trying to update live specs.",
      "properties": {
        "catalog_name": {
          "type": "string"
        },
        "expect_pub_id": {
          "$ref": "#/definitions/Id"
        },
        "last_pub_id": {
          "anyOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "catalog_name",
        "expect_pub_id"
      ],
      "type": "object"
    },
    "PublicationInfo": {
      "description": "Summary of a publication that was attempted by a controller.",
      "properties": {
        "completed": {
          "description": "Time at which the publication was completed",
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "description": "Time at which the publication was initiated",
          "format": "date-time",
          "type": "string"
        },
        "detail": {
          "description": "A brief description of the reason for the publication",
          "type": [
            "string",
            "null"
          ]
        },
        "errors": {
          "description": "Errors will be non-empty for publications that were not successful",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "id": {
          "$ref": "#/definitions/Id"
        },
        "result": {
          "anyOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "type": "null"
            }
          ],
          "description": "The final result of the publication"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "PublicationStatus": {
      "description": "Information on the publications performed by the controller. This does not include any information on user-initiated publications.",
      "properties": {
        "history": {
          "description": "A limited history of publications performed by this controller",
          "items": {
            "$ref": "#/definitions/PublicationInfo"
          },
          "type": "array"
        },
        "last_publication_time": {
          "description": "Time of the last controller-initiated publication",
          "format": "date-time",
          "type": "string"
        },
        "max_observed_pub_id": {
          "$ref": "#/definitions/Id",
          "description": "The publication id at which the controller has last notified dependent specs. A publication of the controlled spec will cause the controller to notify the controllers of all dependent specs. When it does so, it sets `max_observed_pub_id` to the current `last_pub_id`, so that it can avoid notifying dependent controllers unnecessarily."
        },
        "min_publication_interval": {
          "default": "30m",
          "description": "The minimim time to wait between controller-initiated publications.",
          "pattern": "^\\d+(s|m|h)$",
          "type": [
            "string",
            "null"
          ]
        },
        "target_pub_id": {
          "$ref": "#/definitions/Id",
          "description": "The largest `last_pub_id` among all of this spec's dependencies. For example, for materializations the dependencies are all of the collections of all enabled binding `source`s, as well as the `sourceCapture`. If any of these are published, it will increase the `target_pub_id` and the materialization will be published at `target_pub_id` in turn."
        }
      },
      "required": [
        "history"
      ],
      "type": "object"
    },
    "ReCreateReason": {
      "description": "Reasons why a draft collection spec would need to be published under a new name.",
      "oneOf": [
        {
          "description": "The collection key in the draft differs from that of the live spec.",
          "enum": [
            "keyChange"
          ],
          "type": "string"
        },
        {
          "description": "One or more collection partition fields in the draft differs from that of the live spec.",
          "enum": [
            "partitionChange"
          ],
          "type": "string"
        }
      ]
    },
    "RejectedField": {
      "properties": {
        "field": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      },
      "required": [
        "field",
        "reason"
      ],
      "type": "object"
    },
    "SourceCaptureStatus": {
      "description": "Status information about the `sourceCapture`",
      "properties": {
        "add_bindings": {
          "description": "If `up_to_date` is `false`, then this will contain the set of `sourceCapture` collections that need to be added. This is provided simply to aid in debugging in case the publication to add the bindings fails.",
          "items": {
            "$ref": "#/definitions/Collection"
          },
          "type": "array",
          "uniqueItems": true
        },
        "up_to_date": {
          "description": "Whether the materialization bindings are up-to-date with respect to the `sourceCapture` bindings. In normal operation, this should always be `true`. Otherwise, there will be a controller `error` and the publication status will contain details of why the update failed.",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "description": "Represents the internal state of a controller.",
  "oneOf": [
    {
      "description": "Status of a capture controller",
      "properties": {
        "activation": {
          "$ref": "#/definitions/ActivationStatus",
          "default": {}
        },
        "publications": {
          "$ref": "#/definitions/PublicationStatus",
          "default": {
            "history": [],
            "min_publication_interval": "30m"
          }
        },
        "type": {
          "enum": [
            "Capture"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    {
      "description": "The status of a collection controller",
      "properties": {
        "activation": {
          "$ref": "#/definitions/ActivationStatus",
          "default": {}
        },
        "inferred_schema": {
          "anyOf": [
            {
              "$ref": "#/definitions/InferredSchemaStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "publications": {
          "$ref": "#/definitions/PublicationStatus",
          "default": {
            "history": [],
            "min_publication_interval": "30m"
          }
        },
        "type": {
          "enum": [
            "Collection"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    {
      "description": "Status of a materialization controller",
      "properties": {
        "activation": {
          "$ref": "#/definitions/ActivationStatus",
          "default": {}
        },
        "publications": {
          "$ref": "#/definitions/PublicationStatus",
          "default": {
            "history": [],
            "min_publication_interval": "30m"
          }
        },
        "source_capture": {
          "anyOf": [
            {
              "$ref": "#/definitions/SourceCaptureStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "enum": [
            "Materialization"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    {
      "properties": {
        "passing": {
          "type": "boolean"
        },
        "publications": {
          "$ref": "#/definitions/PublicationStatus",
          "default": {
            "history": [],
            "min_publication_interval": "30m"
          }
        },
        "type": {
          "enum": [
            "Test"
          ],
          "type": "string"
        }
      },
      "required": [
        "passing",
        "type"
      ],
      "type": "object"
    }
  ],
  "title": "Status"
}
