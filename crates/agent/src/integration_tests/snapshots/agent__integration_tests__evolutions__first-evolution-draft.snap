---
source: crates/agent/src/integration_tests/evolutions.rs
expression: output
---
EvolutionOutput {
    draft: DraftCatalog {
        captures: [
            DraftCapture {
                capture: moths/captureA,
                scope: flow://capture/moths/captureA,
                expect_pub_id: NULL,
                model: {
                  "endpoint": {
                    "connector": {
                      "image": "source/test:test",
                      "config": {"foo":"bar"}
                    }
                  },
                  "bindings": [
                    {
                      "resource": {"id":"A"},
                      "target": "moths/collectionA"
                    },
                    {
                      "resource": {"id":"B"},
                      "target": "moths/collectionB",
                      "backfill": 1
                    }
                  ]
                },
                is_touch: 0,
            },
            DraftCapture {
                capture: moths/captureB,
                scope: flow://capture/moths/captureB,
                expect_pub_id: NULL,
                model: {
                  "endpoint": {
                    "connector": {
                      "image": "source/test:test",
                      "config": {"foo":"bar"}
                    }
                  },
                  "bindings": [
                    {
                      "resource": {"id":"C"},
                      "target": "moths/collectionC"
                    },
                    {
                      "resource": {"id":"D"},
                      "target": "moths/new-collectionD",
                      "backfill": 1
                    }
                  ]
                },
                is_touch: 0,
            },
        ],
        collections: [
            DraftCollection {
                collection: moths/collectionA,
                scope: flow://collection/moths/collectionA,
                expect_pub_id: NULL,
                model: {
                  "schema": {"properties":{"id":{"type":"string"}},"required":["id"],"type":"object"},
                  "key": [
                    "/id"
                  ]
                },
                is_touch: 1,
            },
            DraftCollection {
                collection: moths/collectionB,
                scope: flow://collection/moths/collectionB,
                expect_pub_id: NULL,
                model: {
                  "schema": {"properties":{"id":{"type":"string"}},"required":["id"],"type":"object"},
                  "key": [
                    "/id"
                  ],
                  "reset": true
                },
                is_touch: 0,
            },
            DraftCollection {
                collection: moths/collectionC,
                scope: flow://collection/moths/collectionC,
                expect_pub_id: NULL,
                model: {
                  "schema": {"properties":{"id":{"type":"string"}},"required":["id"],"type":"object"},
                  "key": [
                    "/id"
                  ]
                },
                is_touch: 1,
            },
            DraftCollection {
                collection: moths/new-collectionD,
                scope: flow://collection/moths/collectionD,
                expect_pub_id: "0000000000000000",
                model: {
                  "schema": {"properties":{"id":{"type":"string"}},"required":["id"],"type":"object"},
                  "key": [
                    "/id"
                  ]
                },
                is_touch: 0,
            },
        ],
        materializations: [
            DraftMaterialization {
                materialization: moths/materializationA,
                scope: flow://materialization/moths/materializationA,
                expect_pub_id: NULL,
                model: {
                  "endpoint": {
                    "connector": {
                      "image": "materialize/test:test",
                      "config": {"foo":"bar"}
                    }
                  },
                  "bindings": [
                    {
                      "resource": {"id":"A"},
                      "source": "moths/collectionA",
                      "fields": {
                        "recommended": true
                      },
                      "backfill": 1
                    },
                    {
                      "resource": {"id":"B"},
                      "source": "moths/collectionB",
                      "fields": {
                        "recommended": true
                      },
                      "backfill": 1
                    },
                    {
                      "resource": {"id":"C"},
                      "source": "moths/collectionC",
                      "fields": {
                        "recommended": true
                      },
                      "backfill": 1
                    }
                  ]
                },
                is_touch: 0,
            },
            DraftMaterialization {
                materialization: moths/materializationB,
                scope: flow://materialization/moths/materializationB,
                expect_pub_id: NULL,
                model: {
                  "endpoint": {
                    "connector": {
                      "image": "materialize/test:test",
                      "config": {"foo":"bar"}
                    }
                  },
                  "bindings": [
                    {
                      "resource": {"id":"B"},
                      "source": "moths/collectionB",
                      "fields": {
                        "recommended": true
                      },
                      "backfill": 1
                    },
                    {
                      "resource": {"id":"C"},
                      "source": "moths/collectionC",
                      "fields": {
                        "recommended": true
                      },
                      "backfill": 10
                    },
                    {
                      "resource": {"id":"D"},
                      "source": "moths/new-collectionD",
                      "fields": {
                        "recommended": true
                      },
                      "backfill": 1
                    }
                  ]
                },
                is_touch: 0,
            },
        ],
    },
    actions: [
        EvolvedCollection {
            old_name: "moths/collectionA",
            new_name: "moths/collectionA",
            updated_materializations: [
                "moths/materializationA",
            ],
            updated_captures: [],
        },
        EvolvedCollection {
            old_name: "moths/collectionB",
            new_name: "moths/collectionB",
            updated_materializations: [
                "moths/materializationA",
                "moths/materializationB",
            ],
            updated_captures: [
                "moths/captureA",
            ],
        },
        EvolvedCollection {
            old_name: "moths/collectionC",
            new_name: "moths/collectionC",
            updated_materializations: [
                "moths/materializationA",
                "moths/materializationB",
            ],
            updated_captures: [],
        },
        EvolvedCollection {
            old_name: "moths/collectionD",
            new_name: "moths/new-collectionD",
            updated_materializations: [
                "moths/materializationB",
            ],
            updated_captures: [
                "moths/captureB",
            ],
        },
    ],
}
