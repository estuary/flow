"""
An alert from the alert_history table
"""
type Alert {
	"""
	The type of the alert
	"""
	alertType: AlertType!
	"""
	The catalog name that the alert pertains to.
	"""
	catalogName: String!
	"""
	Time at which the alert started firing.
	"""
	firedAt: DateTime!
	"""
	The time at which the alert was resolved, or null if it is still firing.
	"""
	resolvedAt: DateTime
	"""
	The alert arguments contain additional details about the alert, which
	may be used in formatting the alert message.
	"""
	arguments: JSON!
}

type AlertConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [AlertEdge!]!
}

"""
An edge in a connection.
"""
type AlertEdge {
	"""
	The item at the end of the edge
	"""
	node: Alert!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum AlertType {
	auto_discover_failed
	shard_failed
	data_movement_stalled
	free_trial
	free_trial_ending
	free_trial_stalled
	missing_payment_method
}

input ByPrefix {
	prefix: String!
	catalogType: CatalogType
}

"""
Capability within the Estuary role-based access control (RBAC) authorization system.
"""
enum Capability {
	"""
	Note that the discriminants here align with those in the database type.
	"""
	read
	write
	admin
}

enum CatalogType {
	capture
	collection
	materialization
	test
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

scalar Id

"""
A scalar that can represent any JSON value.
"""
scalar JSON

type LiveSpec {
	liveSpecId: Id!
	catalogName: String!
	specType: CatalogType!
	model: JSON!
	lastBuildId: Id!
	lastPubId: Id!
	createdAt: DateTime!
	updatedAt: DateTime!
	builtSpec: JSON!
	isDisabled: Boolean!
	"""
	Returns all alerts that are currently firing for this live spec.
	"""
	firingAlerts: [Alert!]!
	"""
	Returns the history of resolved alerts for this live spec. Alerts are
	returned in reverse chronological order based on the `firedAt`
	timestamp, and are paginated.
	"""
	alertHistory(before: String, last: Int!): AlertConnection!
}

type LiveSpecConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [LiveSpecEdge!]!
}

"""
An edge in a connection.
"""
type LiveSpecEdge {
	"""
	The item at the end of the edge
	"""
	node: LiveSpec!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

"""
A prefix to which the user is authorized.
"""
type Prefix {
	"""
	The prefix to which the user is authorized.
	"""
	prefix: String!
	"""
	The capability granted to the user for this prefix.
	"""
	capability: Capability!
}

type PrefixConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [PrefixEdge!]!
}

"""
An edge in a connection.
"""
type PrefixEdge {
	"""
	The item at the end of the edge
	"""
	node: Prefix!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type QueryRoot {
	liveSpecs(by: ByPrefix!, after: String, first: Int): LiveSpecConnection!
	"""
	Returns a list of alerts that are currently firing for the given catalog
	prefixes.
	"""
	alerts(
		"""
		Show alerts for the given catalog prefixes
		"""
		prefix: String!,
		"""
		Optionally filter alerts by whether or not they are firing
		"""
		firing: Boolean,		before: String,		last: Int
	): AlertConnection!
	prefixes(minCapability: Capability!, after: String, first: Int): PrefixConnection!
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Provides a scalar specification URL for specifying the behavior of custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: QueryRoot
}
