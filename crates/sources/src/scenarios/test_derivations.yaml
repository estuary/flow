test://example/a-schema.json: true

test://example/alt-schema.json:
  $anchor: foobar
  type: object
  properties:
    d1-key: { type: string }
    shuffle: { type: integer }
    key:
      type: integer
      title: "the key title"
      description: "the key description"
    moar: { type: number }

test://example/reg-schema.json:
  $defs: { qib: true }

test://example/catalog.yaml:
  collections:
    d1/collection:
      schema: a-schema.json
      key: [/d1-key]
      derivation:
        register:
          schema: reg-schema.json#/$defs/qib
          initial: { "initial": ["value", 32] }
        transform:
          some-name:
            source:
              name: src/collection
              partitions:
                include: { "a_field": ["foo", 42] }
                exclude: { "other_field": [false] }
              schema: alt-schema.json#foobar
            readDelay: "1 hour"
            priority: 32
            shuffle:
              key: ["/shuffle", "/key"]
            update:
              lambda: typescript
            publish: { lambda: typescript }

    d2/collection:
      schema: a-schema.json
      key: [/d2-key]
      journals:
        fragments:
          compressionCodec: ZSTANDARD
          flushInterval: 15m
      derivation:
        transform:
          do-the-thing:
            source:
              name: src/collection
            update:
              lambda:
                remote: https://example/api
        shards:
          disable: true
          minTxnDuration: 15s
          maxTxnDuration: 6m
          hotStandbys: 2
          ringBufferSize: 12345
          readChannelSize: 6789

test://example/catalog.ts:
  typescript: "module placeholder"
