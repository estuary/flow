test://example/a-schema.json: true

test://example/other-schema.json:
  $anchor: foobar
  type: object
  properties:
    d1-key: { type: string }
    shuffle: { type: integer }
    key:
      type: integer
      title: "the key title"
      description: "the key description"
    moar: { type: number }

test://example/reg-schema.json:
  $defs: { qib: true }

test://example/catalog.yaml:
  collections:
    d1/collection:
      schema: a-schema.json
      key: [/d1-key]

      derive:
        using:
          typescript:
            module: catalog.ts
        transforms:
          - name: some-name
            source:
              name: src/collection
              partitions:
                include: { "a_field": ["foo", 42] }
                exclude: { "other_field": [false] }
              notBefore: 2017-03-03T03:02:01Z
              notAfter: 2019-03-06T09:30:02Z
            readDelay: "1 hour"
            priority: 32
            shuffle:
              key: ["/shuffle", "/key"]

    d2/collection:
      schema: a-schema.json
      key: [/d2-key]
      journals:
        fragments:
          compressionCodec: ZSTANDARD
          flushInterval: 15m
      derive:
        using:
          connector:
            image: some/image:tag
            config:
              remote: https://example/api
        transforms:
          - name: do-the-thing
            source: src/collection
            lambda: 42
            shuffle: any
        shards:
          disable: true
          minTxnDuration: 15s
          maxTxnDuration: 6m
          hotStandbys: 2
          ringBufferSize: 12345
          readChannelSize: 6789

    d3/collection:
      writeSchema: a-schema.json
      readSchema: other-schema.json
      key: [/some/key]
      derive:
        using:
          sqlite:
            migrations:
              - |
                create table foo(bar int);
              - sql/migration_two.sql
        transforms:
          - name: frob
            source: src/collection
            lambda: |
              select 'a long string which makes this a larger lambda' * from foo;
            shuffle:
              lambda: sql/shuffle_lambda.sql
        shuffleKeyTypes: [string, integer]

    d4/local:
      schema: a-schema.json
      key: [/key]
      derive:
        using:
          local:
            command: [some-command, --with-args]
            config:
              some-local: config
        transforms: []

test://example/catalog.ts: |
  a typescript module placeholder that's fairly "long", at least long enough to not be inline

test://example/sql/migration_two.sql: |
  alter table baz add column value text not null;
  drop table other_thing;

test://example/sql/shuffle_lambda.sql: |
  select a whole bunch of fields and stuff from source documents to shuffle upon;
