---
source: crates/sources/src/scenarios/mod.rs
expression: tables
---
Sources {
    capture_bindings: [],
    captures: [],
    collections: [],
    derivations: [],
    errors: [
        Error {
            scope: test://example/catalog-err-not-an-array.yaml,
            error: failed to parse document (data did not match any variant of untagged enum TestDocuments at line 1 column 107)
            
            Caused by:
                data did not match any variant of untagged enum TestDocuments at line 1 column 107,
        },
        Error {
            scope: test://example/catalog-err-not-an-object.yaml,
            error: failed to parse document (data did not match any variant of untagged enum TestDocuments at line 1 column 106)
            
            Caused by:
                data did not match any variant of untagged enum TestDocuments at line 1 column 106,
        },
        Error {
            scope: test://example/not-an-array.json,
            error: failed to parse document fixtures (https://go.estuary.dev/NGT3es)
            
            Caused by:
                invalid type: map, expected a sequence at line 1 column 0,
        },
        Error {
            scope: test://example/catalog.yaml#/tests/acmeCo~1errors~1test/1,
            error: failed to fetch resource test://example/not-found.json
            
            Caused by:
                fixture not found,
        },
    ],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/catalog-err-not-an-array.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/catalog-err-not-an-object.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/not-an-array.json,
        },
        Fetch {
            depth: 2,
            resource: test://example/not-found.json,
        },
        Fetch {
            depth: 2,
            resource: test://example/snapshots/ingest.json,
        },
        Fetch {
            depth: 2,
            resource: test://example/snapshots/verify.json,
        },
    ],
    imports: [
        Import {
            scope: test://example/catalog.yaml#/import/0,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog-err-not-an-array.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/import/1,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog-err-not-an-object.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/tests/acmeCo~1widgest~1test/0,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.yaml?ptr=/tests/acmeCo~1widgest~1test/0,
        },
        Import {
            scope: test://example/catalog.yaml#/tests/acmeCo~1widgest~1test/1,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.yaml?ptr=/tests/acmeCo~1widgest~1test/1,
        },
        Import {
            scope: test://example/catalog.yaml#/tests/acmeCo~1widgest~1test/2,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.yaml?ptr=/tests/acmeCo~1widgest~1test/2,
        },
        Import {
            scope: test://example/catalog.yaml#/tests/acmeCo~1errors~1test/0,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/not-an-array.json,
        },
        Import {
            scope: test://example/catalog.yaml#/tests/acmeCo~1errors~1test/1,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/not-found.json,
        },
        Import {
            scope: test://example/catalog.yaml#/tests/acmeCo~1widgest~1test/3,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/snapshots/ingest.json,
        },
        Import {
            scope: test://example/catalog.yaml#/tests/acmeCo~1widgest~1test/4,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/snapshots/verify.json,
        },
    ],
    materialization_bindings: [],
    materializations: [],
    npm_dependencies: [],
    projections: [],
    resources: [
        Resource {
            resource: test://example/catalog-err-not-an-array.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"tests":{"acmeCo/parse/failure":[{"ingest":{"collection":"test/collection","documents":{"not":"an array"}}}]}},
        },
        Resource {
            resource: test://example/catalog-err-not-an-object.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"tests":{"acmeCo/parse/failure":[{"ingest":{"collection":"test/collection","documents":["not-an-object"]}}]}},
        },
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["catalog-err-not-an-array.yaml","catalog-err-not-an-object.yaml"],"tests":{"acmeCo/errors/test":[{"ingest":{"collection":"test/collection","description":"This isn't an array.","documents":"./not-an-array.json"}},{"verify":{"collection":"test/collection","description":"This is missing.","documents":"./not-found.json"}}],"acmeCo/widgest/test":[{"ingest":{"collection":"test/collection","description":"Import some foos","documents":[{"ingest":1},{"next":"ingest"}]}},{"verify":{"collection":"test/collection","description":"Verify without a selector.","documents":[{"verify":2},{"next":false}]}},{"verify":{"collection":"test/collection","documents":[{"verify":3},{"fin":null}],"partitions":{"exclude":{},"include":{"a_field":["some-val"]}}}},{"ingest":{"collection":"test/collection","description":"Import more foos via file fixture.","documents":"./snapshots/ingest.json"}},{"verify":{"collection":"test/collection","description":"Verify via file fixture.","documents":"./snapshots/verify.json"}}]}},
        },
        Resource {
            resource: test://example/catalog.yaml?ptr=/tests/acmeCo~1widgest~1test/0,
            content_type: "DOCUMENTS_FIXTURE",
            content: ".. binary ..",
            content_dom: [{"ingest":1},{"next":"ingest"}],
        },
        Resource {
            resource: test://example/catalog.yaml?ptr=/tests/acmeCo~1widgest~1test/1,
            content_type: "DOCUMENTS_FIXTURE",
            content: ".. binary ..",
            content_dom: [{"verify":2},{"next":false}],
        },
        Resource {
            resource: test://example/catalog.yaml?ptr=/tests/acmeCo~1widgest~1test/2,
            content_type: "DOCUMENTS_FIXTURE",
            content: ".. binary ..",
            content_dom: [{"verify":3},{"fin":null}],
        },
        Resource {
            resource: test://example/not-an-array.json,
            content_type: "DOCUMENTS_FIXTURE",
            content: ".. binary ..",
            content_dom: {"whoops":true},
        },
        Resource {
            resource: test://example/snapshots/ingest.json,
            content_type: "DOCUMENTS_FIXTURE",
            content: ".. binary ..",
            content_dom: [{"an":"ingest"}],
        },
        Resource {
            resource: test://example/snapshots/verify.json,
            content_type: "DOCUMENTS_FIXTURE",
            content: ".. binary ..",
            content_dom: [{"a":"verify"}],
        },
    ],
    schema_docs: [],
    storage_mappings: [],
    test_steps: [
        TestStep {
            scope: test://example/catalog.yaml#/tests/acmeCo~1errors~1test/0,
            test: acmeCo/errors/test,
            step_index: 0,
            spec: {
              "ingest": {
                "description": "This isn't an array.",
                "collection": "test/collection",
                "documents": []
              }
            },
            documents: test://example/not-an-array.json,
        },
        TestStep {
            scope: test://example/catalog.yaml#/tests/acmeCo~1errors~1test/1,
            test: acmeCo/errors/test,
            step_index: 1,
            spec: {
              "verify": {
                "description": "This is missing.",
                "collection": "test/collection",
                "documents": []
              }
            },
            documents: test://example/not-found.json,
        },
        TestStep {
            scope: test://example/catalog.yaml#/tests/acmeCo~1widgest~1test/0,
            test: acmeCo/widgest/test,
            step_index: 0,
            spec: {
              "ingest": {
                "description": "Import some foos",
                "collection": "test/collection",
                "documents": []
              }
            },
            documents: test://example/catalog.yaml?ptr=/tests/acmeCo~1widgest~1test/0,
        },
        TestStep {
            scope: test://example/catalog.yaml#/tests/acmeCo~1widgest~1test/1,
            test: acmeCo/widgest/test,
            step_index: 1,
            spec: {
              "verify": {
                "description": "Verify without a selector.",
                "collection": "test/collection",
                "documents": []
              }
            },
            documents: test://example/catalog.yaml?ptr=/tests/acmeCo~1widgest~1test/1,
        },
        TestStep {
            scope: test://example/catalog.yaml#/tests/acmeCo~1widgest~1test/2,
            test: acmeCo/widgest/test,
            step_index: 2,
            spec: {
              "verify": {
                "collection": "test/collection",
                "documents": [],
                "partitions": {
                  "include": {
                    "a_field": [
                      "some-val"
                    ]
                  },
                  "exclude": {}
                }
              }
            },
            documents: test://example/catalog.yaml?ptr=/tests/acmeCo~1widgest~1test/2,
        },
        TestStep {
            scope: test://example/catalog.yaml#/tests/acmeCo~1widgest~1test/3,
            test: acmeCo/widgest/test,
            step_index: 3,
            spec: {
              "ingest": {
                "description": "Import more foos via file fixture.",
                "collection": "test/collection",
                "documents": []
              }
            },
            documents: test://example/snapshots/ingest.json,
        },
        TestStep {
            scope: test://example/catalog.yaml#/tests/acmeCo~1widgest~1test/4,
            test: acmeCo/widgest/test,
            step_index: 4,
            spec: {
              "verify": {
                "description": "Verify via file fixture.",
                "collection": "test/collection",
                "documents": []
              }
            },
            documents: test://example/snapshots/verify.json,
        },
    ],
    transforms: [],
}
