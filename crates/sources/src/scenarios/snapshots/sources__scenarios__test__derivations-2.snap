---
source: crates/sources/src/scenarios/mod.rs
expression: tables
---
DraftCatalog {
    collections: [
        DraftCollection {
            collection: d1/collection,
            scope: test://example/catalog.yaml#/collections/d1~1collection,
            expect_pub_id: NULL,
            model: {
              "schema": {"$id":"test://example/a-schema.json","allOf":[true]},
              "key": [
                "/d1-key"
              ],
              "derive": {
                "using": {
                  "typescript": {
                    "module": "a typescript module placeholder that's fairly \"long\", at least long enough to not be inline\n"
                  }
                },
                "transforms": [
                  {
                    "name": "some-name",
                    "source": {
                      "name": "src/collection",
                      "partitions": {
                        "include": {
                          "a_field": [
                            "foo",
                            42
                          ]
                        },
                        "exclude": {
                          "other_field": [
                            false
                          ]
                        }
                      },
                      "notBefore": "2017-03-03T03:02:01Z",
                      "notAfter": "2019-03-06T09:30:02Z"
                    },
                    "shuffle": {
                      "key": [
                        "/shuffle",
                        "/key"
                      ]
                    },
                    "priority": 32,
                    "readDelay": "1h"
                  }
                ]
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: d2/collection,
            scope: test://example/catalog.yaml#/collections/d2~1collection,
            expect_pub_id: "0011223344556677",
            model: {
              "schema": {"$id":"test://example/a-schema.json","allOf":[true]},
              "key": [
                "/d2-key"
              ],
              "journals": {
                "fragments": {
                  "compressionCodec": "ZSTANDARD",
                  "flushInterval": "15m"
                }
              },
              "derive": {
                "using": {
                  "connector": {
                    "image": "some/image:tag",
                    "config": {"remote":"https://example/api"}
                  }
                },
                "transforms": [
                  {
                    "name": "do-the-thing",
                    "source": "src/collection",
                    "shuffle": "any",
                    "lambda": 42,
                    "backfill": 2
                  }
                ],
                "shards": {
                  "disable": true,
                  "minTxnDuration": "15s",
                  "maxTxnDuration": "6m",
                  "hotStandbys": 2,
                  "ringBufferSize": 12345,
                  "readChannelSize": 6789
                }
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: d3/collection,
            scope: test://example/catalog.yaml#/collections/d3~1collection,
            expect_pub_id: NULL,
            model: {
              "writeSchema": {"$id":"test://example/a-schema.json","allOf":[true]},
              "readSchema": {"$anchor":"foobar","$id":"test://example/other-schema.json","properties":{"d1-key":{"type":"string"},"key":{"description":"the key description","title":"the key title","type":"integer"},"moar":{"type":"number"},"shuffle":{"type":"integer"}},"type":"object"},
              "key": [
                "/some/key"
              ],
              "derive": {
                "using": {
                  "sqlite": {
                    "migrations": [
                      "create table foo(bar int);\n",
                      "alter table baz add column value text not null;\ndrop table other_thing;\n"
                    ]
                  }
                },
                "transforms": [
                  {
                    "name": "frob",
                    "source": "src/collection",
                    "shuffle": {
                      "lambda": "select a whole bunch of fields and stuff from source documents to shuffle upon;\n"
                    },
                    "lambda": "select 'a long string which makes this a larger lambda' * from foo;\n"
                  }
                ],
                "shuffleKeyTypes": [
                  "string",
                  "integer"
                ]
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: d4/local,
            scope: test://example/catalog.yaml#/collections/d4~1local,
            expect_pub_id: NULL,
            model: {
              "schema": {"$id":"test://example/a-schema.json","allOf":[true]},
              "key": [
                "/key"
              ],
              "derive": {
                "using": {
                  "local": {
                    "command": [
                      "some-command",
                      "--with-args"
                    ],
                    "config": {"some-local":"config"}
                  }
                },
                "transforms": []
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: d5/python,
            scope: test://example/catalog.yaml#/collections/d5~1python,
            expect_pub_id: NULL,
            model: {
              "schema": {"$id":"test://example/a-schema.json","allOf":[true]},
              "key": [
                "/py-key"
              ],
              "derive": {
                "using": {
                  "python": {
                    "module": "a python module placeholder that's fairly \"long\", at least long enough to not be inline\n"
                  }
                },
                "transforms": [
                  {
                    "name": "python-transform",
                    "source": "src/collection",
                    "shuffle": {
                      "key": [
                        "/shuffle"
                      ]
                    },
                    "lambda": "def transform(source):\n    return source\n"
                  }
                ]
              }
            },
            is_touch: 0,
        },
    ],
}
