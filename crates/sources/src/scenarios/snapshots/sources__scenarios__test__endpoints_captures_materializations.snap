---
source: crates/sources/src/scenarios/mod.rs
expression: tables
---
Sources {
    captures: [
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing,
            capture: capture/config-missing,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "another/image",
                  "config": "config/not/found.yaml"
                }
              },
              "bindings": [
                {
                  "resource": "resource/not/found.yaml",
                  "target": "some/collection"
                }
              ]
            },
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1config-raw,
            capture: capture/config-raw,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "another/image",
                  "config": "raw-config.foo"
                }
              },
              "bindings": []
            },
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1second,
            capture: capture/second,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "another/image",
                  "config": "referenced/config.yaml"
                }
              },
              "bindings": [
                {
                  "resource": "referenced/resource.yaml",
                  "target": "third/collection"
                }
              ],
              "interval": "3m",
              "shards": {
                "maxTxnDuration": "30s",
                "logLevel": "debug"
              }
            },
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/first~1capture,
            capture: first/capture,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "an/image",
                  "config": {"bucket":"foobar","prefix":"path/prefix"}
                }
              },
              "bindings": [
                {
                  "resource": {"stream":"contents"},
                  "target": "a/collection"
                },
                {
                  "resource": {"extra":"stuff"},
                  "target": "other/collection"
                }
              ]
            },
        },
    ],
    collections: [],
    errors: [
        Error {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config-fragment/endpoint/connector/config,
            error: failed to fetch resource test://example/referenced/config.yaml#/bad/fragment: resources cannot have fragments,
        },
        Error {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing/endpoint/connector/config,
            error: failed to fetch resource test://example/config/not/found.yaml: fixture not found,
        },
        Error {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing/bindings/0/resource,
            error: failed to fetch resource test://example/resource/not/found.yaml: fixture not found,
        },
        Error {
            scope: test://example/catalog.yaml#/materializations/materialization~1missing-config/bindings/0/resource,
            error: failed to fetch resource test://example/referenced/not/found.yaml: fixture not found,
        },
    ],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/config/not/found.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/raw-config.foo,
        },
        Fetch {
            depth: 2,
            resource: test://example/referenced/config.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/referenced/not/found.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/referenced/resource.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/resource/not/found.yaml,
        },
    ],
    imports: [
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing/bindings/0/resource,
            to_resource: test://example/resource/not/found.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing/endpoint/connector/config,
            to_resource: test://example/config/not/found.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1config-raw/endpoint/connector/config,
            to_resource: test://example/raw-config.foo,
        },
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1second/bindings/0/resource,
            to_resource: test://example/referenced/resource.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1second/endpoint/connector/config,
            to_resource: test://example/referenced/config.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1missing-config/bindings/0/resource,
            to_resource: test://example/referenced/not/found.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1missing-config/endpoint/connector/config,
            to_resource: test://example/config/not/found.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config-fragment/endpoint/connector/config,
            to_resource: test://example/referenced/config.yaml#/bad/fragment,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config/bindings/0/resource,
            to_resource: test://example/referenced/resource.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config/endpoint/connector/config,
            to_resource: test://example/referenced/config.yaml,
        },
    ],
    materializations: [
        Materialization {
            scope: test://example/catalog.yaml#/materializations/a~1materialization,
            materialization: a/materialization,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "materialization/image",
                  "config": {"its":"config"}
                }
              },
              "bindings": [
                {
                  "resource": {"table":"table_one"},
                  "source": "source/collection",
                  "fields": {
                    "recommended": true
                  }
                },
                {
                  "resource": {"table":"table_two"},
                  "source": {
                    "name": "other/source/collection",
                    "partitions": {
                      "include": {
                        "a_field": [
                          "some-val"
                        ]
                      },
                      "exclude": {
                        "other": [
                          42
                        ]
                      }
                    }
                  },
                  "fields": {
                    "include": {
                      "add": {}
                    },
                    "exclude": [
                      "del"
                    ],
                    "recommended": true
                  }
                }
              ]
            },
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/materialization~1missing-config,
            materialization: materialization/missing-config,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "materialization/image",
                  "config": "config/not/found.yaml"
                }
              },
              "bindings": [
                {
                  "resource": "referenced/not/found.yaml",
                  "source": "other/source/collection",
                  "fields": {
                    "recommended": true
                  }
                }
              ]
            },
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config,
            materialization: materialization/with-config,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "materialization/another:image",
                  "config": "referenced/config.yaml"
                }
              },
              "bindings": [
                {
                  "resource": "referenced/resource.yaml",
                  "source": "some/source/collection",
                  "fields": {
                    "recommended": true
                  }
                }
              ]
            },
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config-fragment,
            materialization: materialization/with-config-fragment,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "materialization/another:image",
                  "config": "referenced/config.yaml#/bad/fragment"
                }
              },
              "bindings": []
            },
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/to~1sqlite,
            materialization: to/sqlite,
            spec: {
              "endpoint": {
                "sqlite": {
                  "path": "relative/to/scope.db"
                }
              },
              "bindings": [
                {
                  "resource": {"table":"table_three"},
                  "source": "final/source/collection",
                  "fields": {
                    "recommended": true
                  }
                }
              ],
              "shards": {
                "ringBufferSize": 12345
              }
            },
        },
    ],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"captures":{"capture/config-missing":{"bindings":[{"resource":"resource/not/found.yaml","target":"some/collection"}],"endpoint":{"connector":{"config":"config/not/found.yaml","image":"another/image"}}},"capture/config-raw":{"bindings":[],"endpoint":{"connector":{"config":"raw-config.foo","image":"another/image"}}},"capture/second":{"bindings":[{"resource":"referenced/resource.yaml","target":"third/collection"}],"endpoint":{"connector":{"config":"referenced/config.yaml","image":"another/image"}},"interval":"3m","shards":{"logLevel":"debug","maxTxnDuration":"30s"}},"first/capture":{"bindings":[{"resource":{"stream":"contents"},"target":"a/collection"},{"resource":{"extra":"stuff"},"target":"other/collection"}],"endpoint":{"connector":{"config":{"bucket":"foobar","prefix":"path/prefix"},"image":"an/image"}}}},"materializations":{"a/materialization":{"bindings":[{"resource":{"table":"table_one"},"source":"source/collection"},{"fields":{"exclude":["del"],"include":{"add":{}},"recommended":true},"resource":{"table":"table_two"},"source":{"name":"other/source/collection","partitions":{"exclude":{"other":[42]},"include":{"a_field":["some-val"]}}}}],"endpoint":{"connector":{"config":{"its":"config"},"image":"materialization/image"}}},"materialization/missing-config":{"bindings":[{"resource":"referenced/not/found.yaml","source":"other/source/collection"}],"endpoint":{"connector":{"config":"config/not/found.yaml","image":"materialization/image"}}},"materialization/with-config":{"bindings":[{"resource":"referenced/resource.yaml","source":"some/source/collection"}],"endpoint":{"connector":{"config":"referenced/config.yaml","image":"materialization/another:image"}}},"materialization/with-config-fragment":{"bindings":[],"endpoint":{"connector":{"config":"referenced/config.yaml#/bad/fragment","image":"materialization/another:image"}}},"to/sqlite":{"bindings":[{"resource":{"table":"table_three"},"source":"final/source/collection"}],"endpoint":{"sqlite":{"path":"relative/to/scope.db"}},"shards":{"ringBufferSize":12345}}}},
        },
        Resource {
            resource: test://example/raw-config.foo,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: "fn main() {\n  do_the_thing();\n  do_another_really_long_thing_that_does_stuff_boy_this_is_running_on_huh()?;\n}\n",
        },
        Resource {
            resource: test://example/referenced/config.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"referenced":"config that's fairly long and does not inline"},
        },
        Resource {
            resource: test://example/referenced/resource.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"referenced":"resource that's fairly long and does not inline"},
        },
    ],
    storage_mappings: [],
    tests: [],
}
