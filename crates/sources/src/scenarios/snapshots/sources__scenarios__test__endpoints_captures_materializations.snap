---
source: crates/sources/src/scenarios/mod.rs
expression: tables
---
Sources {
    capture_bindings: [
        CaptureBinding {
            scope: test://example/catalog.yaml#/captures/capture~1ingest/bindings/0,
            capture: capture/ingest,
            capture_index: 0,
            spec: {
              "resource": {},
              "target": "third/collection"
            },
        },
        CaptureBinding {
            scope: test://example/catalog.yaml#/captures/capture~1second/bindings/0,
            capture: capture/second,
            capture_index: 0,
            spec: {
              "resource": {},
              "target": "third/collection"
            },
        },
        CaptureBinding {
            scope: test://example/catalog.yaml#/captures/first~1capture/bindings/0,
            capture: first/capture,
            capture_index: 0,
            spec: {
              "resource": {
                "stream": "contents"
              },
              "target": "a/collection"
            },
        },
        CaptureBinding {
            scope: test://example/catalog.yaml#/captures/first~1capture/bindings/1,
            capture: first/capture,
            capture_index: 1,
            spec: {
              "resource": {
                "extra": "stuff"
              },
              "target": "other/collection"
            },
        },
    ],
    captures: [
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing,
            capture: capture/config-missing,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "another/image",
                  "config": null
                }
              },
              "bindings": []
            },
            endpoint_config: test://example/config/not/found.yaml,
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1config-parse-error,
            capture: capture/config-parse-error,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "another/image",
                  "config": null
                }
              },
              "bindings": []
            },
            endpoint_config: test://example/malformed-config.yaml,
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1ingest,
            capture: capture/ingest,
            spec: {
              "endpoint": {
                "ingest": {}
              },
              "bindings": []
            },
            endpoint_config: NULL,
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1second,
            capture: capture/second,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "another/image",
                  "config": null
                }
              },
              "bindings": [],
              "interval": "3m",
              "shards": {
                "maxTxnDuration": "30s",
                "logLevel": "debug"
              }
            },
            endpoint_config: test://example/referenced/config.yaml,
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/first~1capture,
            capture: first/capture,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "an/image",
                  "config": null
                }
              },
              "bindings": []
            },
            endpoint_config: test://example/catalog.yaml?ptr=/captures/first~1capture/endpoint/connector/config,
        },
    ],
    collections: [],
    derivations: [],
    errors: [
        Error {
            scope: test://example/catalog.yaml#/captures/capture~1config-parse-error/endpoint/connector/config,
            error: failed to fetch resource test://example/malformed-config.yaml
            
            Caused by:
                0: base64-decode of inline resource failed
                1: Invalid byte 34, offset 0.,
        },
        Error {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config-fragment/endpoint/connector/config,
            error: failed to fetch resource test://example/referenced/config.yaml#/bad/fragment
            
            Caused by:
                resources cannot have fragments,
        },
        Error {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing/endpoint/connector/config,
            error: failed to fetch resource test://example/config/not/found.yaml
            
            Caused by:
                fixture not found,
        },
    ],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/config/not/found.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/malformed-config.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/referenced/config.yaml,
        },
    ],
    imports: [
        Import {
            scope: test://example/catalog.yaml#/captures/first~1capture/endpoint/connector/config,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.yaml?ptr=/captures/first~1capture/endpoint/connector/config,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/a~1materialization/endpoint/connector/config,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.yaml?ptr=/materializations/a~1materialization/endpoint/connector/config,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1missing-config/endpoint/connector/config,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/config/not/found.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing/endpoint/connector/config,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/config/not/found.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1config-parse-error/endpoint/connector/config,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/malformed-config.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config/endpoint/connector/config,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/referenced/config.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1second/endpoint/connector/config,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/referenced/config.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config-fragment/endpoint/connector/config,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/referenced/config.yaml#/bad/fragment,
        },
    ],
    materialization_bindings: [
        MaterializationBinding {
            scope: test://example/catalog.yaml#/materializations/a~1materialization/bindings/0,
            materialization: a/materialization,
            materialization_index: 0,
            spec: {
              "resource": {
                "table": "table_one"
              },
              "source": "source/collection",
              "fields": {
                "recommended": true
              }
            },
        },
        MaterializationBinding {
            scope: test://example/catalog.yaml#/materializations/a~1materialization/bindings/1,
            materialization: a/materialization,
            materialization_index: 1,
            spec: {
              "resource": {
                "table": "table_two"
              },
              "source": "other/source/collection",
              "partitions": {
                "include": {
                  "a_field": [
                    "some-val"
                  ]
                },
                "exclude": {
                  "other": [
                    42
                  ]
                }
              },
              "fields": {
                "include": {
                  "add": {}
                },
                "exclude": [
                  "del"
                ],
                "recommended": true
              }
            },
        },
        MaterializationBinding {
            scope: test://example/catalog.yaml#/materializations/to~1sqlite/bindings/0,
            materialization: to/sqlite,
            materialization_index: 0,
            spec: {
              "resource": {
                "table": "table_three"
              },
              "source": "final/source/collection",
              "fields": {
                "recommended": true
              }
            },
        },
    ],
    materializations: [
        Materialization {
            scope: test://example/catalog.yaml#/materializations/a~1materialization,
            materialization: a/materialization,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "materialization/image",
                  "config": null
                }
              },
              "bindings": []
            },
            endpoint_config: test://example/catalog.yaml?ptr=/materializations/a~1materialization/endpoint/connector/config,
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/materialization~1missing-config,
            materialization: materialization/missing-config,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "materialization/image",
                  "config": null
                }
              },
              "bindings": []
            },
            endpoint_config: test://example/config/not/found.yaml,
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config,
            materialization: materialization/with-config,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "materialization/another:image",
                  "config": null
                }
              },
              "bindings": []
            },
            endpoint_config: test://example/referenced/config.yaml,
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config-fragment,
            materialization: materialization/with-config-fragment,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "materialization/another:image",
                  "config": null
                }
              },
              "bindings": []
            },
            endpoint_config: test://example/referenced/config.yaml#/bad/fragment,
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/to~1sqlite,
            materialization: to/sqlite,
            spec: {
              "endpoint": {
                "sqlite": {
                  "path": "test://example/relative/to/scope.db"
                }
              },
              "bindings": [],
              "shards": {
                "ringBufferSize": 12345
              }
            },
            endpoint_config: NULL,
        },
    ],
    npm_dependencies: [],
    projections: [],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"captures":{"capture/config-missing":{"bindings":[],"endpoint":{"connector":{"config":"config/not/found.yaml","image":"another/image"}}},"capture/config-parse-error":{"bindings":[],"endpoint":{"connector":{"config":"malformed-config.yaml","image":"another/image"}}},"capture/ingest":{"bindings":[{"resource":{},"target":"third/collection"}],"endpoint":{"ingest":{}}},"capture/second":{"bindings":[{"resource":{},"target":"third/collection"}],"endpoint":{"airbyteSource":{"config":"referenced/config.yaml","image":"another/image"}},"interval":"3m","shards":{"logLevel":"debug","maxTxnDuration":"30s"}},"first/capture":{"bindings":[{"resource":{"stream":"contents"},"target":"a/collection"},{"resource":{"extra":"stuff"},"target":"other/collection"}],"endpoint":{"connector":{"config":{"bucket":"foobar","prefix":"path/prefix"},"image":"an/image"}}}},"materializations":{"a/materialization":{"bindings":[{"resource":{"table":"table_one"},"source":"source/collection"},{"fields":{"exclude":["del"],"include":{"add":{}},"recommended":true},"partitions":{"exclude":{"other":[42]},"include":{"a_field":["some-val"]}},"resource":{"table":"table_two"},"source":"other/source/collection"}],"endpoint":{"connector":{"config":{"its":"config"},"image":"materialization/image"}}},"materialization/missing-config":{"bindings":[],"endpoint":{"connector":{"config":"config/not/found.yaml","image":"materialization/image"}}},"materialization/with-config":{"bindings":[],"endpoint":{"flowSink":{"config":"referenced/config.yaml","image":"materialization/another:image"}}},"materialization/with-config-fragment":{"bindings":[],"endpoint":{"connector":{"config":"referenced/config.yaml#/bad/fragment","image":"materialization/another:image"}}},"to/sqlite":{"bindings":[{"resource":{"table":"table_three"},"source":"final/source/collection"}],"endpoint":{"sqlite":{"path":"relative/to/scope.db"}},"shards":{"ringBufferSize":12345}}},"resources":{"test://example/malformed-config.yaml":{"content":"abcd1234","contentType":"CONFIG"}}},
        },
        Resource {
            resource: test://example/catalog.yaml?ptr=/captures/first~1capture/endpoint/connector/config,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"bucket":"foobar","prefix":"path/prefix"},
        },
        Resource {
            resource: test://example/catalog.yaml?ptr=/materializations/a~1materialization/endpoint/connector/config,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"its":"config"},
        },
        Resource {
            resource: test://example/referenced/config.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"referenced":"config"},
        },
    ],
    schema_docs: [],
    storage_mappings: [],
    test_steps: [],
    transforms: [],
}
