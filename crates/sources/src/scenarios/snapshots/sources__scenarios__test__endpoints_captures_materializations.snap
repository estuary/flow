---
source: crates/sources/src/scenarios/mod.rs
assertion_line: 27
expression: tables
---
Tables {
    capture_bindings: [
        CaptureBinding {
            scope: test://example/catalog.yaml#/captures/capture~1ingest/bindings/0,
            capture: capture/ingest,
            capture_index: 0,
            resource_spec: {},
            collection: third/collection,
        },
        CaptureBinding {
            scope: test://example/catalog.yaml#/captures/capture~1second/bindings/0,
            capture: capture/second,
            capture_index: 0,
            resource_spec: {},
            collection: third/collection,
        },
        CaptureBinding {
            scope: test://example/catalog.yaml#/captures/first~1capture/bindings/0,
            capture: first/capture,
            capture_index: 0,
            resource_spec: {"stream":"contents"},
            collection: a/collection,
        },
        CaptureBinding {
            scope: test://example/catalog.yaml#/captures/first~1capture/bindings/1,
            capture: first/capture,
            capture_index: 1,
            resource_spec: {"extra":"stuff"},
            collection: other/collection,
        },
    ],
    captures: [
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing,
            capture: capture/config-missing,
            endpoint_type: "AIRBYTE_SOURCE",
            endpoint_spec: null,
            interval_seconds: 300,
            shards: {},
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1config-parse-error,
            capture: capture/config-parse-error,
            endpoint_type: "AIRBYTE_SOURCE",
            endpoint_spec: null,
            interval_seconds: 300,
            shards: {},
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1ingest,
            capture: capture/ingest,
            endpoint_type: "INGEST",
            endpoint_spec: {},
            interval_seconds: 300,
            shards: {},
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/capture~1second,
            capture: capture/second,
            endpoint_type: "AIRBYTE_SOURCE",
            endpoint_spec: {"image":"another/image","config":{"referenced":"config"}},
            interval_seconds: 180,
            shards: {"maxTxnDuration":"30s","logLevel":"debug"},
        },
        Capture {
            scope: test://example/catalog.yaml#/captures/first~1capture,
            capture: first/capture,
            endpoint_type: "AIRBYTE_SOURCE",
            endpoint_spec: {"image":"an/image","config":{"bucket":"foobar","prefix":"path/prefix"}},
            interval_seconds: 300,
            shards: {},
        },
    ],
    collections: [],
    derivations: [],
    errors: [
        Error {
            scope: test://example/malformed-config.yaml,
            error: failed to parse configuration document (location None) (https://go.estuary.dev/qpSUoq)
            
            Caused by:
                0: invalid utf-8 sequence of 1 bytes from index 1
                1: invalid utf-8 sequence of 1 bytes from index 1,
        },
        Error {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config-fragment,
            error: failed to fetch resource test://example/referenced/config.yaml#/bad/fragment
            
            Caused by:
                resources cannot have fragments,
        },
        Error {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing,
            error: failed to fetch resource test://example/config/not/found.yaml
            
            Caused by:
                fixture not found,
        },
    ],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/catalog.ts,
        },
        Fetch {
            depth: 2,
            resource: test://example/config/not/found.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/malformed-config.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/referenced/config.yaml,
        },
    ],
    imports: [
        Import {
            scope: test://example/catalog.yaml,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.ts,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1missing-config,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/config/not/found.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1config-missing,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/config/not/found.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1config-parse-error,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/malformed-config.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/referenced/config.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/captures/capture~1second,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/referenced/config.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config-fragment,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/referenced/config.yaml#/bad/fragment,
        },
    ],
    materialization_bindings: [
        MaterializationBinding {
            scope: test://example/catalog.yaml#/materializations/a~1materialization/bindings/0,
            materialization: a/materialization,
            materialization_index: 0,
            resource_spec: {"table":"table_one"},
            collection: source/collection,
            fields_exclude: [],
            fields_include: {},
            fields_recommended: 1,
            source_partitions: NULL,
        },
        MaterializationBinding {
            scope: test://example/catalog.yaml#/materializations/a~1materialization/bindings/1,
            materialization: a/materialization,
            materialization_index: 1,
            resource_spec: {"table":"table_two"},
            collection: other/source/collection,
            fields_exclude: ["del"],
            fields_include: {"add":{}},
            fields_recommended: 1,
            source_partitions: {"include":{"a_field":["some-val"]},"exclude":{"other":[42]}},
        },
        MaterializationBinding {
            scope: test://example/catalog.yaml#/materializations/to~1sqlite/bindings/0,
            materialization: to/sqlite,
            materialization_index: 0,
            resource_spec: {"table":"table_three"},
            collection: final/source/collection,
            fields_exclude: [],
            fields_include: {},
            fields_recommended: 1,
            source_partitions: NULL,
        },
    ],
    materializations: [
        Materialization {
            scope: test://example/catalog.yaml#/materializations/a~1materialization,
            materialization: a/materialization,
            endpoint_type: "FLOW_SINK",
            endpoint_spec: {"image":"materialization/image","config":{"its":"config"}},
            shards: {},
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/materialization~1missing-config,
            materialization: materialization/missing-config,
            endpoint_type: "FLOW_SINK",
            endpoint_spec: null,
            shards: {},
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config,
            materialization: materialization/with-config,
            endpoint_type: "FLOW_SINK",
            endpoint_spec: {"image":"materialization/another:image","config":{"referenced":"config"}},
            shards: {},
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/materialization~1with-config-fragment,
            materialization: materialization/with-config-fragment,
            endpoint_type: "FLOW_SINK",
            endpoint_spec: null,
            shards: {},
        },
        Materialization {
            scope: test://example/catalog.yaml#/materializations/to~1sqlite,
            materialization: to/sqlite,
            endpoint_type: "SQLITE",
            endpoint_spec: {"path":"test://example/relative/to/scope.db"},
            shards: {"ringBufferSize":12345},
        },
    ],
    named_schemas: [],
    npm_dependencies: [],
    projections: [],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/malformed-config.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/referenced/config.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
        },
    ],
    schema_docs: [],
    storage_mappings: [],
    test_steps: [],
    transforms: [],
}
