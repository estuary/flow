---
source: crates/sources/src/scenarios/mod.rs
expression: tables
---
Sources {
    capture_bindings: [],
    captures: [],
    collections: [
        Collection {
            scope: test://example/B.yaml#/collections/bar,
            collection: bar,
            spec: {
              "schema": false,
              "key": [
                "/ptr"
              ]
            },
            schema: test://example/subpath/wrong-content-type.yaml,
        },
        Collection {
            scope: test://example/B.yaml#/collections/baz,
            collection: baz,
            spec: {
              "schema": false,
              "key": [
                "/ptr"
              ]
            },
            schema: test://example/subpath/invalid-base64,
        },
        Collection {
            scope: test://example/B.yaml#/collections/foo,
            collection: foo,
            spec: {
              "schema": false,
              "key": [
                "/ptr"
              ]
            },
            schema: test://example/subpath/json-schema.yaml,
        },
    ],
    derivations: [],
    errors: [
        Error {
            scope: test://example/B.yaml#/import/0,
            error: failed to fetch resource https://absolute/path/to/c.yaml
            
            Caused by:
                0: base64-decode of inline resource failed
                1: Invalid byte 34, offset 0.,
        },
        Error {
            scope: test://example/B.yaml#/collections/bar/schema,
            error: failed to fetch resource test://example/subpath/wrong-content-type.yaml
            
            Caused by:
                inline resource has content-type Catalog, not the requested JsonSchema,
        },
        Error {
            scope: test://example/B.yaml#/collections/baz/schema,
            error: failed to fetch resource test://example/subpath/invalid-base64
            
            Caused by:
                0: base64-decode of inline resource failed
                1: Invalid byte 34, offset 0.,
        },
    ],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/B.yaml,
        },
        Fetch {
            depth: 3,
            resource: https://absolute/path/to/c.yaml,
        },
        Fetch {
            depth: 3,
            resource: test://example/subpath/invalid-base64,
        },
        Fetch {
            depth: 3,
            resource: test://example/subpath/json-schema.yaml,
        },
        Fetch {
            depth: 3,
            resource: test://example/subpath/wrong-content-type.yaml,
        },
    ],
    imports: [
        Import {
            scope: test://example/B.yaml#/import/0,
            from_resource: test://example/B.yaml,
            to_resource: https://absolute/path/to/c.yaml,
        },
        Import {
            scope: test://example/B.yaml#/collections/baz/schema,
            from_resource: test://example/B.yaml,
            to_resource: test://example/subpath/invalid-base64,
        },
        Import {
            scope: test://example/B.yaml#/collections/foo/schema,
            from_resource: test://example/B.yaml,
            to_resource: test://example/subpath/json-schema.yaml,
        },
        Import {
            scope: test://example/B.yaml#/collections/bar/schema,
            from_resource: test://example/B.yaml,
            to_resource: test://example/subpath/wrong-content-type.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/import/0,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/B.yaml,
        },
    ],
    materialization_bindings: [],
    materializations: [],
    npm_dependencies: [],
    projections: [
        Projection {
            scope: test://example/B.yaml#/collections/bar/projections/flow_document,
            collection: bar,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: test://example/B.yaml#/collections/baz/projections/flow_document,
            collection: baz,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: test://example/B.yaml#/collections/foo/projections/flow_document,
            collection: foo,
            field: flow_document,
            spec: "",
        },
    ],
    resources: [
        Resource {
            resource: test://example/B.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"bar":{"key":["/ptr"],"schema":"subpath/wrong-content-type.yaml"},"baz":{"key":["/ptr"],"schema":"subpath/invalid-base64"},"foo":{"key":["/ptr"],"schema":"subpath/json-schema.yaml"}},"import":["https://absolute/path/to/c.yaml"],"resources":{"https://absolute/path/to/c.yaml":{"content":"eyJzdG9yYWdlTWFwcGluZ3MiOnsiQy8iOnsic3RvcmVzIjpbeyJidWNrZXQiOiJhei1idWNrZXQiLCJwcm92aWRlciI6IkFaVVJFIn1dfX19","contentType":"CATALOG"}},"storageMappings":{"B/":{"stores":[{"bucket":"s3-bucket","provider":"S3"}]}}},
        },
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["B.yaml"],"resources":{"test://example/B.yaml":{"content":{"collections":{"bar":{"key":["/ptr"],"schema":"subpath/wrong-content-type.yaml"},"baz":{"key":["/ptr"],"schema":"subpath/invalid-base64"},"foo":{"key":["/ptr"],"schema":"subpath/json-schema.yaml"}},"import":["https://absolute/path/to/c.yaml"],"resources":{"https://absolute/path/to/c.yaml":{"content":"eyJzdG9yYWdlTWFwcGluZ3MiOnsiQy8iOnsic3RvcmVzIjpbeyJidWNrZXQiOiJhei1idWNrZXQiLCJwcm92aWRlciI6IkFaVVJFIn1dfX19","contentType":"CATALOG"}},"storageMappings":{"B/":{"stores":[{"bucket":"s3-bucket","provider":"S3"}]}}},"contentType":"CATALOG"},"test://example/subpath/invalid-base64":{"content":"this should be base64","contentType":"JSON_SCHEMA"},"test://example/subpath/json-schema.yaml":{"content":{"const":42},"contentType":"JSON_SCHEMA"},"test://example/subpath/wrong-content-type.yaml":{"content":{},"contentType":"CATALOG"}},"storageMappings":{"A/":{"stores":[{"bucket":"gcs-bucket","provider":"GCS"}]}}},
        },
        Resource {
            resource: test://example/subpath/json-schema.yaml,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"const":42},
        },
    ],
    schema_docs: [
        SchemaDoc {
            schema: test://example/subpath/json-schema.yaml,
            dom: {
              "const": 42
            },
        },
    ],
    storage_mappings: [
        StorageMapping {
            scope: test://example/catalog.yaml#/storageMappings/A~1,
            prefix: A/,
            stores: [
              {
                "provider": "GCS",
                "bucket": "gcs-bucket",
                "prefix": null
              }
            ],
        },
        StorageMapping {
            scope: test://example/B.yaml#/storageMappings/B~1,
            prefix: B/,
            stores: [
              {
                "provider": "S3",
                "bucket": "s3-bucket",
                "prefix": null
              }
            ],
        },
    ],
    test_steps: [],
    transforms: [],
}
