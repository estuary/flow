---
source: crates/sources/src/scenarios/mod.rs
assertion_line: 115
expression: tables
---
Tables {
    capture_bindings: [],
    captures: [],
    collections: [
        Collection {
            scope: test://example/B.yaml#/collections/bar,
            collection: bar,
            schema: test://example/subpath/wrong-content-type.yaml,
            key: ["/ptr"],
            journals: {"fragments":{}},
        },
        Collection {
            scope: test://example/B.yaml#/collections/baz,
            collection: baz,
            schema: test://example/subpath/invalid-base64,
            key: ["/ptr"],
            journals: {"fragments":{}},
        },
        Collection {
            scope: test://example/B.yaml#/collections/foo,
            collection: foo,
            schema: test://example/subpath/json-schema.yaml,
            key: ["/ptr"],
            journals: {"fragments":{}},
        },
    ],
    derivations: [],
    errors: [
        Error {
            scope: test://example/B.yaml#/collections/bar/schema,
            error: failed to fetch resource test://example/subpath/wrong-content-type.yaml
            
            Caused by:
                inline resource has content-type Catalog, not the requested JsonSchema,
        },
        Error {
            scope: test://example/B.yaml#/collections/baz/schema,
            error: failed to fetch resource test://example/subpath/invalid-base64
            
            Caused by:
                0: base64-decode of inline resource failed
                1: Encoded text cannot have a 6-bit remainder.,
        },
    ],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/B.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/catalog.ts,
        },
        Fetch {
            depth: 3,
            resource: https://absolute/path/to/c.yaml,
        },
        Fetch {
            depth: 3,
            resource: test://example/B.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/subpath/invalid-base64,
        },
        Fetch {
            depth: 3,
            resource: test://example/subpath/json-schema.yaml,
        },
        Fetch {
            depth: 3,
            resource: test://example/subpath/wrong-content-type.yaml,
        },
        Fetch {
            depth: 4,
            resource: https://absolute/path/to/c.ts,
        },
    ],
    imports: [
        Import {
            scope: https://absolute/path/to/c.yaml,
            from_resource: https://absolute/path/to/c.yaml,
            to_resource: https://absolute/path/to/c.ts,
        },
        Import {
            scope: test://example/B.yaml#/import/0,
            from_resource: test://example/B.yaml,
            to_resource: https://absolute/path/to/c.yaml,
        },
        Import {
            scope: test://example/B.yaml,
            from_resource: test://example/B.yaml,
            to_resource: test://example/B.ts,
        },
        Import {
            scope: test://example/B.yaml#/collections/baz/schema,
            from_resource: test://example/B.yaml,
            to_resource: test://example/subpath/invalid-base64,
        },
        Import {
            scope: test://example/B.yaml#/collections/foo/schema,
            from_resource: test://example/B.yaml,
            to_resource: test://example/subpath/json-schema.yaml,
        },
        Import {
            scope: test://example/B.yaml#/collections/bar/schema,
            from_resource: test://example/B.yaml,
            to_resource: test://example/subpath/wrong-content-type.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/import/0,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/B.yaml,
        },
        Import {
            scope: test://example/catalog.yaml,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.ts,
        },
    ],
    materialization_bindings: [],
    materializations: [],
    named_schemas: [],
    npm_dependencies: [],
    projections: [],
    resources: [
        Resource {
            resource: https://absolute/path/to/c.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/B.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/subpath/json-schema.yaml,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
        },
    ],
    schema_docs: [
        SchemaDoc {
            schema: test://example/subpath/json-schema.yaml,
            dom: {"const":42},
        },
    ],
    storage_mappings: [
        StorageMapping {
            scope: test://example/catalog.yaml#/storageMappings/A~1,
            prefix: A/,
            stores: [{"provider":"GCS","bucket":"gcs-bucket","prefix":null}],
            foreign_build_id: NULL,
        },
        StorageMapping {
            scope: test://example/B.yaml#/storageMappings/B~1,
            prefix: B/,
            stores: [{"provider":"S3","bucket":"s3-bucket","prefix":null}],
            foreign_build_id: NULL,
        },
        StorageMapping {
            scope: https://absolute/path/to/c.yaml#/storageMappings/C~1,
            prefix: C/,
            stores: [{"provider":"AZURE","bucket":"az-bucket","prefix":null}],
            foreign_build_id: NULL,
        },
    ],
    test_steps: [],
    transforms: [],
}
