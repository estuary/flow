---
source: crates/sources/src/scenarios/mod.rs
expression: tables
---
Sources {
    captures: [],
    collections: [
        Collection {
            scope: test://example/catalog.yaml#/collections/a~1collection,
            collection: a/collection,
            spec: {
              "schema": "collection.schema.yaml",
              "key": [
                "/key"
              ]
            },
        },
    ],
    errors: [],
    fetches: [],
    imports: [
        Import {
            scope: test://example/catalog.yaml#/collections/a~1collection/schema,
            to_resource: test://example/actual,
        },
    ],
    materializations: [],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"a/collection":{"schema":"collection.schema.yaml","key":["/key"]}}},
        },
        Resource {
            resource: test://example/collection.schema.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"$defs":{"wrapper":{"$defs":{"a":{"$id":"test://fake/other/a-doc","items":[true,{"$ref":"b-doc#/items/1"}]},"b":{"$id":"test://fake/other/b-doc","items":[{"$ref":"a-doc#/items/0"},true]},"c":true},"$id":"test://fake/root","allOf":[{"$ref":"other/a-doc#/items/1"},{"$ref":"test://fake/other/b-doc#/items/0"},{"$ref":"#/$defs/c"},{"$ref":"test://fake/root#/$defs/c"}]}},"$id":"test://canonical/id","$ref":"test://fake/root"},
        },
    ],
    storage_mappings: [],
    tests: [],
}
