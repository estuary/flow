---
source: crates/sources/src/scenarios/mod.rs
expression: tables
---
DraftCatalog {
    collections: [
        DraftCollection {
            collection: a/collection,
            scope: test://example/catalog.yaml#/collections/a~1collection,
            expect_pub_id: NULL,
            model: {
              "schema": "collection.schema.yaml",
              "key": [
                "/key"
              ],
              "projections": {
                "baz": {
                  "location": "/bing",
                  "partition": true
                },
                "foo": "/bar"
              }
            },
            is_touch: 0,
        },
    ],
    imports: [
        Import {
            scope: test://example/catalog.yaml#/collections/a~1collection/schema,
            to_resource: test://example/collection.schema.yaml,
        },
        Import {
            scope: test://example/catalog.yaml#/import/0,
            to_resource: test://example/sibling,
        },
        Import {
            scope: test://example/catalog.yaml#/import/1,
            to_resource: test://example/sibling#/bad/fragment,
        },
        Import {
            scope: test://example/catalog.yaml#/import/2,
            to_resource: test://not/found,
        },
    ],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["sibling","sibling#/bad/fragment","test://not/found"],"collections":{"a/collection":{"schema":"collection.schema.yaml","key":["/key"],"projections":{"baz":{"location":"/bing","partition":true},"foo":"/bar"}}}},
        },
        Resource {
            resource: test://example/collection.schema.yaml,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"$id":"test://example/schema","allOf":[true]},
        },
    ],
}
