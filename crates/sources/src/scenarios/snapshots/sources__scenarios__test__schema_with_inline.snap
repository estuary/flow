---
source: crates/sources/src/scenarios/mod.rs
assertion_line: 27
expression: tables
---
Tables {
    capture_bindings: [],
    captures: [],
    collections: [
        Collection {
            scope: test://example/catalog.yaml#/collections/test,
            collection: test,
            schema: test://example/catalog.yaml?ptr=/collections/test/schema,
            key: ["/some-key"],
            journals: {"fragments":{}},
        },
    ],
    derivations: [],
    errors: [],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/catalog.ts,
        },
    ],
    imports: [
        Import {
            scope: test://example/catalog.yaml,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.ts,
        },
        Import {
            scope: test://example/catalog.yaml#/collections/test/schema,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.yaml?ptr=/collections/test/schema,
        },
    ],
    materialization_bindings: [],
    materializations: [],
    named_schemas: [],
    npm_dependencies: [],
    projections: [],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "application/vnd.flow.catalog+yaml",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/catalog.yaml?ptr=/collections/test/schema,
            content_type: "application/vnd.flow.jsonSchema+json",
            content: ".. binary ..",
        },
    ],
    schema_docs: [
        SchemaDoc {
            schema: test://example/catalog.yaml?ptr=/collections/test/schema,
            dom: {"additionalProperties":true,"type":"object"},
        },
    ],
    storage_mappings: [],
    test_steps: [],
    transforms: [],
}
