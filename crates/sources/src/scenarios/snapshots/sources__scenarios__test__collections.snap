---
source: crates/sources/src/scenarios/mod.rs
expression: tables
---
DraftCatalog {
    collections: [
        DraftCollection {
            collection: test/collection,
            scope: test://example/catalog.yaml#/collections/test~1collection,
            expect_pub_id: "0011223344556677",
            model: {
              "schema": "schema.json",
              "key": [
                "/key/1",
                "/key/0"
              ],
              "projections": {
                "field_a": {
                  "location": "/a/a",
                  "partition": true
                },
                "field_b": {
                  "location": "/b/b",
                  "partition": false
                }
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: test/collection-no-schema,
            scope: test://example/catalog.yaml#/collections/test~1collection-no-schema,
            expect_pub_id: NULL,
            model: {
              "key": [
                "/key"
              ]
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: test/collection-with-write-and-inferred-read,
            scope: test://example/catalog.yaml#/collections/test~1collection-with-write-and-inferred-read,
            expect_pub_id: NULL,
            model: {
              "writeSchema": "schema.json",
              "readSchema": {"allOf":[{"$ref":"flow://write-schema"},{"$ref":"flow://inferred-schema"}]},
              "key": [
                "/key/1",
                "/key/0"
              ]
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: test/collection-with-write-and-read,
            scope: test://example/catalog.yaml#/collections/test~1collection-with-write-and-read,
            expect_pub_id: NULL,
            model: {
              "writeSchema": "schema.json",
              "readSchema": "schema.json#/properties/a",
              "key": [
                "/key/1",
                "/key/0"
              ]
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: test/collection/with-journals,
            scope: test://example/catalog.yaml#/collections/test~1collection~1with-journals,
            expect_pub_id: NULL,
            model: {
              "schema": "schema.json#foobar",
              "key": [
                "/a/key"
              ],
              "journals": {
                "fragments": {
                  "length": 12345,
                  "compressionCodec": "GZIP_OFFLOAD_DECOMPRESSION",
                  "retention": "13days 8h",
                  "flushInterval": "15m"
                }
              }
            },
            is_touch: 0,
        },
    ],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/schema.json,
        },
    ],
    imports: [
        Import {
            scope: test://example/catalog.yaml#/collections/test~1collection-with-write-and-inferred-read/writeSchema,
            to_resource: test://example/schema.json,
        },
        Import {
            scope: test://example/catalog.yaml#/collections/test~1collection-with-write-and-read/readSchema,
            to_resource: test://example/schema.json,
        },
        Import {
            scope: test://example/catalog.yaml#/collections/test~1collection-with-write-and-read/writeSchema,
            to_resource: test://example/schema.json,
        },
        Import {
            scope: test://example/catalog.yaml#/collections/test~1collection/schema,
            to_resource: test://example/schema.json,
        },
        Import {
            scope: test://example/catalog.yaml#/collections/test~1collection~1with-journals/schema,
            to_resource: test://example/schema.json,
        },
    ],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"test/collection":{"expectPubId":"00:11:22:33:44:55:66:77","key":["/key/1","/key/0"],"projections":{"field_a":{"location":"/a/a","partition":true},"field_b":{"location":"/b/b","partition":false}},"schema":"schema.json"},"test/collection-no-schema":{"key":["/key"]},"test/collection-with-write-and-inferred-read":{"key":["/key/1","/key/0"],"readSchema":{"allOf":[{"$ref":"flow://write-schema"},{"$ref":"flow://inferred-schema"}]},"writeSchema":"schema.json"},"test/collection-with-write-and-read":{"key":["/key/1","/key/0"],"readSchema":"schema.json#/properties/a","writeSchema":"schema.json"},"test/collection/with-journals":{"journals":{"fragments":{"compressionCodec":"GZIP_OFFLOAD_DECOMPRESSION","flushInterval":"15m","length":12345,"retention":"320h"}},"key":["/a/key"],"schema":"schema.json#foobar"}}},
        },
        Resource {
            resource: test://example/schema.json,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"$anchor":"foobar","properties":{"a":{"properties":{"a":{"type":"string"}},"type":"object"},"b":{"properties":{"b":{"type":"string"}},"type":"object"},"key":{"items":{"type":"string"},"minItems":2,"type":"array"}},"type":"object"},
        },
    ],
}
