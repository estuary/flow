---
source: crates/sources/src/scenarios/mod.rs
expression: tables
---
Sources {
    capture_bindings: [],
    captures: [],
    collections: [
        Collection {
            scope: test://example/catalog.yaml#/collections/test~1collection,
            collection: test/collection,
            spec: {
              "schema": false,
              "key": [
                "/key/1",
                "/key/0"
              ]
            },
            schema: test://example/schema.json#foobar,
        },
        Collection {
            scope: test://example/catalog.yaml#/collections/test~1collection~1with-journals,
            collection: test/collection/with-journals,
            spec: {
              "schema": false,
              "key": [
                "/a/key"
              ],
              "journals": {
                "fragments": {
                  "length": 12345,
                  "compressionCodec": "GZIP_OFFLOAD_DECOMPRESSION",
                  "retention": "13days 8h",
                  "flushInterval": "15m"
                }
              }
            },
            schema: test://example/schema.json#foobar,
        },
    ],
    derivations: [],
    errors: [],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/schema.json,
        },
    ],
    imports: [
        Import {
            scope: test://example/catalog.yaml#/collections/test~1collection~1with-journals/schema,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/schema.json,
        },
        Import {
            scope: test://example/catalog.yaml#/collections/test~1collection/schema,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/schema.json,
        },
    ],
    materialization_bindings: [],
    materializations: [],
    npm_dependencies: [],
    projections: [
        Projection {
            scope: test://example/catalog.yaml#/collections/test~1collection/projections/field_a,
            collection: test/collection,
            field: field_a,
            spec: {
              "location": "/a/a",
              "partition": true
            },
        },
        Projection {
            scope: test://example/catalog.yaml#/collections/test~1collection/projections/field_b,
            collection: test/collection,
            field: field_b,
            spec: {
              "location": "/b/b",
              "partition": false
            },
        },
        Projection {
            scope: test://example/catalog.yaml#/collections/test~1collection/projections/flow_document,
            collection: test/collection,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: test://example/catalog.yaml#/collections/test~1collection~1with-journals/projections/flow_document,
            collection: test/collection/with-journals,
            field: flow_document,
            spec: "",
        },
    ],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"test/collection":{"key":["/key/1","/key/0"],"projections":{"field_a":{"location":"/a/a","partition":true},"field_b":{"location":"/b/b","partition":false}},"schema":"schema.json#foobar"},"test/collection/with-journals":{"journals":{"fragments":{"compressionCodec":"GZIP_OFFLOAD_DECOMPRESSION","flushInterval":"15m","length":12345,"retention":"320h"}},"key":["/a/key"],"schema":"schema.json#foobar"}}},
        },
        Resource {
            resource: test://example/schema.json,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"$anchor":"foobar","properties":{"a":{"properties":{"a":{"type":"string"}},"type":"object"},"b":{"properties":{"b":{"type":"string"}},"type":"object"},"key":{"items":{"type":"string"},"minItems":2,"type":"array"}},"type":"object"},
        },
    ],
    schema_docs: [
        SchemaDoc {
            schema: test://example/schema.json,
            dom: {
              "$anchor": "foobar",
              "properties": {
                "a": {
                  "properties": {
                    "a": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "b": {
                  "properties": {
                    "b": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "key": {
                  "items": {
                    "type": "string"
                  },
                  "minItems": 2,
                  "type": "array"
                }
              },
              "type": "object"
            },
        },
    ],
    storage_mappings: [],
    test_steps: [],
    transforms: [],
}
