---
source: crates/sources/src/scenarios/mod.rs
assertion_line: 27
expression: tables
---
Tables {
    capture_bindings: [],
    captures: [],
    collections: [
        Collection {
            scope: test://example/catalog.yaml#/collections/d1~1collection,
            collection: d1/collection,
            schema: test://example/a-schema.json,
            key: ["/d1-key"],
            journals: {"fragments":{}},
        },
        Collection {
            scope: test://example/catalog.yaml#/collections/d2~1collection,
            collection: d2/collection,
            schema: test://example/a-schema.json,
            key: ["/d2-key"],
            journals: {"fragments":{"compressionCodec":"ZSTANDARD","flushInterval":"15m"}},
        },
    ],
    derivations: [
        Derivation {
            scope: test://example/catalog.yaml#/collections/d1~1collection/derivation,
            derivation: d1/collection,
            register_schema: test://example/reg-schema.json#/$defs/qib,
            register_initial: {"initial":["value",32]},
            shards: {},
        },
        Derivation {
            scope: test://example/catalog.yaml#/collections/d2~1collection/derivation,
            derivation: d2/collection,
            register_schema: test://example/catalog.yaml?ptr=/collections/d2~1collection/derivation/register/schema,
            register_initial: null,
            shards: {"disable":true,"minTxnDuration":"15s","maxTxnDuration":"6m","hotStandbys":2,"ringBufferSize":12345,"readChannelSize":6789},
        },
    ],
    errors: [],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/a-schema.json,
        },
        Fetch {
            depth: 2,
            resource: test://example/alt-schema.json,
        },
        Fetch {
            depth: 2,
            resource: test://example/catalog.ts,
        },
        Fetch {
            depth: 2,
            resource: test://example/reg-schema.json,
        },
    ],
    imports: [
        Import {
            scope: test://example/catalog.yaml#/collections/d2~1collection/schema,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/a-schema.json,
        },
        Import {
            scope: test://example/catalog.yaml#/collections/d1~1collection/schema,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/a-schema.json,
        },
        Import {
            scope: test://example/catalog.yaml#/collections/d1~1collection/derivation/transform/some-name/source/schema,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/alt-schema.json,
        },
        Import {
            scope: test://example/catalog.yaml,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.ts,
        },
        Import {
            scope: test://example/catalog.yaml#/collections/d2~1collection/derivation/register/schema,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.yaml?ptr=/collections/d2~1collection/derivation/register/schema,
        },
        Import {
            scope: test://example/catalog.yaml#/collections/d1~1collection/derivation/register/schema,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/reg-schema.json,
        },
    ],
    materialization_bindings: [],
    materializations: [],
    named_schemas: [],
    npm_dependencies: [],
    projections: [],
    resources: [
        Resource {
            resource: test://example/a-schema.json,
            content_type: "application/vnd.flow.jsonSchema+json",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/alt-schema.json,
            content_type: "application/vnd.flow.jsonSchema+json",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/catalog.ts,
            content_type: "application/vnd.flow.typescript+text",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "application/vnd.flow.catalog+yaml",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/catalog.yaml?ptr=/collections/d2~1collection/derivation/register/schema,
            content_type: "application/vnd.flow.jsonSchema+json",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/reg-schema.json,
            content_type: "application/vnd.flow.jsonSchema+json",
            content: ".. binary ..",
        },
    ],
    schema_docs: [
        SchemaDoc {
            schema: test://example/a-schema.json,
            dom: true,
        },
        SchemaDoc {
            schema: test://example/alt-schema.json,
            dom: {"$anchor":"foobar","properties":{"d1-key":{"type":"string"},"key":{"description":"the key description","title":"the key title","type":"integer"},"moar":{"type":"number"},"shuffle":{"type":"integer"}},"type":"object"},
        },
        SchemaDoc {
            schema: test://example/catalog.yaml?ptr=/collections/d2~1collection/derivation/register/schema,
            dom: true,
        },
        SchemaDoc {
            schema: test://example/reg-schema.json,
            dom: {"$defs":{"qib":true}},
        },
    ],
    storage_mappings: [],
    test_steps: [],
    transforms: [
        Transform {
            scope: test://example/catalog.yaml#/collections/d1~1collection/derivation/transform/some-name,
            derivation: d1/collection,
            priority: 32,
            publish_lambda: "typescript",
            read_delay_seconds: 3600,
            shuffle_key: ["/shuffle","/key"],
            shuffle_lambda: NULL,
            source_collection: src/collection,
            source_partitions: {"include":{"a_field":["foo",42]},"exclude":{"other_field":[false]}},
            source_schema: test://example/alt-schema.json#foobar,
            transform: some-name,
            update_lambda: "typescript",
        },
        Transform {
            scope: test://example/catalog.yaml#/collections/d2~1collection/derivation/transform/do-the-thing,
            derivation: d2/collection,
            priority: 0,
            publish_lambda: NULL,
            read_delay_seconds: NULL,
            shuffle_key: NULL,
            shuffle_lambda: NULL,
            source_collection: src/collection,
            source_partitions: NULL,
            source_schema: NULL,
            transform: do-the-thing,
            update_lambda: {"remote":"https://example/api"},
        },
    ],
}
