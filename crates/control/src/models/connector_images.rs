use chrono::{DateTime, Utc};
use models::Object;
use serde::{Deserialize, Serialize};
use sqlx::FromRow;

use crate::models::connectors::Connector;
use crate::models::id::Id;
use crate::models::names::CatalogName;

/// A ConnectorImage is a specific version of a Connector.
///
/// A `ConnectorImage` is a Rust representation of the Postgres database
/// metadata about a specific image.
#[derive(Debug, Deserialize, FromRow, Serialize)]
pub struct ConnectorImage {
    /// The Connector to which this image belongs to.
    pub connector_id: Id<Connector>,
    /// When this record was created.
    pub created_at: DateTime<Utc>,
    /// Primary key for this record.
    pub id: Id<ConnectorImage>,
    /// The full name to this image, including registry. Eg. `ghcr.io/estuary/source-hello-world`.
    pub name: String,
    /// The full sha256 sum which uniquely identifies this image.
    pub digest: String,
    /// The specific tag we are exposing as canonical for this image.
    pub tag: String,
    /// When this record was last updated.
    pub updated_at: DateTime<Utc>,
}

impl ConnectorImage {
    /// Returns the name with tag.
    ///
    /// eg. `ghcr.io/estuary/source-hello-world:01fb856`
    pub fn full_name(&self) -> String {
        format!("{}:{}", self.name, self.tag)
    }

    /// Returns the fully resolved version of this image from the path and the digest.
    ///
    /// eg. `ghcr.io/estuary/source-hello-world@sha256:15751ba960870e5ba233ebfe9663fe8a236c8ce213b43fbf4cccc4e485594600`
    pub fn pinned_version(&self) -> String {
        format!("{}@sha256:{}", self.name, self.digest)
    }
}

/// `NewConnectorImage` represents the data required to insert a new
/// `ConnectorImage`, with remaining fields from `ConnectorImage` generated by
/// Postgres.
#[derive(Debug, Deserialize, FromRow, Serialize)]
pub struct NewConnectorImage {
    pub connector_id: Id<Connector>,
    pub name: String,
    pub digest: String,
    pub tag: String,
}

#[derive(Debug, Deserialize)]
pub struct NewDiscoveredCatalog {
    /// The desired name of the Capture. This is used to generate all the
    /// related resource names as well.
    pub name: CatalogName,
    /// The endpoint configuration for the source connector.
    pub config: Object,
}

impl NewDiscoveredCatalog {
    pub fn discovery_options(&self) -> Result<DiscoveryOptions, anyhow::Error> {
        // TODO: replace this with real validations.
        let (prefix, name) = self
            .name
            .split_once('/')
            .ok_or_else(|| anyhow::anyhow!("invalid name"))?;

        Ok(DiscoveryOptions {
            capture_name: CatalogName::new(name),
            catalog_prefix: CatalogName::new(prefix),
        })
    }
}

/// Settings for controlling names generated as part of the discovered catalog.
pub struct DiscoveryOptions {
    /// The name given to the generated capture itself. eg. `anvils` in `acmeCo/anvils`
    pub capture_name: CatalogName,
    /// The prefix used for named catalog entities. eg. `acmeCo` in `acmeCo/anvils`
    pub catalog_prefix: CatalogName,
}
