use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use sqlx::FromRow;

use crate::models::Id;

/// Accounts are the owners of resources and the actors performing actions
/// within the system. An Account may represent a human, a company, or an
/// automated process.
///
/// An `Account` is a Rust representation of the Postgres database understanding
/// of the account.
#[derive(Clone, Debug, Deserialize, FromRow, Serialize)]
pub struct Account {
    /// When this record was created.
    pub created_at: DateTime<Utc>,
    /// A freeform representation of the name. eg. "Wiley Coyote" or "Acme Anvil Corp."
    pub display_name: String,
    /// An email address to contact the account owner.
    pub email: String,
    /// Primary key for this record.
    pub id: Id,
    /// The catalog name for this account. Eg. "wiley" or "acmeCo"
    pub name: String,
    /// A case-folded, unicode normalized version of the catalog name. This is
    /// used to ensure that accounts have _functionally_ unique names, while
    /// always deferring to `name` for display purposes.
    pub unique_name: String,
    /// When this record was last updated.
    pub updated_at: DateTime<Utc>,
}

/// NewAccount represents the data required to insert a new Account, with
/// remaining fields from `Account` generated by Postgres.
#[derive(Debug, Deserialize, FromRow, Serialize)]
pub struct NewAccount {
    /// A freeform representation of the name. eg. "Wiley Coyote" or "Acme Anvil Corp."
    pub display_name: String,
    /// An email address to contact the account owner.
    pub email: String,
    /// A raw representation of the catalog name for this account. Eg. "wiley" or "acmeCo"
    pub name: String,
}
