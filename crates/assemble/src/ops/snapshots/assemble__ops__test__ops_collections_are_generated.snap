---
source: crates/assemble/src/ops/mod.rs
expression: "&tables"
---
Sources {
    capture_bindings: [],
    captures: [
        Capture {
            scope: builtin://flow/test-cap.flow.yaml#/collections/acmeCo~1foo,
            capture: acmeCo/foo,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "foo/bar",
                  "config": {}
                }
              },
              "bindings": []
            },
            endpoint_config: NULL,
        },
        Capture {
            scope: builtin://flow/test-cap.flow.yaml#/collections/shamazon~1bar,
            capture: shamazon/bar,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "foo/bar",
                  "config": {}
                }
              },
              "bindings": []
            },
            endpoint_config: NULL,
        },
    ],
    collections: [
        Collection {
            scope: test://foo.bar/collection,
            collection: ops/acmeCo/logs,
            spec: {
              "schema": true,
              "key": [
                "/not/a/real/key"
              ]
            },
            schema: test://foo.bar/schema,
        },
        Collection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/acmeCo/stats,
            spec: {
              "schema": false,
              "key": [
                "/shard/name",
                "/shard/keyBegin",
                "/shard/rClockBegin",
                "/ts"
              ]
            },
            schema: builtin://flow/ops-stats-schema.json,
        },
        Collection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/gooble/logs,
            spec: {
              "schema": false,
              "key": [
                "/shard/name",
                "/shard/keyBegin",
                "/shard/rClockBegin",
                "/ts"
              ]
            },
            schema: builtin://flow/ops-log-schema.json,
        },
        Collection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/gooble/stats,
            spec: {
              "schema": false,
              "key": [
                "/shard/name",
                "/shard/keyBegin",
                "/shard/rClockBegin",
                "/ts"
              ]
            },
            schema: builtin://flow/ops-stats-schema.json,
        },
        Collection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/justme/logs,
            spec: {
              "schema": false,
              "key": [
                "/shard/name",
                "/shard/keyBegin",
                "/shard/rClockBegin",
                "/ts"
              ]
            },
            schema: builtin://flow/ops-log-schema.json,
        },
        Collection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/justme/stats,
            spec: {
              "schema": false,
              "key": [
                "/shard/name",
                "/shard/keyBegin",
                "/shard/rClockBegin",
                "/ts"
              ]
            },
            schema: builtin://flow/ops-stats-schema.json,
        },
        Collection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/shamazon/logs,
            spec: {
              "schema": false,
              "key": [
                "/shard/name",
                "/shard/keyBegin",
                "/shard/rClockBegin",
                "/ts"
              ]
            },
            schema: builtin://flow/ops-log-schema.json,
        },
        Collection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/shamazon/stats,
            spec: {
              "schema": false,
              "key": [
                "/shard/name",
                "/shard/keyBegin",
                "/shard/rClockBegin",
                "/ts"
              ]
            },
            schema: builtin://flow/ops-stats-schema.json,
        },
    ],
    derivations: [
        Derivation {
            scope: builtin://flow/test-der.flow.yaml#/collections/acmeCo~1tnt,
            derivation: acmeCo/tnt,
            spec: {
              "transform": {}
            },
            register_schema: builtin://flow/test-der.flow.yaml?ptr=/collections/acmeCo~1tnt/derivation/register/schema,
            typescript_module: NULL,
        },
        Derivation {
            scope: builtin://flow/test-der.flow.yaml#/collections/gooble~1ads,
            derivation: gooble/ads,
            spec: {
              "transform": {}
            },
            register_schema: builtin://flow/test-der.flow.yaml?ptr=/collections/shamazon~1bar/derivation/register/schema,
            typescript_module: NULL,
        },
    ],
    errors: [],
    fetches: [],
    imports: [
        Import {
            scope: builtin://flow/ops-log-schema.json,
            from_resource: builtin://flow/ops-log-schema.json,
            to_resource: builtin://flow/ops-shard-schema.json,
        },
        Import {
            scope: builtin://flow/ops-stats-schema.json,
            from_resource: builtin://flow/ops-stats-schema.json,
            to_resource: builtin://flow/ops-shard-schema.json,
        },
    ],
    materialization_bindings: [],
    materializations: [
        Materialization {
            scope: builtin://flow/test-mat.flow.yaml#/collections/justme,
            materialization: justme,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "foo/bar",
                  "config": {}
                }
              },
              "bindings": []
            },
            endpoint_config: NULL,
        },
    ],
    npm_dependencies: [],
    projections: [
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/acmeCo/stats,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/acmeCo/stats,
            field: kind,
            spec: {
              "location": "/shard/kind",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/acmeCo/stats,
            field: name,
            spec: {
              "location": "/shard/name",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/gooble/logs,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/gooble/logs,
            field: kind,
            spec: {
              "location": "/shard/kind",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/gooble/logs,
            field: name,
            spec: {
              "location": "/shard/name",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/gooble/stats,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/gooble/stats,
            field: kind,
            spec: {
              "location": "/shard/kind",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/gooble/stats,
            field: name,
            spec: {
              "location": "/shard/name",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/justme/logs,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/justme/logs,
            field: kind,
            spec: {
              "location": "/shard/kind",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/justme/logs,
            field: name,
            spec: {
              "location": "/shard/name",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/justme/stats,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/justme/stats,
            field: kind,
            spec: {
              "location": "/shard/kind",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/justme/stats,
            field: name,
            spec: {
              "location": "/shard/name",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/shamazon/logs,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/shamazon/logs,
            field: kind,
            spec: {
              "location": "/shard/kind",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/shamazon/logs,
            field: name,
            spec: {
              "location": "/shard/name",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/shamazon/stats,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/shamazon/stats,
            field: kind,
            spec: {
              "location": "/shard/kind",
              "partition": true
            },
        },
        Projection {
            scope: builtin://flow/ops/generated/collections,
            collection: ops/shamazon/stats,
            field: name,
            spec: {
              "location": "/shard/name",
              "partition": true
            },
        },
    ],
    resources: [
        Resource {
            resource: builtin://flow/ops-log-schema.json,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {
            
                "$schema": "https://json-schema.org/draft-07/schema",
                "title": "Flow task logs",
                "description": "Logs related to the processing of a Flow capture, derivation, or materialization",
                "type": "object",
                "properties": {
                    "shard": { "$ref": "ops-shard-schema.json" },
                    "ts": {
                        "description": "Timestamp corresponding to the start of the transaction",
                        "type": "string",
                        "format": "date-time"
                    },
                    "level": {
                        "enum": [
                            "debug",
                            "info",
                            "warn",
                            "error"
                        ]
                    },
                    "fields": {
                        "description": "Map of keys and values that are associated with this log entry.",
                        "type": "object",
                        "additionalProperties": true
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "shard",
                    "ts",
                    "level",
                    "message"
                ]
            
            },
        },
        Resource {
            resource: builtin://flow/ops-shard-schema.json,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {
            
                "$schema": "https://json-schema.org/draft-07/schema",
                "title": "Flow shard id",
                "description": "Identifies a specific shard of a task, which may be the source of a log message or metrics",
                "type": "object",
                "properties": {
                    "kind": {
                        "description": "The type of the catalog task",
                        "enum": [
                            "capture",
                            "derivation",
                            "materialization"
                        ]
                    },
                    "name": {
                        "description": "The name of the catalog task (without the task type prefix)",
                        "type": "string"
                    },
                    "keyBegin": {
                        "description": "The inclusive beginning of the shard's assigned key range",
                        "type": "string",
                        "pattern": "[0-9A-F]{8}"
                    },
                    "rClockBegin": {
                        "description": "The inclusive beginning of the shard's assigned rClock range",
                        "type": "string",
                        "pattern": "[0-9A-F]{8}"
                    }
                },
                "required": [
                    "kind",
                    "name",
                    "keyBegin",
                    "rClockBegin"
                ]
            },
        },
        Resource {
            resource: builtin://flow/ops-stats-schema.json,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {
                "$schema": "https://json-schema.org/draft-07/schema",
                "title": "Flow task stats",
                "description": "Statistics related to the processing of a Flow capture, derivation, or materialization",
                "type": "object",
                "properties": {
                    "shard": { "$ref": "ops-shard-schema.json" },
                    "ts": {
                        "description": "Timestamp corresponding to the start of the transaction",
                        "type": "string",
                        "format": "date-time"
                    },
                    "openSecondsTotal": {
                        "description": "Total time that the transaction was open before starting to commit",
                        "type": "number",
                        "reduce": {"strategy": "sum"}
                    },
                    "txnCount": {
                        "description": "Total number of transactions represented by this stats document",
                        "type": "integer",
                        "reduce": {"strategy": "sum"}
                    },
                    "capture": {
                        "description": "Capture stats, organized by collection. The keys of this object are the collection names, and the values are the stats for that collection.",
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                "right": {
                                    "description": "Documents fed into the combiner from the source",
                                    "$ref": "#/$defs/docsAndBytes"
                                },
                                "out": {
                                    "$ref": "#/$defs/docsAndBytes"
                                }
                            },
                            "reduce": {"strategy": "merge"}
                        },
                        "reduce": {"strategy": "merge"}
                    },
                    "materialize": {
                        "description": "A map of each binding source (collection name) to combiner stats for that binding",
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                "left": { "$ref": "#/$defs/docsAndBytes" },
                                "right": { "$ref": "#/$defs/docsAndBytes" },
                                "out": { "$ref": "#/$defs/docsAndBytes" }
                            },
                            "reduce": {"strategy": "merge"}
                        },
                        "reduce": {"strategy": "merge"}
                    },
                    "derive": {
                        "type": "object",
                        "properties": {
                            "transforms": {
                                "description": "A map of each transform (transform name, not collection name) to stats for that transform",
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/$defs/transformStats"
                                },
                                "reduce": {"strategy": "merge"}
                            },
                            "registers": {"$ref": "#/$defs/registerStats"},
                            "out": { "$ref": "#/$defs/docsAndBytes" }
                        },
                        "required": ["transforms", "out"],
                        "reduce": {"strategy": "merge"}
                    }
                },
                "reduce": {"strategy": "merge"},
                "required": ["shard", "ts", "txnCount", "openSecondsTotal"],
                "oneOf": [
                    {"required": ["capture"]},
                    {"required": ["derive"]},
                    {"required": ["materialize"]}
                ],
                "$defs": {
                    "docsAndBytes": {
                        "type": "object",
                        "properties": {
                            "docsTotal": {
                                "description": "Total number of documents",
                                "type": "integer",
                                "reduce": {"strategy": "sum"}
                            },
                            "bytesTotal": {
                                "description": "Total number of bytes representing the JSON encoded documents",
                                "type": "integer",
                                "reduce": {"strategy": "sum"}
                            }
                        },
                        "reduce": {"strategy": "merge"},
                        "required": [ "docsTotal", "bytesTotal" ]
                    },
                    "registerStats": {
                        "type": "object",
                        "properties": {
                            "createdTotal": {
                                "description": "The total number of new register keys that were created",
                                "type": "integer",
                                "reduce": {"strategy": "sum"}
                            }
                        },
                        "required": ["createdTotal"],
                        "reduce": {"strategy": "merge"}
                    },
                    "invokeStats": {
                        "type": "object",
                        "properties": {
                            "out": {"$ref": "#/$defs/docsAndBytes"},
                            "secondsTotal": {"type": "number"}
                        },
                        "required": ["out", "secondsTotal"],
                        "reduce": {"strategy": "merge"}
                    },
                    "transformStats": {
                        "description": "Stats for a specific transform of a derivation, which will have an update, publish, or both.",
                        "type": "object",
                        "properties": {
                            "input": {
                                "description": "The input documents that were fed into this transform.",
                                "$ref": "#/$defs/docsAndBytes"
                            },
                            "update": {
                                "description": "The outputs from update lambda invocations, which were combined into registers.",
                                "$ref": "#/$defs/invokeStats"
                            },
                            "publish": {
                                "description": "The outputs from publish lambda invocations.",
                                "$ref": "#/$defs/invokeStats"
                            }
                        },
                        "required": ["input"],
                        "anyOf": [
                            {"required": ["update"]},
                            {"required": ["publish"]}
                        ],
                        "reduce": {"strategy": "merge"}
                    }
                }
            },
        },
    ],
    schema_docs: [
        SchemaDoc {
            schema: builtin://flow/ops-log-schema.json,
            dom: {
              "$schema": "https://json-schema.org/draft-07/schema",
              "description": "Logs related to the processing of a Flow capture, derivation, or materialization",
              "properties": {
                "fields": {
                  "additionalProperties": true,
                  "description": "Map of keys and values that are associated with this log entry.",
                  "type": "object"
                },
                "level": {
                  "enum": [
                    "debug",
                    "info",
                    "warn",
                    "error"
                  ]
                },
                "message": {
                  "type": "string"
                },
                "shard": {
                  "$ref": "ops-shard-schema.json"
                },
                "ts": {
                  "description": "Timestamp corresponding to the start of the transaction",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "shard",
                "ts",
                "level",
                "message"
              ],
              "title": "Flow task logs",
              "type": "object"
            },
        },
        SchemaDoc {
            schema: builtin://flow/ops-shard-schema.json,
            dom: {
              "$schema": "https://json-schema.org/draft-07/schema",
              "description": "Identifies a specific shard of a task, which may be the source of a log message or metrics",
              "properties": {
                "keyBegin": {
                  "description": "The inclusive beginning of the shard's assigned key range",
                  "pattern": "[0-9A-F]{8}",
                  "type": "string"
                },
                "kind": {
                  "description": "The type of the catalog task",
                  "enum": [
                    "capture",
                    "derivation",
                    "materialization"
                  ]
                },
                "name": {
                  "description": "The name of the catalog task (without the task type prefix)",
                  "type": "string"
                },
                "rClockBegin": {
                  "description": "The inclusive beginning of the shard's assigned rClock range",
                  "pattern": "[0-9A-F]{8}",
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "name",
                "keyBegin",
                "rClockBegin"
              ],
              "title": "Flow shard id",
              "type": "object"
            },
        },
        SchemaDoc {
            schema: builtin://flow/ops-stats-schema.json,
            dom: {
              "$defs": {
                "docsAndBytes": {
                  "properties": {
                    "bytesTotal": {
                      "description": "Total number of bytes representing the JSON encoded documents",
                      "reduce": {
                        "strategy": "sum"
                      },
                      "type": "integer"
                    },
                    "docsTotal": {
                      "description": "Total number of documents",
                      "reduce": {
                        "strategy": "sum"
                      },
                      "type": "integer"
                    }
                  },
                  "reduce": {
                    "strategy": "merge"
                  },
                  "required": [
                    "docsTotal",
                    "bytesTotal"
                  ],
                  "type": "object"
                },
                "invokeStats": {
                  "properties": {
                    "out": {
                      "$ref": "#/$defs/docsAndBytes"
                    },
                    "secondsTotal": {
                      "type": "number"
                    }
                  },
                  "reduce": {
                    "strategy": "merge"
                  },
                  "required": [
                    "out",
                    "secondsTotal"
                  ],
                  "type": "object"
                },
                "registerStats": {
                  "properties": {
                    "createdTotal": {
                      "description": "The total number of new register keys that were created",
                      "reduce": {
                        "strategy": "sum"
                      },
                      "type": "integer"
                    }
                  },
                  "reduce": {
                    "strategy": "merge"
                  },
                  "required": [
                    "createdTotal"
                  ],
                  "type": "object"
                },
                "transformStats": {
                  "anyOf": [
                    {
                      "required": [
                        "update"
                      ]
                    },
                    {
                      "required": [
                        "publish"
                      ]
                    }
                  ],
                  "description": "Stats for a specific transform of a derivation, which will have an update, publish, or both.",
                  "properties": {
                    "input": {
                      "$ref": "#/$defs/docsAndBytes",
                      "description": "The input documents that were fed into this transform."
                    },
                    "publish": {
                      "$ref": "#/$defs/invokeStats",
                      "description": "The outputs from publish lambda invocations."
                    },
                    "update": {
                      "$ref": "#/$defs/invokeStats",
                      "description": "The outputs from update lambda invocations, which were combined into registers."
                    }
                  },
                  "reduce": {
                    "strategy": "merge"
                  },
                  "required": [
                    "input"
                  ],
                  "type": "object"
                }
              },
              "$schema": "https://json-schema.org/draft-07/schema",
              "description": "Statistics related to the processing of a Flow capture, derivation, or materialization",
              "oneOf": [
                {
                  "required": [
                    "capture"
                  ]
                },
                {
                  "required": [
                    "derive"
                  ]
                },
                {
                  "required": [
                    "materialize"
                  ]
                }
              ],
              "properties": {
                "capture": {
                  "additionalProperties": {
                    "properties": {
                      "out": {
                        "$ref": "#/$defs/docsAndBytes"
                      },
                      "right": {
                        "$ref": "#/$defs/docsAndBytes",
                        "description": "Documents fed into the combiner from the source"
                      }
                    },
                    "reduce": {
                      "strategy": "merge"
                    },
                    "type": "object"
                  },
                  "description": "Capture stats, organized by collection. The keys of this object are the collection names, and the values are the stats for that collection.",
                  "reduce": {
                    "strategy": "merge"
                  },
                  "type": "object"
                },
                "derive": {
                  "properties": {
                    "out": {
                      "$ref": "#/$defs/docsAndBytes"
                    },
                    "registers": {
                      "$ref": "#/$defs/registerStats"
                    },
                    "transforms": {
                      "additionalProperties": {
                        "$ref": "#/$defs/transformStats"
                      },
                      "description": "A map of each transform (transform name, not collection name) to stats for that transform",
                      "reduce": {
                        "strategy": "merge"
                      },
                      "type": "object"
                    }
                  },
                  "reduce": {
                    "strategy": "merge"
                  },
                  "required": [
                    "transforms",
                    "out"
                  ],
                  "type": "object"
                },
                "materialize": {
                  "additionalProperties": {
                    "properties": {
                      "left": {
                        "$ref": "#/$defs/docsAndBytes"
                      },
                      "out": {
                        "$ref": "#/$defs/docsAndBytes"
                      },
                      "right": {
                        "$ref": "#/$defs/docsAndBytes"
                      }
                    },
                    "reduce": {
                      "strategy": "merge"
                    },
                    "type": "object"
                  },
                  "description": "A map of each binding source (collection name) to combiner stats for that binding",
                  "reduce": {
                    "strategy": "merge"
                  },
                  "type": "object"
                },
                "openSecondsTotal": {
                  "description": "Total time that the transaction was open before starting to commit",
                  "reduce": {
                    "strategy": "sum"
                  },
                  "type": "number"
                },
                "shard": {
                  "$ref": "ops-shard-schema.json"
                },
                "ts": {
                  "description": "Timestamp corresponding to the start of the transaction",
                  "format": "date-time",
                  "type": "string"
                },
                "txnCount": {
                  "description": "Total number of transactions represented by this stats document",
                  "reduce": {
                    "strategy": "sum"
                  },
                  "type": "integer"
                }
              },
              "reduce": {
                "strategy": "merge"
              },
              "required": [
                "shard",
                "ts",
                "txnCount",
                "openSecondsTotal"
              ],
              "title": "Flow task stats",
              "type": "object"
            },
        },
    ],
    storage_mappings: [],
    test_steps: [],
    transforms: [],
}
