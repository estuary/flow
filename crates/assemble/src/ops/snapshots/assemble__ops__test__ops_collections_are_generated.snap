---
source: crates/assemble/src/ops/mod.rs
expression: "&tables"
---
Sources {
    captures: [
        Capture {
            scope: builtin://flow/test-cap.flow.yaml#/collections/acmeCo~1foo,
            capture: acmeCo/foo,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "foo/bar",
                  "config": {}
                }
              },
              "bindings": []
            },
        },
    ],
    collections: [
        Collection {
            scope: test://foo.bar/collection,
            collection: ops.test-dataplane/logs,
            spec: {
              "schema": "test://foo.bar/schema",
              "key": [
                "/not/a/real/key"
              ]
            },
        },
        Collection {
            scope: builtin://flow/ops.yaml#/collections/ops.us-central1.v1/logs,
            collection: ops.us-central1.v1/logs,
            spec: {
              "schema": "builtin://flow/ops-catalog/ops-log-schema.json",
              "key": [
                "/shard/name",
                "/shard/keyBegin",
                "/shard/rClockBegin",
                "/ts"
              ],
              "projections": {
                "kind": {
                  "location": "/shard/kind",
                  "partition": true
                },
                "name": {
                  "location": "/shard/name",
                  "partition": true
                }
              }
            },
        },
        Collection {
            scope: builtin://flow/ops.yaml#/collections/ops.us-central1.v1/stats,
            collection: ops.us-central1.v1/stats,
            spec: {
              "schema": "builtin://flow/ops-catalog/ops-stats-schema.json",
              "key": [
                "/shard/name",
                "/shard/keyBegin",
                "/shard/rClockBegin",
                "/ts"
              ],
              "projections": {
                "kind": {
                  "location": "/shard/kind",
                  "partition": true
                },
                "name": {
                  "location": "/shard/name",
                  "partition": true
                }
              }
            },
        },
    ],
    errors: [],
    fetches: [],
    imports: [
        Import {
            scope: builtin://flow/ops-catalog/ops-log-schema.json,
            to_resource: builtin://flow/ops-catalog/ops-shard-schema.json,
        },
        Import {
            scope: builtin://flow/ops-catalog/ops-stats-schema.json,
            to_resource: builtin://flow/ops-catalog/ops-shard-schema.json,
        },
        Import {
            scope: builtin://flow/ops.yaml#/collections/ops.us-central1.v1/logs/schema,
            to_resource: builtin://flow/ops-catalog/ops-log-schema.json,
        },
        Import {
            scope: builtin://flow/ops.yaml#/collections/ops.us-central1.v1/stats/schema,
            to_resource: builtin://flow/ops-catalog/ops-stats-schema.json,
        },
    ],
    materializations: [],
    resources: [
        Resource {
            resource: builtin://flow/ops-catalog/ops-log-schema.json,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {
              "$schema": "https://json-schema.org/draft-07/schema",
              "title": "Flow task logs",
              "description": "Logs related to the processing of a Flow capture, derivation, or materialization",
              "type": "object",
              "properties": {
                "shard": { "$ref": "ops-shard-schema.json" },
                "ts": {
                  "description": "Timestamp corresponding to the start of the transaction",
                  "type": "string",
                  "format": "date-time"
                },
                "level": {
                  "enum": [
                    "error",
                    "warn",
                    "info",
                    "debug",
                    "trace"
                  ]
                },
                "message": {
                  "type": "string"
                },
                "fields": {
                  "description": "Map of keys and values that are associated with this log entry.",
                  "type": "object"
                }
              },
              "required": [
                "shard",
                "ts",
                "level"
              ]
            },
        },
        Resource {
            resource: builtin://flow/ops-catalog/ops-shard-schema.json,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {
              "$schema": "https://json-schema.org/draft-07/schema",
              "title": "Flow shard id",
              "description": "Identifies a specific shard of a task, which may be the source of a log message or metrics",
              "type": "object",
              "properties": {
                "kind": {
                  "description": "The type of the catalog task",
                  "enum": [
                    "capture",
                    "derivation",
                    "materialization"
                  ]
                },
                "name": {
                  "description": "The name of the catalog task (without the task type prefix)",
                  "type": "string"
                },
                "keyBegin": {
                  "description": "The inclusive beginning of the shard's assigned key range",
                  "type": "string",
                  "pattern": "[0-9a-f]{8}"
                },
                "rClockBegin": {
                  "description": "The inclusive beginning of the shard's assigned rClock range",
                  "type": "string",
                  "pattern": "[0-9a-f]{8}"
                }
              },
              "required": [
                "kind",
                "name",
                "keyBegin",
                "rClockBegin"
              ]
            },
        },
        Resource {
            resource: builtin://flow/ops-catalog/ops-stats-schema.json,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {
              "$schema": "https://json-schema.org/draft-07/schema",
              "title": "Flow task stats",
              "description": "Statistics related to the processing of a Flow capture, derivation, or materialization",
              "type": "object",
              "properties": {
                "shard": { "$ref": "ops-shard-schema.json" },
                "ts": {
                  "description": "Timestamp corresponding to the start of the transaction",
                  "type": "string",
                  "format": "date-time"
                },
                "openSecondsTotal": {
                  "description": "Total time that the transaction was open before starting to commit",
                  "type": "number",
                  "reduce": { "strategy": "sum" }
                },
                "txnCount": {
                  "description": "Total number of transactions represented by this stats document",
                  "type": "integer",
                  "reduce": { "strategy": "sum" }
                },
                "capture": {
                  "description": "Capture stats, organized by collection. The keys of this object are the collection names, and the values are the stats for that collection.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "right": {
                        "description": "Documents fed into the combiner from the source",
                        "$ref": "#/$defs/docsAndBytes"
                      },
                      "out": {
                        "$ref": "#/$defs/docsAndBytes"
                      }
                    },
                    "reduce": { "strategy": "merge" }
                  },
                  "reduce": { "strategy": "merge" }
                },
                "materialize": {
                  "description": "A map of each binding source (collection name) to combiner stats for that binding",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "left": { "$ref": "#/$defs/docsAndBytes" },
                      "right": { "$ref": "#/$defs/docsAndBytes" },
                      "out": { "$ref": "#/$defs/docsAndBytes" }
                    },
                    "reduce": { "strategy": "merge" }
                  },
                  "reduce": { "strategy": "merge" }
                },
                "derive": {
                  "type": "object",
                  "properties": {
                    "transforms": {
                      "description": "A map of each transform (transform name, not collection name) to stats for that transform",
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/$defs/transformStats"
                      },
                      "reduce": { "strategy": "merge" }
                    },
                    "published": { "$ref": "#/$defs/docsAndBytes" },
                    "out": { "$ref": "#/$defs/docsAndBytes" }
                  },
                  "reduce": { "strategy": "merge" }
                }
              },
              "reduce": { "strategy": "merge" },
              "required": ["shard", "ts", "txnCount", "openSecondsTotal"],
              "oneOf": [
                { "required": ["capture"] },
                { "required": ["derive"] },
                { "required": ["materialize"] }
              ],
              "$defs": {
                "docsAndBytes": {
                  "type": "object",
                  "properties": {
                    "docsTotal": {
                      "description": "Total number of documents",
                      "type": "integer",
                      "default": 0,
                      "reduce": { "strategy": "sum" }
                    },
                    "bytesTotal": {
                      "description": "Total number of bytes representing the JSON encoded documents",
                      "type": "integer",
                      "default": 0,
                      "reduce": { "strategy": "sum" }
                    }
                  },
                  "reduce": { "strategy": "merge" },
                  "required": ["docsTotal", "bytesTotal"]
                },
                "transformStats": {
                  "description": "Stats for a specific transform of a derivation, which will have an update, publish, or both.",
                  "type": "object",
                  "properties": {
                    "source": {
                      "description": "The name of the collection that this transform sources from",
                      "type": "string"
                    },
                    "input": {
                      "description": "The input documents that were fed into this transform.",
                      "$ref": "#/$defs/docsAndBytes"
                    }
                  },
                  "required": ["input"],
                  "reduce": { "strategy": "merge" }
                }
              }
            },
        },
    ],
    storage_mappings: [],
    tests: [],
}
