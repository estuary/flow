---
source: crates/assemble/src/npm/scenario_test.rs
expression: intents
---
{
    ".eslintrc.js": IfNotExists:
    module.exports = {
      root: true,
      parser: '@typescript-eslint/parser',
      ignorePatterns: [
        // Don't lint already-built outputs.
        "dist",
        // Don't lint the NPM package directory.
        "node_modules",
        // Uncomment to skip linting of external sources.
        /* "flow_generated/external" */
      ],
      parserOptions: {
        tsconfigRootDir: __dirname,
        project: ['./tsconfig.json'],
      },
      plugins: ['@typescript-eslint'],
      extends: [
        // Core eslint recommendations.
        'eslint:recommended',
        // Disable eslint:recommend rules covered by the typescript linter plugin.
        'plugin:@typescript-eslint/eslint-recommended',
        // Enable recommend typescript rules.
        'plugin:@typescript-eslint/recommended',
        // Enable recommend typescript rules which require type information from `tsc`.
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
        // Disable rules from @typescript-eslint/eslint-plugin that conflict with prettier
        'prettier/@typescript-eslint',
        // Enable eslint-plugin-prettier and eslint-config-prettier.
        // This will display prettier errors as ESLint errors.
        // This must be last configuration in the extends array.
        'plugin:prettier/recommended'
      ],
      // Opt-in to several additional rules.
      rules:  {
        // Disable camel-case linting, as identifier names are often drawn from JSON-Schemas
        // which are outside of the author's control.
        "@typescript-eslint/camelcase": "off",
        // Allow variables prefixed with underscore to be unused.
        "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_.*" }],
        // Flow lambdas always return promises, but not all implementations need to be async.
        "@typescript-eslint/require-await": "off",
        // Require that created promises are used (await'd), and not silently dropped.
        "@typescript-eslint/no-floating-promises": "error",
        // Disallow uses of foo?.bar! (it's not possible to know that bar exists, since foo may not).
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        // Require functions returning Promise to be async. This avoids needing to handle a non-async
        // function which can technically throw an Error *OR* return a rejected Promise. With this
        // lint, a function can throw (if non-async) or reject (if async) but never both.
        "@typescript-eslint/promise-function-async": "error",
        // When adding two operands, each must be of type string or number, and cannot mix.
        "@typescript-eslint/restrict-plus-operands": ["error", { "checkCompoundAssignments": true }],
        // Switches over enum types should check all cases (or use explicit "default").
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        // Warn on superfluous checks of boolean types against boolean literals (if (foo: bool === true) {}).
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
        // Warn on conditionals which are always truthy or falsy.
        "@typescript-eslint/no-unnecessary-condition": "warn",
        // Warn on "for (let i = 0; i != arr.length; i++)" syntax instead of for-of "for(const i in arr)".
        "@typescript-eslint/prefer-for-of": "warn",
      },
    };
    ,
    ".prettierrc.js": IfNotExists:
    module.exports = {
      semi: true,
      trailingComma: "all",
      singleQuote: true,
      printWidth: 120,
      tabWidth: 4
    };
    ,
    "flow_generated/external/another/derivation.ts": Always:
    import { Some } from 'module';
    
    content();
    ,
    "flow_generated/external/remote/derivation.ts": Always:
    {"Remote":"Content"},
    "flow_generated/flow/main.ts": IfNotExists:
    #!/usr/bin/env node
    import { Server } from './server';
    
    function main(): void {
        if (!process.env.SOCKET_PATH) {
            throw new Error('SOCKET_PATH environment variable is required');
        }
        new Server(process.env.SOCKET_PATH).start();
    
        console.error('READY');
    }
    main();
    ,
    "flow_generated/flow/routes.ts": Always:
    
    // Document is a relaxed signature for a Flow document of any kind.
    export type Document = unknown;
    // Lambda is a relaxed signature implemented by all Flow transformation lambdas.
    export type Lambda = (source: Document, register?: Document, previous?: Document) => Document[];
    
    // Import derivation classes from their implementation modules.
    import { Derivation as anotherDerivation } from '../../flow_generated/external/another/derivation';
    import { Derivation as localDerivation } from '../../sub/module';
    import { Derivation as remoteDerivation } from '../../flow_generated/external/remote/derivation';
    
    // Build instances of each class, which will be bound to this module's router.
    const __anotherDerivation: anotherDerivation = new anotherDerivation();
    const __localDerivation: localDerivation = new localDerivation();
    const __remoteDerivation: remoteDerivation = new remoteDerivation();
    
    // Now build the router that's used for transformation lambda dispatch.
    const routes: { [path: string]: Lambda | undefined } = {
        '/derive/another/derivation/widget/Publish': __anotherDerivation.widgetPublish.bind(
            __anotherDerivation,
        ) as Lambda,
        '/derive/local/derivation/thereItIs/Update': __localDerivation.thereItIsUpdate.bind(
            __localDerivation,
        ) as Lambda,
        '/derive/local/derivation/unicode_lğmöm/Publish': __localDerivation.unicodeLğmömPublish.bind(
            __localDerivation,
        ) as Lambda,
        '/derive/local/derivation/whoot/Publish': __localDerivation.whootPublish.bind(
            __localDerivation,
        ) as Lambda,
        '/derive/remote/derivation/somethingSomething/Publish': __remoteDerivation.somethingSomethingPublish.bind(
            __remoteDerivation,
        ) as Lambda,
    };
    
    export { routes };
    ,
    "flow_generated/flow/server.ts": IfNotExists:
    import * as http from 'http';
    
    import { routes, Document, Lambda } from './routes';
    
    // Server serves transform lambda invocation requests, streaming source
    // collection documents, processing each via the designated transform, and
    // streaming resulting derived documents in response.
    export class Server {
        listenPath: string;
    
        constructor(listenPath: string) {
            this.listenPath = listenPath;
        }
    
        start(): void {
            const server = http.createServer(this._processStream.bind(this));
            server.on('error', console.error);
            server.listen({ path: this.listenPath });
        }
    
        _processStream(req: http.IncomingMessage, resp: http.ServerResponse): void {
            const malformed = (msg: string): void => {
                resp.setHeader('content-type', 'text/plain');
                resp.writeHead(400);
                resp.end(msg + '\n'); // Send message & EOF.
            };
    
            const path = req.url;
            if (path === undefined) {
                return malformed('expected url');
            }
    
            const lambda: Lambda | undefined = routes[path];
            if (lambda === undefined) {
                return malformed(`route ${path} is not defined`);
            }
    
            // Gather and join all data buffers.
            const chunks: string[] = [];
    
            req.on('data', (chunk: string) => {
                chunks.push(chunk);
            });
    
            req.on('end', () => {
                if (req.aborted) {
                    return;
                }
                // Join input chunks and parse into an array of invocation rows.
                const [sources, registers] = JSON.parse(chunks.join('')) as [Document[], Document[][] | undefined];
    
                // Map each row into a future which will return Document[].
                const futures = sources.map(async (source, index) => {
                    const previous = registers ? registers[index][0] : undefined;
                    const register = registers ? registers[index][1] : undefined;
    
                    return lambda(source, register || previous, previous);
                });
    
                // When all rows resolve, return the Document[][] to the caller.
                Promise.all(futures)
                    .then((rows: Document[][]) => {
                        const body = Buffer.from(JSON.stringify(rows), 'utf8');
                        resp.setHeader('Content-Length', body.length);
                        resp.setHeader('Content-Type', 'application/json');
                        resp.writeHead(200);
                        resp.end(body);
                    })
                    .catch((err: Error) => {
                        // Send |err| to peer, and log to console.
                        resp.setHeader('content-type', 'text/plain');
                        resp.writeHead(400);
                        resp.end(`${err.name}: (${err.message})\n`);
                        console.error(err);
                    });
            });
    
            req.on('error', (err) => {
                console.error(err);
            });
        }
    }
    ,
    "flow_generated/tsconfig-files.json": Always:
    {
      "files": [
        "../flow_generated/external/another/derivation.ts",
        "../flow_generated/external/remote/derivation.ts",
        "../flow_generated/flow/main.ts",
        "../flow_generated/flow/routes.ts",
        "../flow_generated/flow/server.ts",
        "../flow_generated/types/another/derivation.d.ts",
        "../flow_generated/types/local/derivation.d.ts",
        "../flow_generated/types/remote/derivation.d.ts",
        "../flow_generated/types/some/input.d.ts",
        "../flow_generated/types/unicode/lğmöm/name.d.ts",
        "../sub/module.ts"
      ]
    },
    "flow_generated/types/another/derivation.d.ts": Always:
    
    // Generated from collection schema sub/module.yaml?ptr=/collections/another~1derivation/schema.
    // Referenced from sub/module.yaml#/collections/another~1derivation.
    export type Document = {
        hello: number;
        world?: boolean;
    };
    
    
    // The collection has one schema, used for both reads and writes.
    export type SourceDocument = Document;
    export type OutputDocument = Document;
    
    // Generated from derivation register schema sub/module.yaml?ptr=/collections/another~1derivation/derivation/register/schema.
    // Referenced from sub/module.yaml#/collections/another~1derivation/derivation.
    export type Register = unknown;
    
    
    // Generated from transform widget as a re-export of collection remote/derivation.
    // Referenced from sub/module.yaml#/collections/another~1derivation/derivation/transform/widget."
    import { SourceDocument as WidgetSource } from "./../remote/derivation";
    export { SourceDocument as WidgetSource } from "./../remote/derivation";
    
    
    // Generated from derivation sub/module.yaml#/collections/another~1derivation/derivation.
    // Required to be implemented by sub/module.yaml?ptr=/collections/another~1derivation/derivation/typescript/module.
    export interface IDerivation {
        widgetPublish(
            source: WidgetSource,
            register: Register,
            previous: Register,
        ): OutputDocument[];
    }
    ,
    "flow_generated/types/local/derivation.d.ts": Always:
    
    // Generated from collection schema test://example/int-number.schema.
    // Referenced from sub/module.yaml#/collections/local~1derivation.
    export type Document = {
        int: number;
        "need's esc\"aping!"?: boolean;
        num: number;
    };
    
    
    // The collection has one schema, used for both reads and writes.
    export type SourceDocument = Document;
    export type OutputDocument = Document;
    
    // Generated from derivation register schema sub/module.yaml?ptr=/collections/local~1derivation/derivation/register/schema.
    // Referenced from sub/module.yaml#/collections/local~1derivation/derivation.
    export type Register = unknown;
    
    
    // Generated from self-referential transform thereItIs.
    // Referenced from sub/module.yaml#/collections/local~1derivation/derivation/transform/thereItIs."
    export type ThereItIsSource = SourceDocument;
    
    
    // Generated from transform unicode_lğmöm as a re-export of collection unicode/lğmöm/name.
    // Referenced from sub/module.yaml#/collections/local~1derivation/derivation/transform/unicode_l%C4%9Fm%C3%B6m."
    import { SourceDocument as UnicodeLğmömSource } from "./../unicode/lğmöm/name";
    export { SourceDocument as UnicodeLğmömSource } from "./../unicode/lğmöm/name";
    
    
    // Generated from transform whoot as a re-export of collection some/input.
    // Referenced from sub/module.yaml#/collections/local~1derivation/derivation/transform/whoot."
    import { SourceDocument as WhootSource } from "./../some/input";
    export { SourceDocument as WhootSource } from "./../some/input";
    
    
    // Generated from derivation sub/module.yaml#/collections/local~1derivation/derivation.
    // Required to be implemented by sub/module.ts.
    export interface IDerivation {
        thereItIsUpdate(
            source: ThereItIsSource,
        ): Register[];
        unicodeLğmömPublish(
            source: UnicodeLğmömSource,
            register: Register,
            previous: Register,
        ): OutputDocument[];
        whootPublish(
            source: WhootSource,
            register: Register,
            previous: Register,
        ): OutputDocument[];
    }
    ,
    "flow_generated/types/remote/derivation.d.ts": Always:
    
    // Generated from $anchor schema test://example/int-string.schema#AnAnchor."
    export type AnAnchor = {
        one: string;
        two?: number;
    };
    
    
    // Generated from $anchor schema test://example/int-string.schema#OtherAnchor."
    export type OtherAnchor = {
        anAnchor?: AnAnchor;
        three: string;
    };
    
    
    // Generated from collection read schema test://example/int-string.schema.
    // Referenced from test://example/external/module.yaml#/collections/remote~1derivation.
    export type SourceDocument = {
        anAnchor?: AnAnchor;
        int: number;
        str: string;
    };
    
    
    // Generated from collection write schema test://example/external/module.yaml?ptr=/collections/remote~1derivation/writeSchema.
    // Referenced from test://example/external/module.yaml#/collections/remote~1derivation.
    export type OutputDocument = /* This is probably an int-string. But we're not too sure and are using a weaker write schema. */ {
        str: /* Definitely a string here, we think? */ string;
    };
    
    
    // Generated from derivation register schema test://example/external/module.yaml?ptr=/collections/remote~1derivation/derivation/register/schema.
    // Referenced from test://example/external/module.yaml#/collections/remote~1derivation/derivation.
    export type Register = number;
    
    
    // Generated from transform somethingSomething as a re-export of collection some/input.
    // Referenced from test://example/external/module.yaml#/collections/remote~1derivation/derivation/transform/somethingSomething."
    import { SourceDocument as SomethingSomethingSource } from "./../some/input";
    export { SourceDocument as SomethingSomethingSource } from "./../some/input";
    
    
    // Generated from derivation test://example/external/module.yaml#/collections/remote~1derivation/derivation.
    // Required to be implemented by test://example/external/module.ts.
    export interface IDerivation {
        somethingSomethingPublish(
            source: SomethingSomethingSource,
            register: Register,
            previous: Register,
        ): OutputDocument[];
    }
    ,
    "flow_generated/types/some/input.d.ts": Always:
    
    // Generated from $anchor schema test://example/int-string.schema#AnAnchor."
    export type AnAnchor = {
        one: string;
        two?: number;
    };
    
    
    // Generated from $anchor schema test://example/int-string.schema#OtherAnchor."
    export type OtherAnchor = {
        anAnchor?: AnAnchor;
        three: string;
    };
    
    
    // Generated from collection schema test://example/int-string.schema.
    // Referenced from test://example/catalog.yaml#/collections/some~1input.
    export type Document = {
        anAnchor?: AnAnchor;
        int: number;
        str: string;
    };
    
    
    // The collection has one schema, used for both reads and writes.
    export type SourceDocument = Document;
    export type OutputDocument = Document;
    ,
    "flow_generated/types/unicode/lğmöm/name.d.ts": Always:
    
    // Generated from $anchor schema test://example/int-string.schema#AnAnchor."
    export type AnAnchor = {
        one: string;
        two?: number;
    };
    
    
    // Generated from $anchor schema test://example/int-string.schema#OtherAnchor."
    export type OtherAnchor = {
        anAnchor?: AnAnchor;
        three: string;
    };
    
    
    // Generated from collection schema test://example/int-string.schema.
    // Referenced from test://example/catalog.yaml#/collections/unicode~1l%C4%9Fm%C3%B6m~1name.
    export type Document = {
        anAnchor?: AnAnchor;
        int: number;
        str: string;
    };
    
    
    // The collection has one schema, used for both reads and writes.
    export type SourceDocument = Document;
    export type OutputDocument = Document;
    ,
    "package.json": Always:
    {
      "dependencies": {
        "barPkg": "v4.5.6",
        "fooPkg": "v1.2.3"
      },
      "bundledDependencies": [
        "barPkg",
        "fooPkg"
      ],
      "bin": "dist/flow_generated/flow/main.js",
      "description": "NodeJS runtime of an Estuary catalog",
      "devDependencies": {
        "@types/node": "^14.17.5",
        "@typescript-eslint/eslint-plugin": "^4.28.3",
        "@typescript-eslint/parser": "^4.28.3",
        "eslint": "^7.30.0",
        "eslint-config-prettier": "^7.2",
        "eslint-plugin-prettier": "^3.4.0",
        "prettier": "^2.3.2",
        "typescript": "^4.3.5"
      },
      "engines": {
        "node": ">=10.10"
      },
      "enginesStrict": true,
      "files": [
        "dist",
        "node_modules"
      ],
      "license": "UNLICENSED",
      "name": "catalog-js-transformer",
      "private": true,
      "scripts": {
        "clean": "rm -r dist/",
        "compile": "tsc",
        "develop": "node dist/flow_generated/flow/main.js",
        "lint": "cd flow_generated && eslint --fix $(jq '.files[]' -r tsconfig-files.json)"
      },
      "version": "0.0.0"
    }
    ,
    "sub/module.ts": IfNotExists:
    import { IDerivation, OutputDocument, Register, ThereItIsSource, UnicodeLğmömSource, WhootSource } from 'flow/local/derivation';
    
    // Implementation for derivation sub/module.yaml#/collections/local~1derivation/derivation.
    export class Derivation implements IDerivation {
        thereItIsUpdate(
            _source: ThereItIsSource,
        ): Register[] {
            throw new Error("Not implemented");
        }
        unicodeLğmömPublish(
            _source: UnicodeLğmömSource,
            _register: Register,
            _previous: Register,
        ): OutputDocument[] {
            throw new Error("Not implemented");
        }
        whootPublish(
            _source: WhootSource,
            _register: Register,
            _previous: Register,
        ): OutputDocument[] {
            throw new Error("Not implemented");
        }
    }
    ,
    "tsconfig.json": IfNotExists:
    {
    	"compilerOptions": {
    		"allowUnreachableCode": false,
    		"allowUnusedLabels": false,
    		"forceConsistentCasingInFileNames": true,
    		"incremental": true,
    		"lib": [
    			"ES2019",
    			// DOM is added here only to provide the `AbortController` types, which are
    			// used by other nodejs types. This fix was taken from
    			// (https://stackoverflow.com/a/59893096) to fix the Typescript compilation
    			// issue described in estuary/flow#279
    			"DOM"
    		],
    		"module": "commonjs",
    		"noEmitOnError": true,
    		"noFallthroughCasesInSwitch": true,
    		"noImplicitReturns": true,
    		"pretty": true,
    		"sourceMap": true,
    		"strict": true,
    		"target": "ES2019",
    		"rootDir": ".",
    		"outDir": "dist",
    		// Any non-relative modules are resolved against this base directory.
    		"baseUrl": ".",
    		"paths": {
    			// As a bit of sugar, resolve flow/* to flow_generated/types/*.
    			// These are types-only modules, and don't require runtime loading.
    			// Otherwise, a tool like `tspath` must be used to re-write absolute
    			// imports in TypeScript code into relative imports in produced JavaScript.
    			"flow/*": [
    				"flow_generated/types/*"
    			]
    		}
    	},
    	"extends": "./flow_generated/tsconfig-files"
    },
}
