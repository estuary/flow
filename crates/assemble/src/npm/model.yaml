test://example/catalog.yaml:
  import:
    - file:///package/sub/module.yaml
    - test://example/external/module.yaml

  collections:
    some/input:
      schema: test://example/int-string.schema
      key: [/int]

    unicode/lğmöm/name:
      schema: test://example/int-string.schema
      key: [/int]

file:///package/sub/module.yaml:
  collections:
    local/derivation:
      schema: test://example/int-number.schema
      key: [/int]

      derivation:
        typescript:
          module: module.ts
          npmDependencies:
            fooPkg: v1.2.3
        transform:
          whoot:
            source: { name: some/input }
            update: { lambda: { remote: http://example.com/update } }
            publish: { lambda: typescript }

          thereItIs:
            source: { name: local/derivation }
            update: { lambda: typescript }
            publish: { lambda: { remote: http://example.com/publish } }

          notTypeScript:
            source: { name: some/input }
            publish: { lambda: { remote: http://example.com/publish } }

          unicode_lğmöm:
            source: { name: unicode/lğmöm/name }
            publish: { lambda: typescript }

    another/derivation:
      schema:
        type: object
        properties:
          hello: { type: integer }
          world: { type: boolean }
        required: [hello]
      key: [/hello]

      derivation:
        typescript:
          module: |
            import { Some } from 'module';

            content();
        transform:
          widget:
            source: { name: remote/derivation }
            publish: { lambda: typescript }

test://example/external/module.yaml:
  collections:
    remote/derivation:
      writeSchema:
        type: object
        title: This is probably an int-string.
        description: But we're not too sure and are using a weaker write schema.
        properties:
          str:
            description: "Definitely a string here, we think?"
            type: string
        required: [str]
      readSchema: test://example/int-string.schema
      key: [/str]

      derivation:
        typescript:
          module: module.ts
          npmDependencies:
            barPkg: v4.5.6
        register:
          schema: { type: integer }
          initial: 42
        transform:
          somethingSomething:
            source: { name: some/input }
            publish: { lambda: typescript }

file:///package/sub/module.ts: { Local: Content }
test://example/external/module.ts: { Remote: Content }

test://example/int-string.schema:
  type: object
  properties:
    int: { type: integer }
    str: { type: string }
    anAnchor: { $ref: "#AnAnchor" }
  required: [int, str]

  $defs:
    anAnchor:
      $anchor: AnAnchor
      type: object
      properties:
        one: { type: string }
        two: { type: integer }
      required: [one]

    otherAnchor:
      $anchor: OtherAnchor
      type: object
      properties:
        anAnchor: { $ref: "#AnAnchor" }
        three: { type: string }
      required: [three]

test://example/int-number.schema:
  type: object
  properties:
    int: { type: integer }
    num: { type: number }
    need's esc"aping!: { type: boolean }
  required: [int, num]
