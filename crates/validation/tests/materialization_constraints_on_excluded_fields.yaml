test://example/catalog.yaml:
  collections:
    testing/constraints:
      schema:
        type: object
        properties:
          id: { type: string }
          naughty_u: { type: string }
          naughty_f: { type: string }
        required: [id]
      key: [/id]
  materializations:
    testing/db-views:
      endpoint:
        connector:
          image: an/image:test
          config: {}
      bindings:
        - # This binding is additionally backfilled, because it's currently live
          # but references a collection of a different (older) generation ID,
          # and this publication creates a new generation for testing/constraints.
          &the_binding
          source: testing/constraints
          resource:
            _meta: { path: [anything] }
            table: anything
          fields:
            recommended: true
            exclude:
              - naughty_u
              - naughty_f
              - not_found_and_removed

driver:
  dataPlanes:
    "1d:1d:1d:1d:1d:1d:1d:1d":
      default: true

  liveMaterializations:
    testing/db-views:
      controlId: "11:11:11:11:11:11:11:04"
      dataPlaneId: "1d:1d:1d:1d:1d:1d:1d:1d"
      lastPubId: "10:10:10:10:10:10:10:10"
      bindings: [*the_binding]

  materializations:
    testing/db-views:
      connectorType: IMAGE
      config:
        image: an/image:test
        config: {}
      bindings:
        - constraints:
            flow_document: { type: 1, reason: "location required" }
            id: { type: 1, reason: "location required" }
            naughty_u: { type: 6, reason: "field unsatisfiable" }
            naughty_f: { type: 5, reason: "field forbidden" }
          resourcePath: [anything]
