---
source: crates/validation/tests/transition_tests.rs
expression: outcome
---
Outcome {
    built_captures: [
        BuiltCapture {
            capture: the/capture,
            scope: test://example/catalog.yaml#/captures/the~1capture,
            control_id: "1111111111111101",
            data_plane_id: "1212121212121201",
            expect_pub_id: "1010101010101010",
            expect_build_id: "1010101010101010",
            model: NULL,
            model_fixes: [],
            validated: NULL,
            spec: NULL,
            previous_spec: CaptureSpec {
                name: "the/capture",
                connector_type: Image,
                config_json: "",
                bindings: [
                    Binding {
                        resource_config_json: "",
                        resource_path: [
                            "capture",
                            "path",
                        ],
                        collection: Some(
                            CollectionSpec {
                                name: "the/collection",
                                write_schema_json: "",
                                read_schema_json: "",
                                key: [],
                                uuid_ptr: "",
                                partition_fields: [],
                                projections: [],
                                ack_template_json: "",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "the/collection/0000000000000001",
                                        replication: 0,
                                        labels: None,
                                        fragment: None,
                                        flags: 0,
                                        max_append_rate: 0,
                                        suspend: None,
                                    },
                                ),
                                derivation: None,
                            },
                        ),
                        backfill: 0,
                        state_key: "",
                    },
                ],
                interval_seconds: 100,
                shard_template: Some(
                    ShardSpec {
                        id: "capture/the/capture/0000000000000001",
                        sources: [],
                        recovery_log_prefix: "",
                        hint_prefix: "",
                        hint_backups: 0,
                        max_txn_duration: None,
                        min_txn_duration: None,
                        disable: false,
                        hot_standbys: 0,
                        labels: None,
                        disable_wait_for_ack: false,
                        ring_buffer_size: 0,
                        read_channel_size: 0,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/capture/the/capture/0000000000000001",
                        replication: 0,
                        labels: None,
                        fragment: None,
                        flags: 0,
                        max_append_rate: 0,
                        suspend: None,
                    },
                ),
                network_ports: [],
                inactive_bindings: [],
            },
            is_touch: 0,
            dependency_hash: NULL,
        },
    ],
    built_collections: [
        BuiltCollection {
            collection: the/collection,
            scope: test://example/catalog.yaml#/collections/the~1collection,
            control_id: "1111111111111102",
            data_plane_id: "1212121212121202",
            expect_pub_id: "1010101010101010",
            expect_build_id: "1010101010101010",
            model: NULL,
            model_fixes: [],
            validated: NULL,
            spec: NULL,
            previous_spec: CollectionSpec {
                name: "the/collection",
                write_schema_json: "{\"x-live\":\"schema\"}",
                read_schema_json: "",
                key: [
                    "/f_one",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [],
                ack_template_json: "",
                partition_template: Some(
                    JournalSpec {
                        name: "the/collection/0000000000000001",
                        replication: 0,
                        labels: None,
                        fragment: None,
                        flags: 0,
                        max_append_rate: 0,
                        suspend: None,
                    },
                ),
                derivation: None,
            },
            is_touch: 0,
            dependency_hash: NULL,
        },
        BuiltCollection {
            collection: the/derivation,
            scope: test://example/catalog.yaml#/collections/the~1derivation,
            control_id: "1111111111111103",
            data_plane_id: "1212121212121203",
            expect_pub_id: "1010101010101010",
            expect_build_id: "1010101010101010",
            model: NULL,
            model_fixes: [],
            validated: NULL,
            spec: NULL,
            previous_spec: CollectionSpec {
                name: "the/derivation",
                write_schema_json: "{\"x-live\":\"schema\"}",
                read_schema_json: "",
                key: [
                    "/d_one",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [],
                ack_template_json: "",
                partition_template: Some(
                    JournalSpec {
                        name: "the/derivation/0000000000000001",
                        replication: 0,
                        labels: None,
                        fragment: None,
                        flags: 0,
                        max_append_rate: 0,
                        suspend: None,
                    },
                ),
                derivation: Some(
                    Derivation {
                        connector_type: Sqlite,
                        config_json: "",
                        transforms: [
                            Transform {
                                name: "fromCollection",
                                collection: Some(
                                    CollectionSpec {
                                        name: "the/collection",
                                        write_schema_json: "",
                                        read_schema_json: "",
                                        key: [],
                                        uuid_ptr: "",
                                        partition_fields: [],
                                        projections: [],
                                        ack_template_json: "",
                                        partition_template: Some(
                                            JournalSpec {
                                                name: "the/collection/0000000000000001",
                                                replication: 0,
                                                labels: None,
                                                fragment: None,
                                                flags: 0,
                                                max_append_rate: 0,
                                                suspend: None,
                                            },
                                        ),
                                        derivation: None,
                                    },
                                ),
                                partition_selector: None,
                                priority: 0,
                                read_delay_seconds: 0,
                                shuffle_key: [],
                                shuffle_lambda_config_json: "",
                                lambda_config_json: "",
                                read_only: false,
                                journal_read_suffix: "",
                                not_before: None,
                                not_after: None,
                                backfill: 0,
                            },
                        ],
                        shuffle_key_types: [],
                        shard_template: Some(
                            ShardSpec {
                                id: "derivation/the/derivation/0000000000000001",
                                sources: [],
                                recovery_log_prefix: "",
                                hint_prefix: "",
                                hint_backups: 0,
                                max_txn_duration: None,
                                min_txn_duration: None,
                                disable: false,
                                hot_standbys: 0,
                                labels: None,
                                disable_wait_for_ack: false,
                                ring_buffer_size: 0,
                                read_channel_size: 0,
                            },
                        ),
                        recovery_log_template: Some(
                            JournalSpec {
                                name: "recovery/derivation/the/derivation/0000000000000001",
                                replication: 0,
                                labels: None,
                                fragment: None,
                                flags: 0,
                                max_append_rate: 0,
                                suspend: None,
                            },
                        ),
                        network_ports: [],
                        inactive_transforms: [],
                    },
                ),
            },
            is_touch: 0,
            dependency_hash: NULL,
        },
    ],
    built_materializations: [
        BuiltMaterialization {
            materialization: the/materialization,
            scope: test://example/catalog.yaml#/materializations/the~1materialization,
            control_id: "1111111111111104",
            data_plane_id: "1212121212121204",
            expect_pub_id: "1010101010101010",
            expect_build_id: "1010101010101010",
            model: NULL,
            model_fixes: [],
            validated: NULL,
            spec: NULL,
            previous_spec: MaterializationSpec {
                name: "the/materialization",
                connector_type: Image,
                config_json: "",
                bindings: [
                    Binding {
                        resource_config_json: "",
                        resource_path: [
                            "table",
                            "path",
                        ],
                        collection: Some(
                            CollectionSpec {
                                name: "the/collection",
                                write_schema_json: "",
                                read_schema_json: "",
                                key: [],
                                uuid_ptr: "",
                                partition_fields: [],
                                projections: [],
                                ack_template_json: "",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "the/collection/0000000000000001",
                                        replication: 0,
                                        labels: None,
                                        fragment: None,
                                        flags: 0,
                                        max_append_rate: 0,
                                        suspend: None,
                                    },
                                ),
                                derivation: None,
                            },
                        ),
                        partition_selector: None,
                        priority: 0,
                        field_selection: None,
                        delta_updates: false,
                        deprecated_shuffle: None,
                        journal_read_suffix: "",
                        not_before: None,
                        not_after: None,
                        backfill: 0,
                        state_key: "",
                        ser_policy: None,
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "materialize/the/materialization/0000000000000001",
                        sources: [],
                        recovery_log_prefix: "",
                        hint_prefix: "",
                        hint_backups: 0,
                        max_txn_duration: None,
                        min_txn_duration: None,
                        disable: false,
                        hot_standbys: 0,
                        labels: None,
                        disable_wait_for_ack: false,
                        ring_buffer_size: 0,
                        read_channel_size: 0,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/materialize/the/materialization/0000000000000001",
                        replication: 0,
                        labels: None,
                        fragment: None,
                        flags: 0,
                        max_append_rate: 0,
                        suspend: None,
                    },
                ),
                network_ports: [],
                inactive_bindings: [],
            },
            is_touch: 0,
            dependency_hash: NULL,
        },
    ],
    built_tests: [
        BuiltTest {
            test: the/test,
            scope: test://example/catalog.yaml#/tests/the~1test,
            control_id: "1111111111111105",
            expect_pub_id: "1010101010101010",
            expect_build_id: "1010101010101010",
            model: NULL,
            model_fixes: [],
            spec: NULL,
            previous_spec: TestSpec {
                name: "the/test",
                steps: [],
            },
            is_touch: 0,
            dependency_hash: NULL,
        },
    ],
    captures: [
        DraftCapture {
            capture: the/capture,
            scope: test://example/catalog.yaml#/captures/the~1capture,
            expect_pub_id: "1010101010101010",
            model: NULL,
            is_touch: 0,
        },
    ],
    collections: [
        DraftCollection {
            collection: the/collection,
            scope: test://example/catalog.yaml#/collections/the~1collection,
            expect_pub_id: "1010101010101010",
            model: NULL,
            is_touch: 0,
        },
        DraftCollection {
            collection: the/derivation,
            scope: test://example/catalog.yaml#/collections/the~1derivation,
            expect_pub_id: "1010101010101010",
            model: NULL,
            is_touch: 0,
        },
    ],
    errors: [],
    errors_draft: [],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
    ],
    imports: [],
    materializations: [
        DraftMaterialization {
            materialization: the/materialization,
            scope: test://example/catalog.yaml#/materializations/the~1materialization,
            expect_pub_id: "1010101010101010",
            model: NULL,
            is_touch: 0,
        },
    ],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"captures":{"the/capture":{"bindings":[{"resource":{"_meta":{"path":["capture","path"]},"table":"foo"},"target":"the/collection"}],"delete":true,"endpoint":{"connector":{"config":{"a":"config"},"image":"an/image"}},"expectPubId":"10:10:10:10:10:10:10:10"}},"collections":{"the/collection":{"delete":true,"expectPubId":"10:10:10:10:10:10:10:10","key":["/f_one"],"projections":{"F1":"/f_one","F2":"/f_two","FX":"/f_x","FY":"/f_y"},"schema":{"properties":{"f_one":{"type":"integer"},"f_two":{"type":"string"},"f_x":false},"required":["f_one","f_two"],"type":"object"}},"the/derivation":{"delete":true,"derive":{"transforms":[{"lambda":"select 123 as d_one, 'hello' as d_two;\n","name":"fromCollection","shuffle":{"key":["/f_two"]},"source":{"name":"the/collection"}}],"using":{"sqlite":{}}},"expectPubId":"10:10:10:10:10:10:10:10","key":["/d_one"],"schema":{"properties":{"d_one":{"type":"integer"},"d_two":{"type":"string"}},"required":["d_one","d_two"],"type":"object"}}},"materializations":{"the/materialization":{"bindings":[{"fields":{"exclude":["F2","FY","does/not/exist"],"include":{"F1":{},"f_two":{}},"recommended":true},"resource":{"_meta":{"path":["table","path"]},"table":"bar"},"source":"the/collection"}],"delete":true,"endpoint":{"connector":{"config":{"a":"config"},"image":"other/image"}},"expectPubId":"10:10:10:10:10:10:10:10"}},"tests":{"the/test":{"delete":true,"expectPubId":"10:10:10:10:10:10:10:10","steps":[{"ingest":{"collection":"the/collection","documents":[{"f_one":42,"f_two":"a string"}]}}]}}},
        },
    ],
    storage_mappings: [
        StorageMapping {
            catalog_prefix: ,
            control_id: "0000000000000000",
            stores: [
              {
                "provider": "S3",
                "bucket": "a-bucket",
                "prefix": null,
                "region": null
              }
            ],
        },
    ],
    tests: [
        DraftTest {
            test: the/test,
            scope: test://example/catalog.yaml#/tests/the~1test,
            expect_pub_id: "1010101010101010",
            model: NULL,
            is_touch: 0,
        },
    ],
}
