---
source: crates/validation/tests/scenario_tests.rs
expression: outcome
---
Outcome {
    built_captures: [],
    built_collections: [
        BuiltCollection {
            collection: testing/collection-with-flow-document,
            scope: test://example/catalog.yaml#/collections/testing~1collection-with-flow-document,
            expect_pub_id: "0000000000000000",
            model: {
              "schema": {"$id":"test://example/catalog.yaml?ptr=/collections/testing~1collection-with-flow-document/schema","properties":{"flow_document":{"type":"object"},"id":{"type":"string"}},"required":["id"],"type":"object"},
              "key": [
                "/id"
              ]
            },
            validated: NULL,
            spec: CollectionSpec {
                name: "testing/collection-with-flow-document",
                write_schema_json: "{\"$id\":\"test://example/catalog.yaml?ptr=/collections/testing~1collection-with-flow-document/schema\",\"properties\":{\"flow_document\":{\"type\":\"object\"},\"id\":{\"type\":\"string\"}},\"required\":[\"id\"],\"type\":\"object\"}",
                read_schema_json: "",
                key: [
                    "/id",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/_meta/flow_truncated",
                        field: "_meta/flow_truncated",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "Flow truncation indicator",
                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                default_json: "",
                                secret: false,
                                exists: Must,
                                numeric: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                                numeric: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/uuid",
                        field: "flow_published_at",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "date-time",
                                        content_encoding: "uuid",
                                        max_length: 0,
                                    },
                                ),
                                title: "Flow Publication Time",
                                description: "Flow publication date-time of this document",
                                default_json: "",
                                secret: false,
                                exists: Must,
                                numeric: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/id",
                        field: "id",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                                numeric: None,
                            },
                        ),
                    },
                ],
                ack_template_json: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/collection-with-flow-document/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "0101010101010101",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/collection-with-flow-document",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://a-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
                derivation: None,
            },
            previous_spec: NULL,
        },
    ],
    built_materializations: [],
    built_tests: [],
    captures: [],
    collections: [
        DraftCollection {
            collection: testing/collection-with-flow-document,
            scope: test://example/catalog.yaml#/collections/testing~1collection-with-flow-document,
            expect_pub_id: NULL,
            model: {
              "schema": {"$id":"test://example/catalog.yaml?ptr=/collections/testing~1collection-with-flow-document/schema","properties":{"flow_document":{"type":"object"},"id":{"type":"string"}},"required":["id"],"type":"object"},
              "key": [
                "/id"
              ]
            },
        },
    ],
    errors: [],
    errors_draft: [],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
    ],
    imports: [],
    materializations: [],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/collection-with-flow-document":{"key":["/id"],"schema":{"properties":{"flow_document":{"type":"object"},"id":{"type":"string"}},"required":["id"],"type":"object"}}}},
        },
    ],
    storage_mappings: [
        StorageMapping {
            catalog_prefix: ,
            scope: flow://control/storage-mapping/default,
            stores: [
              {
                "provider": "S3",
                "bucket": "a-bucket",
                "prefix": null,
                "region": null
              }
            ],
        },
    ],
    tests: [],
}
