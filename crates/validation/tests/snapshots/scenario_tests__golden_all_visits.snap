---
source: crates/validation/tests/scenario_tests.rs
expression: outcome
---
Outcome {
    built_captures: [
        BuiltCapture {
            capture: testing/db-cdc,
            scope: test://example/int-string-captures#/captures/testing~1db-cdc,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "endpoint": {
                "connector": {
                  "image": "database",
                  "config": {"host":"a.host.name","user":"a-user"}
                }
              },
              "bindings": [
                {
                  "resource": {"_meta":{"path":["schema","table"]},"namespace":"and namespace","stream":"other-stream"},
                  "target": "testing/int-string",
                  "backfill": 3
                }
              ],
              "shards": {
                "minTxnDuration": "10s",
                "hotStandbys": 1
              }
            },
            model_fixes: [
              "updated resource /_meta of 1 bindings"
            ],
            validated: Validated {
                bindings: [
                    Binding {
                        resource_path: [
                            "schema",
                            "table",
                        ],
                    },
                ],
            },
            spec: CaptureSpec {
                name: "testing/db-cdc",
                connector_type: Image,
                config_json: b"{\"image\":\"database\",\"config\":{\"host\":\"a.host.name\",\"user\":\"a-user\"}}",
                bindings: [
                    Binding {
                        resource_config_json: b"{\"namespace\":\"and namespace\",\"stream\":\"other-stream\"}",
                        resource_path: [
                            "schema",
                            "table",
                        ],
                        collection: Some(
                            CollectionSpec {
                                name: "testing/int-string",
                                write_schema_json: b"{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                read_schema_json: b"",
                                key: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/flow_truncated",
                                        field: "_meta/flow_truncated",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "Flow truncation indicator",
                                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/uuid",
                                        field: "flow_published_at",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "date-time",
                                                        content_encoding: "uuid",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "Flow Publication Time",
                                                description: "Flow publication date-time of this document",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                ],
                                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string/2020202020202020",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "2121212121212121",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: Some(
                                                    Duration {
                                                        seconds: 86400,
                                                        nanos: 0,
                                                    },
                                                ),
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                        suspend: None,
                                    },
                                ),
                                derivation: None,
                            },
                        ),
                        backfill: 3,
                        state_key: "schema%2Ftable.v3",
                    },
                ],
                interval_seconds: 300,
                shard_template: Some(
                    ShardSpec {
                        id: "capture/testing/db-cdc/2020202020202020",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 10,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 10,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 1,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "567",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "789",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/hostname",
                                        value: "d7f4a9d02b48c1a",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/port-proto/789",
                                        value: "h2",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/port-public/567",
                                        value: "true",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-cdc",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 4096,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/capture/testing/db-cdc/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-cdc",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 172800,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                network_ports: [
                    NetworkPort {
                        number: 567,
                        protocol: "",
                        public: true,
                    },
                    NetworkPort {
                        number: 789,
                        protocol: "h2",
                        public: false,
                    },
                ],
                inactive_bindings: [],
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: 7b7094575b4afb18,
        },
        BuiltCapture {
            capture: testing/s3-source,
            scope: test://example/int-string-captures#/captures/testing~1s3-source,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "endpoint": {
                "connector": {
                  "image": "s3",
                  "config": {"bucket":"a-bucket","prefix":"and-prefix"}
                }
              },
              "bindings": [
                {
                  "resource": {"_meta":{"path":["bucke+","pr@fix"]},"stream":"a-stream"},
                  "target": "testing/int-string"
                },
                {
                  "resource": {"_meta":{"path":["other-bucket"]},"stream":"v2-stream"},
                  "target": "testing/int-string.v2"
                }
              ],
              "interval": "10m"
            },
            model_fixes: [
              "updated resource /_meta of 2 bindings"
            ],
            validated: Validated {
                bindings: [
                    Binding {
                        resource_path: [
                            "bucke+",
                            "pr@fix",
                        ],
                    },
                    Binding {
                        resource_path: [
                            "other-bucket",
                        ],
                    },
                ],
            },
            spec: CaptureSpec {
                name: "testing/s3-source",
                connector_type: Image,
                config_json: b"{\"image\":\"s3\",\"config\":{\"bucket\":\"a-bucket\",\"prefix\":\"and-prefix\"}}",
                bindings: [
                    Binding {
                        resource_config_json: b"{\"stream\":\"a-stream\"}",
                        resource_path: [
                            "bucke+",
                            "pr@fix",
                        ],
                        collection: Some(
                            CollectionSpec {
                                name: "testing/int-string",
                                write_schema_json: b"{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                read_schema_json: b"",
                                key: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/flow_truncated",
                                        field: "_meta/flow_truncated",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "Flow truncation indicator",
                                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/uuid",
                                        field: "flow_published_at",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "date-time",
                                                        content_encoding: "uuid",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "Flow Publication Time",
                                                description: "Flow publication date-time of this document",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                ],
                                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string/2020202020202020",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "2121212121212121",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: Some(
                                                    Duration {
                                                        seconds: 86400,
                                                        nanos: 0,
                                                    },
                                                ),
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                        suspend: None,
                                    },
                                ),
                                derivation: None,
                            },
                        ),
                        backfill: 0,
                        state_key: "bucke+%2Fpr%40fix",
                    },
                    Binding {
                        resource_config_json: b"{\"stream\":\"v2-stream\"}",
                        resource_path: [
                            "other-bucket",
                        ],
                        collection: Some(
                            CollectionSpec {
                                name: "testing/int-string.v2",
                                write_schema_json: b"{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}},\"$id\":\"test://inlined/canonical/id\",\"$ref\":\"test://example/int-string.schema\"}",
                                read_schema_json: b"",
                                key: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [],
                                projections: [
                                    Projection {
                                        ptr: "/_meta/flow_truncated",
                                        field: "_meta/flow_truncated",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "Flow truncation indicator",
                                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/uuid",
                                        field: "flow_published_at",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "date-time",
                                                        content_encoding: "uuid",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "Flow Publication Time",
                                                description: "Flow publication date-time of this document",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                ],
                                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string.v2/2020202020202020",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "2121212121212121",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string.v2",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Zstandard,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: Some(
                                                    Duration {
                                                        seconds: 86400,
                                                        nanos: 0,
                                                    },
                                                ),
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                        suspend: None,
                                    },
                                ),
                                derivation: None,
                            },
                        ),
                        backfill: 0,
                        state_key: "other-bucket",
                    },
                ],
                interval_seconds: 600,
                shard_template: Some(
                    ShardSpec {
                        id: "capture/testing/s3-source/2020202020202020",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "567",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "789",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/hostname",
                                        value: "d4b08a40cd6dda6d",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/port-proto/789",
                                        value: "h2",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/port-public/567",
                                        value: "true",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/s3-source",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 4096,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/capture/testing/s3-source/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/s3-source",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 172800,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                network_ports: [
                    NetworkPort {
                        number: 567,
                        protocol: "",
                        public: true,
                    },
                    NetworkPort {
                        number: 789,
                        protocol: "h2",
                        public: false,
                    },
                ],
                inactive_bindings: [],
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: 6dcefff2faa76c98,
        },
    ],
    built_collections: [
        BuiltCollection {
            collection: testing/array-key,
            scope: test://example/array-key#/collections/testing~1array-key,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "schema": {"$id":"test://example/array-key.schema","properties":{"arr":{"items":{"properties":{"aKey":{"type":"integer"}},"required":["aKey"],"type":"object"},"minItems":5,"type":"array"}},"required":["arr"],"type":"object"},
              "key": [
                "/arr/0/aKey"
              ],
              "projections": {
                "aKeyOne": "/arr/1/aKey"
              }
            },
            model_fixes: [],
            validated: NULL,
            spec: CollectionSpec {
                name: "testing/array-key",
                write_schema_json: b"{\"$id\":\"test://example/array-key.schema\",\"properties\":{\"arr\":{\"items\":{\"properties\":{\"aKey\":{\"type\":\"integer\"}},\"required\":[\"aKey\"],\"type\":\"object\"},\"minItems\":5,\"type\":\"array\"}},\"required\":[\"arr\"],\"type\":\"object\"}",
                read_schema_json: b"",
                key: [
                    "/arr/0/aKey",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/_meta/flow_truncated",
                        field: "_meta/flow_truncated",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "Flow truncation indicator",
                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr/1/aKey",
                        field: "aKeyOne",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr",
                        field: "arr",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "array",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: Some(
                                    Array {
                                        min_items: 5,
                                        has_max_items: false,
                                        max_items: 0,
                                        item_types: [
                                            "object",
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr/0/aKey",
                        field: "arr/0/aKey",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/uuid",
                        field: "flow_published_at",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "date-time",
                                        content_encoding: "uuid",
                                        max_length: 0,
                                    },
                                ),
                                title: "Flow Publication Time",
                                description: "Flow publication date-time of this document",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                ],
                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/array-key/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/array-key",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 86400,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                derivation: None,
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: NULL,
        },
        BuiltCollection {
            collection: testing/from-array-key,
            scope: test://example/from-array-key#/collections/testing~1from-array-key,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "schema": {"$id":"test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema","properties":{"someKey":{"type":"integer"}},"required":["someKey"],"type":"object"},
              "key": [
                "/someKey"
              ],
              "derive": {
                "using": {
                  "sqlite": {
                    "migrations": [
                      "select migration;",
                      "test://example/mi%C3%9F%C3%9Fing/migration.sql"
                    ]
                  }
                },
                "transforms": [
                  {
                    "name": "withBar",
                    "source": {
                      "name": "testing/array-key"
                    },
                    "shuffle": {
                      "key": [
                        "/arr/2/aKey"
                      ]
                    },
                    "lambda": "select aKeyOne as \"an-int\", json_object('timestamp', strftime('%Y-%m-%dT%H:%M:%SZ')) as two from source;\n"
                  },
                  {
                    "name": "withFoo",
                    "source": {
                      "name": "testing/array-key"
                    },
                    "shuffle": {
                      "key": [
                        "/arr/3/aKey"
                      ]
                    },
                    "lambda": "select s.aKeyOne, s.arr, s.\"arr/0/aKey\", r.\"an-int\", r.\"nested/timestamp\" from source as s, register as r;\n"
                  }
                ]
              }
            },
            model_fixes: [],
            validated: Validated {
                transforms: [
                    Transform {
                        read_only: true,
                    },
                    Transform {
                        read_only: false,
                    },
                ],
                generated_files: {
                    "test://example/mi%C3%9F%C3%9Fing/migration.sql": "generated content",
                },
            },
            spec: CollectionSpec {
                name: "testing/from-array-key",
                write_schema_json: b"{\"$id\":\"test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema\",\"properties\":{\"someKey\":{\"type\":\"integer\"}},\"required\":[\"someKey\"],\"type\":\"object\"}",
                read_schema_json: b"",
                key: [
                    "/someKey",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/_meta/flow_truncated",
                        field: "_meta/flow_truncated",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "Flow truncation indicator",
                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/uuid",
                        field: "flow_published_at",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "date-time",
                                        content_encoding: "uuid",
                                        max_length: 0,
                                    },
                                ),
                                title: "Flow Publication Time",
                                description: "Flow publication date-time of this document",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/someKey",
                        field: "someKey",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                ],
                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/from-array-key/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/from-array-key",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 86400,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                derivation: Some(
                    Derivation {
                        connector_type: Sqlite,
                        config_json: b"{\"migrations\":[\"select migration;\",\"test://example/mi%C3%9F%C3%9Fing/migration.sql\"]}",
                        transforms: [
                            Transform {
                                name: "withBar",
                                collection: Some(
                                    CollectionSpec {
                                        name: "testing/array-key",
                                        write_schema_json: b"{\"$id\":\"test://example/array-key.schema\",\"properties\":{\"arr\":{\"items\":{\"properties\":{\"aKey\":{\"type\":\"integer\"}},\"required\":[\"aKey\"],\"type\":\"object\"},\"minItems\":5,\"type\":\"array\"}},\"required\":[\"arr\"],\"type\":\"object\"}",
                                        read_schema_json: b"",
                                        key: [
                                            "/arr/0/aKey",
                                        ],
                                        uuid_ptr: "/_meta/uuid",
                                        partition_fields: [],
                                        projections: [
                                            Projection {
                                                ptr: "/_meta/flow_truncated",
                                                field: "_meta/flow_truncated",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "boolean",
                                                        ],
                                                        string: None,
                                                        title: "Flow truncation indicator",
                                                        description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/arr/1/aKey",
                                                field: "aKeyOne",
                                                explicit: true,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/arr",
                                                field: "arr",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "array",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: Some(
                                                            Array {
                                                                min_items: 5,
                                                                has_max_items: false,
                                                                max_items: 0,
                                                                item_types: [
                                                                    "object",
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/arr/0/aKey",
                                                field: "arr/0/aKey",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: true,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "",
                                                field: "flow_document",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "object",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/_meta/uuid",
                                                field: "flow_published_at",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "date-time",
                                                                content_encoding: "uuid",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "Flow Publication Time",
                                                        description: "Flow publication date-time of this document",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                        ],
                                        ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                        partition_template: Some(
                                            JournalSpec {
                                                name: "testing/array-key/2020202020202020",
                                                replication: 3,
                                                labels: Some(
                                                    LabelSet {
                                                        labels: [
                                                            Label {
                                                                name: "app.gazette.dev/managed-by",
                                                                value: "estuary.dev/flow",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "content-type",
                                                                value: "application/x-ndjson",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "estuary.dev/build",
                                                                value: "2121212121212121",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "estuary.dev/collection",
                                                                value: "testing/array-key",
                                                                prefix: false,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                fragment: Some(
                                                    Fragment {
                                                        length: 536870912,
                                                        compression_codec: Gzip,
                                                        stores: [
                                                            "s3://data-bucket/",
                                                        ],
                                                        refresh_interval: Some(
                                                            Duration {
                                                                seconds: 300,
                                                                nanos: 0,
                                                            },
                                                        ),
                                                        retention: None,
                                                        flush_interval: Some(
                                                            Duration {
                                                                seconds: 86400,
                                                                nanos: 0,
                                                            },
                                                        ),
                                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                                    },
                                                ),
                                                flags: 4,
                                                max_append_rate: 4194304,
                                                suspend: None,
                                            },
                                        ),
                                        derivation: None,
                                    },
                                ),
                                partition_selector: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/array-key",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                priority: 0,
                                read_delay_seconds: 0,
                                shuffle_key: [
                                    "/arr/2/aKey",
                                ],
                                shuffle_lambda_config_json: b"",
                                lambda_config_json: b"\"select aKeyOne as \\\"an-int\\\", json_object('timestamp', strftime('%Y-%m-%dT%H:%M:%SZ')) as two from source;\\n\"",
                                read_only: true,
                                journal_read_suffix: "derive/testing/from-array-key/withBar",
                                not_before: None,
                                not_after: None,
                                backfill: 0,
                            },
                            Transform {
                                name: "withFoo",
                                collection: Some(
                                    CollectionSpec {
                                        name: "testing/array-key",
                                        write_schema_json: b"{\"$id\":\"test://example/array-key.schema\",\"properties\":{\"arr\":{\"items\":{\"properties\":{\"aKey\":{\"type\":\"integer\"}},\"required\":[\"aKey\"],\"type\":\"object\"},\"minItems\":5,\"type\":\"array\"}},\"required\":[\"arr\"],\"type\":\"object\"}",
                                        read_schema_json: b"",
                                        key: [
                                            "/arr/0/aKey",
                                        ],
                                        uuid_ptr: "/_meta/uuid",
                                        partition_fields: [],
                                        projections: [
                                            Projection {
                                                ptr: "/_meta/flow_truncated",
                                                field: "_meta/flow_truncated",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "boolean",
                                                        ],
                                                        string: None,
                                                        title: "Flow truncation indicator",
                                                        description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/arr/1/aKey",
                                                field: "aKeyOne",
                                                explicit: true,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/arr",
                                                field: "arr",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "array",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: Some(
                                                            Array {
                                                                min_items: 5,
                                                                has_max_items: false,
                                                                max_items: 0,
                                                                item_types: [
                                                                    "object",
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/arr/0/aKey",
                                                field: "arr/0/aKey",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: true,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "",
                                                field: "flow_document",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "object",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/_meta/uuid",
                                                field: "flow_published_at",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "date-time",
                                                                content_encoding: "uuid",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "Flow Publication Time",
                                                        description: "Flow publication date-time of this document",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                        ],
                                        ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                        partition_template: Some(
                                            JournalSpec {
                                                name: "testing/array-key/2020202020202020",
                                                replication: 3,
                                                labels: Some(
                                                    LabelSet {
                                                        labels: [
                                                            Label {
                                                                name: "app.gazette.dev/managed-by",
                                                                value: "estuary.dev/flow",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "content-type",
                                                                value: "application/x-ndjson",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "estuary.dev/build",
                                                                value: "2121212121212121",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "estuary.dev/collection",
                                                                value: "testing/array-key",
                                                                prefix: false,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                fragment: Some(
                                                    Fragment {
                                                        length: 536870912,
                                                        compression_codec: Gzip,
                                                        stores: [
                                                            "s3://data-bucket/",
                                                        ],
                                                        refresh_interval: Some(
                                                            Duration {
                                                                seconds: 300,
                                                                nanos: 0,
                                                            },
                                                        ),
                                                        retention: None,
                                                        flush_interval: Some(
                                                            Duration {
                                                                seconds: 86400,
                                                                nanos: 0,
                                                            },
                                                        ),
                                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                                    },
                                                ),
                                                flags: 4,
                                                max_append_rate: 4194304,
                                                suspend: None,
                                            },
                                        ),
                                        derivation: None,
                                    },
                                ),
                                partition_selector: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/array-key",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                priority: 0,
                                read_delay_seconds: 0,
                                shuffle_key: [
                                    "/arr/3/aKey",
                                ],
                                shuffle_lambda_config_json: b"",
                                lambda_config_json: b"\"select s.aKeyOne, s.arr, s.\\\"arr/0/aKey\\\", r.\\\"an-int\\\", r.\\\"nested/timestamp\\\" from source as s, register as r;\\n\"",
                                read_only: false,
                                journal_read_suffix: "derive/testing/from-array-key/withFoo",
                                not_before: None,
                                not_after: None,
                                backfill: 0,
                            },
                        ],
                        shuffle_key_types: [
                            Integer,
                        ],
                        shard_template: Some(
                            ShardSpec {
                                id: "derivation/testing/from-array-key/2020202020202020",
                                sources: [],
                                recovery_log_prefix: "recovery",
                                hint_prefix: "/estuary/flow/hints",
                                hint_backups: 2,
                                max_txn_duration: Some(
                                    Duration {
                                        seconds: 1,
                                        nanos: 0,
                                    },
                                ),
                                min_txn_duration: Some(
                                    Duration {
                                        seconds: 0,
                                        nanos: 0,
                                    },
                                ),
                                disable: false,
                                hot_standbys: 0,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "2121212121212121",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/log-level",
                                                value: "info",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-name",
                                                value: "testing/from-array-key",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-type",
                                                value: "derivation",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                disable_wait_for_ack: false,
                                ring_buffer_size: 65536,
                                read_channel_size: 4096,
                            },
                        ),
                        recovery_log_template: Some(
                            JournalSpec {
                                name: "recovery/derivation/testing/from-array-key/2020202020202020",
                                replication: 3,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "content-type",
                                                value: "application/x-gazette-recoverylog",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "2121212121212121",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-name",
                                                value: "testing/from-array-key",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-type",
                                                value: "derivation",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                fragment: Some(
                                    Fragment {
                                        length: 268435456,
                                        compression_codec: Snappy,
                                        stores: [
                                            "gs://recovery-bucket/some/",
                                        ],
                                        refresh_interval: Some(
                                            Duration {
                                                seconds: 300,
                                                nanos: 0,
                                            },
                                        ),
                                        retention: None,
                                        flush_interval: Some(
                                            Duration {
                                                seconds: 172800,
                                                nanos: 0,
                                            },
                                        ),
                                        path_postfix_template: "",
                                    },
                                ),
                                flags: 4,
                                max_append_rate: 4194304,
                                suspend: None,
                            },
                        ),
                        network_ports: [],
                        inactive_transforms: [],
                    },
                ),
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: 31b775be90a8be31,
        },
        BuiltCollection {
            collection: testing/int-halve,
            scope: test://example/int-halve#/collections/testing~1int-halve,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "schema": {"$defs":{"__flowInline1":{"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},"otherAnchor":{"$anchor":"Other","type":"integer"}},"$id":"test://example/canonical/int-string-len.schema","$ref":"../int-string.schema","additionalProperties":{"type":"boolean"},"properties":{"arr":{"additionalItems":{"$ref":"../int-string.schema#AnAnchor"},"type":"array"},"bit":{},"int":{},"len":{"type":"integer"},"partitionString":{"type":"string"},"str":{}},"required":["len","partitionString"]},
              "key": [
                "/int"
              ],
              "projections": {
                "Extra": "/extra",
                "Len": {
                  "location": "/len",
                  "partition": true
                },
                "Root": "",
                "TheString": {
                  "location": "/partitionString",
                  "partition": true
                }
              },
              "journals": {
                "fragments": {
                  "length": 100,
                  "flushInterval": "15m"
                }
              },
              "derive": {
                "using": {
                  "typescript": {
                    "module": "another typescript placeholder\n"
                  }
                },
                "transforms": [
                  {
                    "name": "halveIntString",
                    "source": {
                      "name": "testing/int-string-rw",
                      "partitions": {
                        "include": {
                          "bit": [
                            true
                          ]
                        },
                        "exclude": {
                          "bit": [
                            false
                          ]
                        }
                      },
                      "notAfter": "2019-03-06T09:30:02Z"
                    },
                    "shuffle": {
                      "key": [
                        "/len",
                        "/str"
                      ]
                    }
                  },
                  {
                    "name": "halveSelf",
                    "source": {
                      "name": "testing/int-halve"
                    },
                    "shuffle": {
                      "key": [
                        "/len",
                        "/partitionString"
                      ]
                    },
                    "backfill": 4
                  }
                ]
              }
            },
            model_fixes: [],
            validated: Validated {
                transforms: [
                    Transform {
                        read_only: false,
                    },
                    Transform {
                        read_only: true,
                    },
                ],
                generated_files: {},
            },
            spec: CollectionSpec {
                name: "testing/int-halve",
                write_schema_json: b"{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                read_schema_json: b"",
                key: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [
                    "Len",
                    "TheString",
                ],
                projections: [
                    Projection {
                        ptr: "/extra",
                        field: "Extra",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: May,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "Len",
                        explicit: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "Root",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/partitionString",
                        field: "TheString",
                        explicit: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/flow_truncated",
                        field: "_meta/flow_truncated",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "Flow truncation indicator",
                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr",
                        field: "arr",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "array",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: May,
                                numeric: None,
                                array: Some(
                                    Array {
                                        min_items: 0,
                                        has_max_items: false,
                                        max_items: 0,
                                        item_types: [
                                            "object",
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/uuid",
                        field: "flow_published_at",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "date-time",
                                        content_encoding: "uuid",
                                        max_length: 0,
                                    },
                                ),
                                title: "Flow Publication Time",
                                description: "Flow publication date-time of this document",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "len",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/partitionString",
                        field: "partitionString",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                ],
                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-halve/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-halve",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 104857600,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 900,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                derivation: Some(
                    Derivation {
                        connector_type: Typescript,
                        config_json: b"{\"module\":\"another typescript placeholder\\n\"}",
                        transforms: [
                            Transform {
                                name: "halveIntString",
                                collection: Some(
                                    CollectionSpec {
                                        name: "testing/int-string-rw",
                                        write_schema_json: b"{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                        read_schema_json: b"{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                                        key: [
                                            "/int",
                                        ],
                                        uuid_ptr: "/_meta/uuid",
                                        partition_fields: [
                                            "bit",
                                        ],
                                        projections: [
                                            Projection {
                                                ptr: "/int",
                                                field: "Int",
                                                explicit: true,
                                                is_partition_key: false,
                                                is_primary_key: true,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/len",
                                                field: "Len",
                                                explicit: true,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/str",
                                                field: "Str",
                                                explicit: true,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "",
                                                                content_encoding: "",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/_meta/flow_truncated",
                                                field: "_meta/flow_truncated",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "boolean",
                                                        ],
                                                        string: None,
                                                        title: "Flow truncation indicator",
                                                        description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/arr",
                                                field: "arr",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "array",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: May,
                                                        numeric: None,
                                                        array: Some(
                                                            Array {
                                                                min_items: 0,
                                                                has_max_items: false,
                                                                max_items: 0,
                                                                item_types: [
                                                                    "object",
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/bit",
                                                field: "bit",
                                                explicit: true,
                                                is_partition_key: true,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "boolean",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "",
                                                field: "flow_document",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "object",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/_meta/uuid",
                                                field: "flow_published_at",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "date-time",
                                                                content_encoding: "uuid",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "Flow Publication Time",
                                                        description: "Flow publication date-time of this document",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/int",
                                                field: "int",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: true,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/len",
                                                field: "len",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/partitionString",
                                                field: "partitionString",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "",
                                                                content_encoding: "",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/str",
                                                field: "str",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "",
                                                                content_encoding: "",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                        ],
                                        ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                        partition_template: Some(
                                            JournalSpec {
                                                name: "testing/int-string-rw/2020202020202020",
                                                replication: 3,
                                                labels: Some(
                                                    LabelSet {
                                                        labels: [
                                                            Label {
                                                                name: "app.gazette.dev/managed-by",
                                                                value: "estuary.dev/flow",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "content-type",
                                                                value: "application/x-ndjson",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "estuary.dev/build",
                                                                value: "2121212121212121",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "estuary.dev/collection",
                                                                value: "testing/int-string-rw",
                                                                prefix: false,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                fragment: Some(
                                                    Fragment {
                                                        length: 536870912,
                                                        compression_codec: Gzip,
                                                        stores: [
                                                            "s3://data-bucket/",
                                                        ],
                                                        refresh_interval: Some(
                                                            Duration {
                                                                seconds: 300,
                                                                nanos: 0,
                                                            },
                                                        ),
                                                        retention: None,
                                                        flush_interval: Some(
                                                            Duration {
                                                                seconds: 86400,
                                                                nanos: 0,
                                                            },
                                                        ),
                                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                                    },
                                                ),
                                                flags: 4,
                                                max_append_rate: 4194304,
                                                suspend: None,
                                            },
                                        ),
                                        derivation: None,
                                    },
                                ),
                                partition_selector: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string-rw",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/field/bit",
                                                        value: "%_true",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/field/bit",
                                                        value: "%_false",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                priority: 0,
                                read_delay_seconds: 0,
                                shuffle_key: [
                                    "/len",
                                    "/str",
                                ],
                                shuffle_lambda_config_json: b"",
                                lambda_config_json: b"null",
                                read_only: false,
                                journal_read_suffix: "derive/testing/int-halve/halveIntString",
                                not_before: None,
                                not_after: Some(
                                    Timestamp {
                                        seconds: 1551864602,
                                        nanos: 0,
                                    },
                                ),
                                backfill: 0,
                            },
                            Transform {
                                name: "halveSelf",
                                collection: Some(
                                    CollectionSpec {
                                        name: "testing/int-halve",
                                        write_schema_json: b"{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                                        read_schema_json: b"",
                                        key: [
                                            "/int",
                                        ],
                                        uuid_ptr: "/_meta/uuid",
                                        partition_fields: [
                                            "Len",
                                            "TheString",
                                        ],
                                        projections: [
                                            Projection {
                                                ptr: "/extra",
                                                field: "Extra",
                                                explicit: true,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "boolean",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: May,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/len",
                                                field: "Len",
                                                explicit: true,
                                                is_partition_key: true,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "",
                                                field: "Root",
                                                explicit: true,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "object",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/partitionString",
                                                field: "TheString",
                                                explicit: true,
                                                is_partition_key: true,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "",
                                                                content_encoding: "",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/_meta/flow_truncated",
                                                field: "_meta/flow_truncated",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "boolean",
                                                        ],
                                                        string: None,
                                                        title: "Flow truncation indicator",
                                                        description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/arr",
                                                field: "arr",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "array",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: May,
                                                        numeric: None,
                                                        array: Some(
                                                            Array {
                                                                min_items: 0,
                                                                has_max_items: false,
                                                                max_items: 0,
                                                                item_types: [
                                                                    "object",
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/bit",
                                                field: "bit",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "boolean",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/_meta/uuid",
                                                field: "flow_published_at",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "date-time",
                                                                content_encoding: "uuid",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "Flow Publication Time",
                                                        description: "Flow publication date-time of this document",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/int",
                                                field: "int",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: true,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/len",
                                                field: "len",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/partitionString",
                                                field: "partitionString",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "",
                                                                content_encoding: "",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/str",
                                                field: "str",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "",
                                                                content_encoding: "",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                        ],
                                        ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                        partition_template: Some(
                                            JournalSpec {
                                                name: "testing/int-halve/2020202020202020",
                                                replication: 3,
                                                labels: Some(
                                                    LabelSet {
                                                        labels: [
                                                            Label {
                                                                name: "app.gazette.dev/managed-by",
                                                                value: "estuary.dev/flow",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "content-type",
                                                                value: "application/x-ndjson",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "estuary.dev/build",
                                                                value: "2121212121212121",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "estuary.dev/collection",
                                                                value: "testing/int-halve",
                                                                prefix: false,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                fragment: Some(
                                                    Fragment {
                                                        length: 104857600,
                                                        compression_codec: Gzip,
                                                        stores: [
                                                            "s3://data-bucket/",
                                                        ],
                                                        refresh_interval: Some(
                                                            Duration {
                                                                seconds: 300,
                                                                nanos: 0,
                                                            },
                                                        ),
                                                        retention: None,
                                                        flush_interval: Some(
                                                            Duration {
                                                                seconds: 900,
                                                                nanos: 0,
                                                            },
                                                        ),
                                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                                    },
                                                ),
                                                flags: 4,
                                                max_append_rate: 4194304,
                                                suspend: None,
                                            },
                                        ),
                                        derivation: None,
                                    },
                                ),
                                partition_selector: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-halve",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                priority: 0,
                                read_delay_seconds: 0,
                                shuffle_key: [
                                    "/len",
                                    "/partitionString",
                                ],
                                shuffle_lambda_config_json: b"",
                                lambda_config_json: b"null",
                                read_only: true,
                                journal_read_suffix: "derive/testing/int-halve/halveSelf.v4",
                                not_before: None,
                                not_after: None,
                                backfill: 4,
                            },
                        ],
                        shuffle_key_types: [
                            Integer,
                            String,
                        ],
                        shard_template: Some(
                            ShardSpec {
                                id: "derivation/testing/int-halve/2020202020202020",
                                sources: [],
                                recovery_log_prefix: "recovery",
                                hint_prefix: "/estuary/flow/hints",
                                hint_backups: 2,
                                max_txn_duration: Some(
                                    Duration {
                                        seconds: 1,
                                        nanos: 0,
                                    },
                                ),
                                min_txn_duration: Some(
                                    Duration {
                                        seconds: 0,
                                        nanos: 0,
                                    },
                                ),
                                disable: false,
                                hot_standbys: 0,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "2121212121212121",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/log-level",
                                                value: "info",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-name",
                                                value: "testing/int-halve",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-type",
                                                value: "derivation",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                disable_wait_for_ack: true,
                                ring_buffer_size: 65536,
                                read_channel_size: 4096,
                            },
                        ),
                        recovery_log_template: Some(
                            JournalSpec {
                                name: "recovery/derivation/testing/int-halve/2020202020202020",
                                replication: 3,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "content-type",
                                                value: "application/x-gazette-recoverylog",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "2121212121212121",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-name",
                                                value: "testing/int-halve",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-type",
                                                value: "derivation",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                fragment: Some(
                                    Fragment {
                                        length: 268435456,
                                        compression_codec: Snappy,
                                        stores: [
                                            "gs://recovery-bucket/some/",
                                        ],
                                        refresh_interval: Some(
                                            Duration {
                                                seconds: 300,
                                                nanos: 0,
                                            },
                                        ),
                                        retention: None,
                                        flush_interval: Some(
                                            Duration {
                                                seconds: 172800,
                                                nanos: 0,
                                            },
                                        ),
                                        path_postfix_template: "",
                                    },
                                ),
                                flags: 4,
                                max_append_rate: 4194304,
                                suspend: None,
                            },
                        ),
                        network_ports: [],
                        inactive_transforms: [],
                    },
                ),
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: 69cdcaa954eb68d0,
        },
        BuiltCollection {
            collection: testing/int-reverse,
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "schema": {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
              "key": [
                "/int"
              ],
              "projections": {
                "flow_published_custom": "/_meta/uuid/date-time"
              },
              "derive": {
                "using": {
                  "typescript": {
                    "module": "typescript module placeholder"
                  }
                },
                "transforms": [
                  {
                    "name": "reverseIntString",
                    "source": {
                      "name": "testing/int-string"
                    },
                    "shuffle": "any"
                  }
                ]
              }
            },
            model_fixes: [],
            validated: Validated {
                transforms: [
                    Transform {
                        read_only: true,
                    },
                ],
                generated_files: {},
            },
            spec: CollectionSpec {
                name: "testing/int-reverse",
                write_schema_json: b"{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                read_schema_json: b"",
                key: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/_meta/flow_truncated",
                        field: "_meta/flow_truncated",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "Flow truncation indicator",
                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/uuid",
                        field: "flow_published_custom",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "date-time",
                                        content_encoding: "uuid",
                                        max_length: 0,
                                    },
                                ),
                                title: "Flow Publication Time",
                                description: "Flow publication date-time of this document",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                ],
                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-reverse/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-reverse",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 86400,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                derivation: Some(
                    Derivation {
                        connector_type: Typescript,
                        config_json: b"{\"module\":\"typescript module placeholder\"}",
                        transforms: [
                            Transform {
                                name: "reverseIntString",
                                collection: Some(
                                    CollectionSpec {
                                        name: "testing/int-string",
                                        write_schema_json: b"{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                        read_schema_json: b"",
                                        key: [
                                            "/int",
                                        ],
                                        uuid_ptr: "/_meta/uuid",
                                        partition_fields: [
                                            "bit",
                                        ],
                                        projections: [
                                            Projection {
                                                ptr: "/int",
                                                field: "Int",
                                                explicit: true,
                                                is_partition_key: false,
                                                is_primary_key: true,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/_meta/flow_truncated",
                                                field: "_meta/flow_truncated",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "boolean",
                                                        ],
                                                        string: None,
                                                        title: "Flow truncation indicator",
                                                        description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/bit",
                                                field: "bit",
                                                explicit: true,
                                                is_partition_key: true,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "boolean",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "",
                                                field: "flow_document",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "object",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/_meta/uuid",
                                                field: "flow_published_at",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "date-time",
                                                                content_encoding: "uuid",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "Flow Publication Time",
                                                        description: "Flow publication date-time of this document",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/int",
                                                field: "int",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: true,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "integer",
                                                        ],
                                                        string: None,
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: Some(
                                                            Numeric {
                                                                has_minimum: false,
                                                                minimum: 0.0,
                                                                has_maximum: false,
                                                                maximum: 0.0,
                                                            },
                                                        ),
                                                        array: None,
                                                    },
                                                ),
                                            },
                                            Projection {
                                                ptr: "/str",
                                                field: "str",
                                                explicit: false,
                                                is_partition_key: false,
                                                is_primary_key: false,
                                                inference: Some(
                                                    Inference {
                                                        types: [
                                                            "string",
                                                        ],
                                                        string: Some(
                                                            String {
                                                                content_type: "",
                                                                format: "",
                                                                content_encoding: "",
                                                                max_length: 0,
                                                            },
                                                        ),
                                                        title: "",
                                                        description: "",
                                                        default_json: b"",
                                                        secret: false,
                                                        exists: Must,
                                                        numeric: None,
                                                        array: None,
                                                    },
                                                ),
                                            },
                                        ],
                                        ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                        partition_template: Some(
                                            JournalSpec {
                                                name: "testing/int-string/2020202020202020",
                                                replication: 3,
                                                labels: Some(
                                                    LabelSet {
                                                        labels: [
                                                            Label {
                                                                name: "app.gazette.dev/managed-by",
                                                                value: "estuary.dev/flow",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "content-type",
                                                                value: "application/x-ndjson",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "estuary.dev/build",
                                                                value: "2121212121212121",
                                                                prefix: false,
                                                            },
                                                            Label {
                                                                name: "estuary.dev/collection",
                                                                value: "testing/int-string",
                                                                prefix: false,
                                                            },
                                                        ],
                                                    },
                                                ),
                                                fragment: Some(
                                                    Fragment {
                                                        length: 536870912,
                                                        compression_codec: Gzip,
                                                        stores: [
                                                            "s3://data-bucket/",
                                                        ],
                                                        refresh_interval: Some(
                                                            Duration {
                                                                seconds: 300,
                                                                nanos: 0,
                                                            },
                                                        ),
                                                        retention: None,
                                                        flush_interval: Some(
                                                            Duration {
                                                                seconds: 86400,
                                                                nanos: 0,
                                                            },
                                                        ),
                                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                                    },
                                                ),
                                                flags: 4,
                                                max_append_rate: 4194304,
                                                suspend: None,
                                            },
                                        ),
                                        derivation: None,
                                    },
                                ),
                                partition_selector: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                priority: 0,
                                read_delay_seconds: 0,
                                shuffle_key: [],
                                shuffle_lambda_config_json: b"",
                                lambda_config_json: b"null",
                                read_only: true,
                                journal_read_suffix: "derive/testing/int-reverse/reverseIntString",
                                not_before: None,
                                not_after: None,
                                backfill: 0,
                            },
                        ],
                        shuffle_key_types: [],
                        shard_template: Some(
                            ShardSpec {
                                id: "derivation/testing/int-reverse/2020202020202020",
                                sources: [],
                                recovery_log_prefix: "recovery",
                                hint_prefix: "/estuary/flow/hints",
                                hint_backups: 2,
                                max_txn_duration: Some(
                                    Duration {
                                        seconds: 1,
                                        nanos: 0,
                                    },
                                ),
                                min_txn_duration: Some(
                                    Duration {
                                        seconds: 0,
                                        nanos: 0,
                                    },
                                ),
                                disable: false,
                                hot_standbys: 0,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "2121212121212121",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/log-level",
                                                value: "info",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-name",
                                                value: "testing/int-reverse",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-type",
                                                value: "derivation",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                disable_wait_for_ack: false,
                                ring_buffer_size: 65536,
                                read_channel_size: 4096,
                            },
                        ),
                        recovery_log_template: Some(
                            JournalSpec {
                                name: "recovery/derivation/testing/int-reverse/2020202020202020",
                                replication: 3,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "content-type",
                                                value: "application/x-gazette-recoverylog",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "2121212121212121",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-name",
                                                value: "testing/int-reverse",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/task-type",
                                                value: "derivation",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                fragment: Some(
                                    Fragment {
                                        length: 268435456,
                                        compression_codec: Snappy,
                                        stores: [
                                            "gs://recovery-bucket/some/",
                                        ],
                                        refresh_interval: Some(
                                            Duration {
                                                seconds: 300,
                                                nanos: 0,
                                            },
                                        ),
                                        retention: None,
                                        flush_interval: Some(
                                            Duration {
                                                seconds: 172800,
                                                nanos: 0,
                                            },
                                        ),
                                        path_postfix_template: "",
                                    },
                                ),
                                flags: 4,
                                max_append_rate: 4194304,
                                suspend: None,
                            },
                        ),
                        network_ports: [],
                        inactive_transforms: [],
                    },
                ),
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: 7b7094575b4afb18,
        },
        BuiltCollection {
            collection: testing/int-string,
            scope: test://example/int-string#/collections/testing~1int-string,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "schema": {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
              "key": [
                "/int"
              ],
              "projections": {
                "Int": "/int",
                "bit": {
                  "location": "/bit",
                  "partition": true
                }
              }
            },
            model_fixes: [],
            validated: NULL,
            spec: CollectionSpec {
                name: "testing/int-string",
                write_schema_json: b"{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                read_schema_json: b"",
                key: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [
                    "bit",
                ],
                projections: [
                    Projection {
                        ptr: "/int",
                        field: "Int",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/flow_truncated",
                        field: "_meta/flow_truncated",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "Flow truncation indicator",
                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/uuid",
                        field: "flow_published_at",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "date-time",
                                        content_encoding: "uuid",
                                        max_length: 0,
                                    },
                                ),
                                title: "Flow Publication Time",
                                description: "Flow publication date-time of this document",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                ],
                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-string/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-string",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 86400,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                derivation: None,
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: NULL,
        },
        BuiltCollection {
            collection: testing/int-string-ref-write-schema,
            scope: test://example/int-string#/collections/testing~1int-string-ref-write-schema,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "writeSchema": {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
              "readSchema": {"$id":"test://example/int-string?ptr=/collections/testing~1int-string-ref-write-schema/readSchema","$ref":"flow://write-schema","properties":{"addedProp":{"type":"string"}}},
              "key": [
                "/int"
              ]
            },
            model_fixes: [],
            validated: NULL,
            spec: CollectionSpec {
                name: "testing/int-string-ref-write-schema",
                write_schema_json: b"{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                read_schema_json: b"{\"$defs\":{\"flow://write-schema\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"flow://write-schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string?ptr=/collections/testing~1int-string-ref-write-schema/readSchema\",\"$ref\":\"flow://write-schema\",\"properties\":{\"addedProp\":{\"type\":\"string\"}}}",
                key: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/_meta/flow_truncated",
                        field: "_meta/flow_truncated",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "Flow truncation indicator",
                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/addedProp",
                        field: "addedProp",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: May,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/uuid",
                        field: "flow_published_at",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "date-time",
                                        content_encoding: "uuid",
                                        max_length: 0,
                                    },
                                ),
                                title: "Flow Publication Time",
                                description: "Flow publication date-time of this document",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                ],
                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-string-ref-write-schema/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-string-ref-write-schema",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 86400,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                derivation: None,
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: NULL,
        },
        BuiltCollection {
            collection: testing/int-string-rw,
            scope: test://example/int-string#/collections/testing~1int-string-rw,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "writeSchema": {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
              "readSchema": {"$defs":{"__flowInline1":{"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},"otherAnchor":{"$anchor":"Other","type":"integer"}},"$id":"test://example/canonical/int-string-len.schema","$ref":"../int-string.schema","additionalProperties":{"type":"boolean"},"properties":{"arr":{"additionalItems":{"$ref":"../int-string.schema#AnAnchor"},"type":"array"},"bit":{},"int":{},"len":{"type":"integer"},"partitionString":{"type":"string"},"str":{}},"required":["len","partitionString"]},
              "key": [
                "/int"
              ],
              "projections": {
                "Int": "/int",
                "Len": "/len",
                "Str": "/str",
                "bit": {
                  "location": "/bit",
                  "partition": true
                }
              }
            },
            model_fixes: [],
            validated: NULL,
            spec: CollectionSpec {
                name: "testing/int-string-rw",
                write_schema_json: b"{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                read_schema_json: b"{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                key: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [
                    "bit",
                ],
                projections: [
                    Projection {
                        ptr: "/int",
                        field: "Int",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "Len",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "Str",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/flow_truncated",
                        field: "_meta/flow_truncated",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "Flow truncation indicator",
                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr",
                        field: "arr",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "array",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: May,
                                numeric: None,
                                array: Some(
                                    Array {
                                        min_items: 0,
                                        has_max_items: false,
                                        max_items: 0,
                                        item_types: [
                                            "object",
                                        ],
                                    },
                                ),
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/uuid",
                        field: "flow_published_at",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "date-time",
                                        content_encoding: "uuid",
                                        max_length: 0,
                                    },
                                ),
                                title: "Flow Publication Time",
                                description: "Flow publication date-time of this document",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "len",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/partitionString",
                        field: "partitionString",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                ],
                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-string-rw/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-string-rw",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 86400,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                derivation: None,
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: NULL,
        },
        BuiltCollection {
            collection: testing/int-string.v2,
            scope: test://example/int-string#/collections/testing~1int-string.v2,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "schema": {"$defs":{"__flowInline1":{"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"}},"$id":"test://inlined/canonical/id","$ref":"test://example/int-string.schema"},
              "key": [
                "/int"
              ],
              "journals": {
                "fragments": {
                  "compressionCodec": "ZSTANDARD"
                }
              }
            },
            model_fixes: [],
            validated: NULL,
            spec: CollectionSpec {
                name: "testing/int-string.v2",
                write_schema_json: b"{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}},\"$id\":\"test://inlined/canonical/id\",\"$ref\":\"test://example/int-string.schema\"}",
                read_schema_json: b"",
                key: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/_meta/flow_truncated",
                        field: "_meta/flow_truncated",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "Flow truncation indicator",
                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/_meta/uuid",
                        field: "flow_published_at",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "date-time",
                                        content_encoding: "uuid",
                                        max_length: 0,
                                    },
                                ),
                                title: "Flow Publication Time",
                                description: "Flow publication date-time of this document",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: Some(
                                    Numeric {
                                        has_minimum: false,
                                        minimum: 0.0,
                                        has_maximum: false,
                                        maximum: 0.0,
                                    },
                                ),
                                array: None,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: b"",
                                secret: false,
                                exists: Must,
                                numeric: None,
                                array: None,
                            },
                        ),
                    },
                ],
                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-string.v2/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-string.v2",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Zstandard,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 86400,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                derivation: None,
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: NULL,
        },
    ],
    built_materializations: [
        BuiltMaterialization {
            materialization: testing/db-views,
            scope: test://example/db-views#/materializations/testing~1db-views,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "endpoint": {
                "connector": {
                  "image": "database/image",
                  "config": {"foo":"bar"}
                }
              },
              "bindings": [
                {
                  "resource": {"_meta":{"path":["view"]},"table":"the_table"},
                  "source": "testing/int-string",
                  "fields": {
                    "recommended": true
                  }
                }
              ],
              "shards": {
                "maxTxnDuration": "2m 3s",
                "logLevel": "warn"
              }
            },
            model_fixes: [
              "updated resource /_meta of 1 bindings"
            ],
            validated: Validated {
                bindings: [
                    Binding {
                        case_insensitive_fields: false,
                        constraints: {
                            "flow_document": Constraint {
                                r#type: LocationRequired,
                                reason: "location required",
                                folded_field: "",
                            },
                        },
                        resource_path: [
                            "view",
                        ],
                        delta_updates: false,
                        ser_policy: None,
                    },
                ],
            },
            spec: MaterializationSpec {
                name: "testing/db-views",
                connector_type: Image,
                config_json: b"{\"image\":\"database/image\",\"config\":{\"foo\":\"bar\"}}",
                bindings: [
                    Binding {
                        resource_config_json: b"{\"table\":\"the_table\"}",
                        resource_path: [
                            "view",
                        ],
                        collection: Some(
                            CollectionSpec {
                                name: "testing/int-string",
                                write_schema_json: b"{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                read_schema_json: b"",
                                key: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/flow_truncated",
                                        field: "_meta/flow_truncated",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "Flow truncation indicator",
                                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/uuid",
                                        field: "flow_published_at",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "date-time",
                                                        content_encoding: "uuid",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "Flow Publication Time",
                                                description: "Flow publication date-time of this document",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                ],
                                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string/2020202020202020",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "2121212121212121",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: Some(
                                                    Duration {
                                                        seconds: 86400,
                                                        nanos: 0,
                                                    },
                                                ),
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                        suspend: None,
                                    },
                                ),
                                derivation: None,
                            },
                        ),
                        partition_selector: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                        priority: 0,
                        field_selection: Some(
                            FieldSelection {
                                keys: [],
                                values: [],
                                document: "flow_document",
                                field_config_json_map: {},
                            },
                        ),
                        delta_updates: false,
                        deprecated_shuffle: None,
                        journal_read_suffix: "materialize/testing/db-views/view",
                        not_before: None,
                        not_after: None,
                        backfill: 0,
                        state_key: "view",
                        ser_policy: None,
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "materialize/testing/db-views/2020202020202020",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 123,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "warn",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-views",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 4096,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/materialize/testing/db-views/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-views",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 172800,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                network_ports: [],
                inactive_bindings: [],
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: 7b7094575b4afb18,
        },
        BuiltMaterialization {
            materialization: testing/webhook/deliveries,
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries,
            control_id: "0000000000000000",
            data_plane_id: "1d1d1d1d1d1d1d1d",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "endpoint": {
                "connector": {
                  "image": "webhook/connector",
                  "config": {"address":"http://example/webhook"}
                }
              },
              "bindings": [
                {
                  "resource": {"_meta":{"path":["Web!hook","foo bar"]},"fixture":"one"},
                  "source": {
                    "name": "testing/int-string",
                    "partitions": {
                      "include": {
                        "bit": [
                          true
                        ]
                      },
                      "exclude": {}
                    },
                    "notBefore": "2017-03-03T03:02:01Z"
                  },
                  "fields": {
                    "groupBy": [
                      "Int"
                    ],
                    "require": {
                      "str": {"pass":"through"}
                    },
                    "exclude": [
                      "bit"
                    ],
                    "recommended": true
                  }
                },
                {
                  "resource": {"_meta":{"path":["targe+","two"]},"fixture":"two"},
                  "source": "testing/int-halve",
                  "priority": 3,
                  "fields": {
                    "require": {
                      "Len": {}
                    },
                    "recommended": false
                  },
                  "backfill": 7
                }
              ]
            },
            model_fixes: [
              "updated resource /_meta of 2 bindings"
            ],
            validated: Validated {
                bindings: [
                    Binding {
                        case_insensitive_fields: false,
                        constraints: {
                            "Int": Constraint {
                                r#type: LocationRecommended,
                                reason: "recommended",
                                folded_field: "",
                            },
                            "bit": Constraint {
                                r#type: FieldForbidden,
                                reason: "field forbidden",
                                folded_field: "",
                            },
                            "flow_document": Constraint {
                                r#type: LocationRequired,
                                reason: "location required",
                                folded_field: "",
                            },
                            "int": Constraint {
                                r#type: FieldRequired,
                                reason: "field required",
                                folded_field: "",
                            },
                            "str": Constraint {
                                r#type: FieldOptional,
                                reason: "optional",
                                folded_field: "",
                            },
                        },
                        resource_path: [
                            "Web!hook",
                            "foo bar",
                        ],
                        delta_updates: true,
                        ser_policy: None,
                    },
                    Binding {
                        case_insensitive_fields: false,
                        constraints: {
                            "Extra": Constraint {
                                r#type: LocationRequired,
                                reason: "location required",
                                folded_field: "",
                            },
                            "Len": Constraint {
                                r#type: LocationRecommended,
                                reason: "optional",
                                folded_field: "",
                            },
                            "Root": Constraint {
                                r#type: LocationRequired,
                                reason: "location required",
                                folded_field: "",
                            },
                            "int": Constraint {
                                r#type: FieldRequired,
                                reason: "required",
                                folded_field: "",
                            },
                        },
                        resource_path: [
                            "targe+",
                            "two",
                        ],
                        delta_updates: true,
                        ser_policy: None,
                    },
                ],
            },
            spec: MaterializationSpec {
                name: "testing/webhook/deliveries",
                connector_type: Image,
                config_json: b"{\"image\":\"webhook/connector\",\"config\":{\"address\":\"http://example/webhook\"}}",
                bindings: [
                    Binding {
                        resource_config_json: b"{\"fixture\":\"one\"}",
                        resource_path: [
                            "Web!hook",
                            "foo bar",
                        ],
                        collection: Some(
                            CollectionSpec {
                                name: "testing/int-string",
                                write_schema_json: b"{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                read_schema_json: b"",
                                key: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/flow_truncated",
                                        field: "_meta/flow_truncated",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "Flow truncation indicator",
                                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/uuid",
                                        field: "flow_published_at",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "date-time",
                                                        content_encoding: "uuid",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "Flow Publication Time",
                                                description: "Flow publication date-time of this document",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                ],
                                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string/2020202020202020",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "2121212121212121",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: Some(
                                                    Duration {
                                                        seconds: 86400,
                                                        nanos: 0,
                                                    },
                                                ),
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                        suspend: None,
                                    },
                                ),
                                derivation: None,
                            },
                        ),
                        partition_selector: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/field/bit",
                                                value: "%_true",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                        priority: 0,
                        field_selection: Some(
                            FieldSelection {
                                keys: [
                                    "int",
                                ],
                                values: [
                                    "str",
                                ],
                                document: "flow_document",
                                field_config_json_map: {
                                    "str": b"{\"pass\":\"through\"}",
                                },
                            },
                        ),
                        delta_updates: true,
                        deprecated_shuffle: None,
                        journal_read_suffix: "materialize/testing/webhook/deliveries/Web%21hook%2Ffoo%20bar",
                        not_before: Some(
                            Timestamp {
                                seconds: 1488510121,
                                nanos: 0,
                            },
                        ),
                        not_after: None,
                        backfill: 0,
                        state_key: "Web%21hook%2Ffoo%20bar",
                        ser_policy: None,
                    },
                    Binding {
                        resource_config_json: b"{\"fixture\":\"two\"}",
                        resource_path: [
                            "targe+",
                            "two",
                        ],
                        collection: Some(
                            CollectionSpec {
                                name: "testing/int-halve",
                                write_schema_json: b"{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                                read_schema_json: b"",
                                key: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "Len",
                                    "TheString",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/extra",
                                        field: "Extra",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: May,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/len",
                                        field: "Len",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "Root",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/partitionString",
                                        field: "TheString",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/flow_truncated",
                                        field: "_meta/flow_truncated",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "Flow truncation indicator",
                                                description: "Indicates whether any of the materialized values for this row have been truncated to make them fit inside the limitations of the destination system.",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr",
                                        field: "arr",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "array",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: May,
                                                numeric: None,
                                                array: Some(
                                                    Array {
                                                        min_items: 0,
                                                        has_max_items: false,
                                                        max_items: 0,
                                                        item_types: [
                                                            "object",
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/_meta/uuid",
                                        field: "flow_published_at",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "date-time",
                                                        content_encoding: "uuid",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "Flow Publication Time",
                                                description: "Flow publication date-time of this document",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/len",
                                        field: "len",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: Some(
                                                    Numeric {
                                                        has_minimum: false,
                                                        minimum: 0.0,
                                                        has_maximum: false,
                                                        maximum: 0.0,
                                                    },
                                                ),
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/partitionString",
                                        field: "partitionString",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: b"",
                                                secret: false,
                                                exists: Must,
                                                numeric: None,
                                                array: None,
                                            },
                                        ),
                                    },
                                ],
                                ack_template_json: b"{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-halve/2020202020202020",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "2121212121212121",
                                                        prefix: false,
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-halve",
                                                        prefix: false,
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 104857600,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: Some(
                                                    Duration {
                                                        seconds: 900,
                                                        nanos: 0,
                                                    },
                                                ),
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                        suspend: None,
                                    },
                                ),
                                derivation: None,
                            },
                        ),
                        partition_selector: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-halve",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                        priority: 3,
                        field_selection: Some(
                            FieldSelection {
                                keys: [
                                    "int",
                                ],
                                values: [
                                    "Extra",
                                    "Len",
                                ],
                                document: "Root",
                                field_config_json_map: {
                                    "Len": b"{}",
                                },
                            },
                        ),
                        delta_updates: true,
                        deprecated_shuffle: None,
                        journal_read_suffix: "materialize/testing/webhook/deliveries/targe+%2Ftwo.v7",
                        not_before: None,
                        not_after: None,
                        backfill: 7,
                        state_key: "targe+%2Ftwo.v7",
                        ser_policy: None,
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "materialize/testing/webhook/deliveries/2020202020202020",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1200,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "567",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "789",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/hostname",
                                        value: "7c018f7d92537c75",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/port-proto/789",
                                        value: "h2",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/port-public/567",
                                        value: "true",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/webhook/deliveries",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 4096,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/materialize/testing/webhook/deliveries/2020202020202020",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "2121212121212121",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/webhook/deliveries",
                                        prefix: false,
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                        prefix: false,
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 172800,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                        suspend: None,
                    },
                ),
                network_ports: [
                    NetworkPort {
                        number: 567,
                        protocol: "",
                        public: true,
                    },
                    NetworkPort {
                        number: 789,
                        protocol: "h2",
                        public: false,
                    },
                ],
                inactive_bindings: [],
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: eb394238d06f9a98,
        },
    ],
    built_tests: [
        BuiltTest {
            test: testing/test,
            scope: test://example/int-string-tests#/tests/testing~1test,
            control_id: "0000000000000000",
            expect_pub_id: "0000000000000000",
            expect_build_id: "0000000000000000",
            model: {
              "steps": [
                {
                  "ingest": {
                    "collection": "testing/int-string",
                    "documents": [{"bit":true,"int":42,"str":"string A"},{"bit":true,"int":52,"str":"string B"}]
                  }
                },
                {
                  "verify": {
                    "description": "expect stuff happens",
                    "collection": {
                      "name": "testing/int-string",
                      "partitions": {
                        "include": {
                          "bit": [
                            true
                          ]
                        },
                        "exclude": {}
                      }
                    },
                    "documents": [{"str":"string A"},{"str":"string B"}]
                  }
                }
              ]
            },
            model_fixes: [],
            spec: TestSpec {
                name: "testing/test",
                steps: [
                    Step {
                        step_type: Ingest,
                        step_index: 0,
                        description: "",
                        step_scope: "test://example/int-string-tests#/tests/testing~1test/0/ingest",
                        collection: "testing/int-string",
                        docs_json_vec: [
                            b"{\"bit\":true,\"int\":42,\"str\":\"string A\"}",
                            b"{\"bit\":true,\"int\":52,\"str\":\"string B\"}",
                        ],
                        partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                    },
                    Step {
                        step_type: Verify,
                        step_index: 1,
                        description: "expect stuff happens",
                        step_scope: "test://example/int-string-tests#/tests/testing~1test/1/verify",
                        collection: "testing/int-string",
                        docs_json_vec: [
                            b"{\"str\":\"string A\"}",
                            b"{\"str\":\"string B\"}",
                        ],
                        partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                                prefix: false,
                                            },
                                            Label {
                                                name: "estuary.dev/field/bit",
                                                value: "%_true",
                                                prefix: false,
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                    },
                ],
            },
            previous_spec: NULL,
            is_touch: 0,
            dependency_hash: 7b7094575b4afb18,
        },
    ],
    captures: [
        DraftCapture {
            capture: testing/db-cdc,
            scope: test://example/int-string-captures#/captures/testing~1db-cdc,
            expect_pub_id: NULL,
            model: {
              "endpoint": {
                "connector": {
                  "image": "database",
                  "config": {"host":"a.host.name","user":"a-user"}
                }
              },
              "bindings": [
                {
                  "resource": {"namespace":"and namespace","stream":"other-stream"},
                  "target": "testing/int-string",
                  "backfill": 3
                }
              ],
              "shards": {
                "minTxnDuration": "10s",
                "hotStandbys": 1
              }
            },
            is_touch: 0,
        },
        DraftCapture {
            capture: testing/s3-source,
            scope: test://example/int-string-captures#/captures/testing~1s3-source,
            expect_pub_id: NULL,
            model: {
              "endpoint": {
                "connector": {
                  "image": "s3",
                  "config": {"bucket":"a-bucket","prefix":"and-prefix"}
                }
              },
              "bindings": [
                {
                  "resource": {"stream":"a-stream"},
                  "target": "testing/int-string"
                },
                {
                  "resource": {"stream":"v2-stream"},
                  "target": "testing/int-string.v2"
                }
              ],
              "interval": "10m"
            },
            is_touch: 0,
        },
    ],
    collections: [
        DraftCollection {
            collection: testing/array-key,
            scope: test://example/array-key#/collections/testing~1array-key,
            expect_pub_id: NULL,
            model: {
              "schema": {"$id":"test://example/array-key.schema","properties":{"arr":{"items":{"properties":{"aKey":{"type":"integer"}},"required":["aKey"],"type":"object"},"minItems":5,"type":"array"}},"required":["arr"],"type":"object"},
              "key": [
                "/arr/0/aKey"
              ],
              "projections": {
                "aKeyOne": "/arr/1/aKey"
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: testing/from-array-key,
            scope: test://example/from-array-key#/collections/testing~1from-array-key,
            expect_pub_id: NULL,
            model: {
              "schema": {"$id":"test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema","properties":{"someKey":{"type":"integer"}},"required":["someKey"],"type":"object"},
              "key": [
                "/someKey"
              ],
              "derive": {
                "using": {
                  "sqlite": {
                    "migrations": [
                      "select migration;",
                      "test://example/mi%C3%9F%C3%9Fing/migration.sql"
                    ]
                  }
                },
                "transforms": [
                  {
                    "name": "withBar",
                    "source": {
                      "name": "testing/array-key"
                    },
                    "shuffle": {
                      "key": [
                        "/arr/2/aKey"
                      ]
                    },
                    "lambda": "select aKeyOne as \"an-int\", json_object('timestamp', strftime('%Y-%m-%dT%H:%M:%SZ')) as two from source;\n"
                  },
                  {
                    "name": "withFoo",
                    "source": {
                      "name": "testing/array-key"
                    },
                    "shuffle": {
                      "key": [
                        "/arr/3/aKey"
                      ]
                    },
                    "lambda": "select s.aKeyOne, s.arr, s.\"arr/0/aKey\", r.\"an-int\", r.\"nested/timestamp\" from source as s, register as r;\n"
                  }
                ]
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: testing/int-halve,
            scope: test://example/int-halve#/collections/testing~1int-halve,
            expect_pub_id: NULL,
            model: {
              "schema": {"$defs":{"__flowInline1":{"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},"otherAnchor":{"$anchor":"Other","type":"integer"}},"$id":"test://example/canonical/int-string-len.schema","$ref":"../int-string.schema","additionalProperties":{"type":"boolean"},"properties":{"arr":{"additionalItems":{"$ref":"../int-string.schema#AnAnchor"},"type":"array"},"bit":{},"int":{},"len":{"type":"integer"},"partitionString":{"type":"string"},"str":{}},"required":["len","partitionString"]},
              "key": [
                "/int"
              ],
              "projections": {
                "Extra": "/extra",
                "Len": {
                  "location": "/len",
                  "partition": true
                },
                "Root": "",
                "TheString": {
                  "location": "/partitionString",
                  "partition": true
                }
              },
              "journals": {
                "fragments": {
                  "length": 100,
                  "flushInterval": "15m"
                }
              },
              "derive": {
                "using": {
                  "typescript": {
                    "module": "another typescript placeholder\n"
                  }
                },
                "transforms": [
                  {
                    "name": "halveIntString",
                    "source": {
                      "name": "testing/int-string-rw",
                      "partitions": {
                        "include": {
                          "bit": [
                            true
                          ]
                        },
                        "exclude": {
                          "bit": [
                            false
                          ]
                        }
                      },
                      "notAfter": "2019-03-06T09:30:02Z"
                    },
                    "shuffle": {
                      "key": [
                        "/len",
                        "/str"
                      ]
                    }
                  },
                  {
                    "name": "halveSelf",
                    "source": {
                      "name": "testing/int-halve"
                    },
                    "shuffle": {
                      "key": [
                        "/len",
                        "/partitionString"
                      ]
                    },
                    "backfill": 4
                  }
                ]
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: testing/int-reverse,
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            expect_pub_id: NULL,
            model: {
              "schema": {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
              "key": [
                "/int"
              ],
              "projections": {
                "flow_published_custom": "/_meta/uuid/date-time"
              },
              "derive": {
                "using": {
                  "typescript": {
                    "module": "typescript module placeholder"
                  }
                },
                "transforms": [
                  {
                    "name": "reverseIntString",
                    "source": {
                      "name": "testing/int-string"
                    },
                    "shuffle": "any"
                  }
                ]
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: testing/int-string,
            scope: test://example/int-string#/collections/testing~1int-string,
            expect_pub_id: NULL,
            model: {
              "schema": {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
              "key": [
                "/int"
              ],
              "projections": {
                "Int": "/int",
                "bit": {
                  "location": "/bit",
                  "partition": true
                }
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: testing/int-string-ref-write-schema,
            scope: test://example/int-string#/collections/testing~1int-string-ref-write-schema,
            expect_pub_id: NULL,
            model: {
              "writeSchema": {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
              "readSchema": {"$id":"test://example/int-string?ptr=/collections/testing~1int-string-ref-write-schema/readSchema","$ref":"flow://write-schema","properties":{"addedProp":{"type":"string"}}},
              "key": [
                "/int"
              ]
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: testing/int-string-rw,
            scope: test://example/int-string#/collections/testing~1int-string-rw,
            expect_pub_id: NULL,
            model: {
              "writeSchema": {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
              "readSchema": {"$defs":{"__flowInline1":{"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},"otherAnchor":{"$anchor":"Other","type":"integer"}},"$id":"test://example/canonical/int-string-len.schema","$ref":"../int-string.schema","additionalProperties":{"type":"boolean"},"properties":{"arr":{"additionalItems":{"$ref":"../int-string.schema#AnAnchor"},"type":"array"},"bit":{},"int":{},"len":{"type":"integer"},"partitionString":{"type":"string"},"str":{}},"required":["len","partitionString"]},
              "key": [
                "/int"
              ],
              "projections": {
                "Int": "/int",
                "Len": "/len",
                "Str": "/str",
                "bit": {
                  "location": "/bit",
                  "partition": true
                }
              }
            },
            is_touch: 0,
        },
        DraftCollection {
            collection: testing/int-string.v2,
            scope: test://example/int-string#/collections/testing~1int-string.v2,
            expect_pub_id: NULL,
            model: {
              "schema": {"$defs":{"__flowInline1":{"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"$id":"test://example/int-string.schema","properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"}},"$id":"test://inlined/canonical/id","$ref":"test://example/int-string.schema"},
              "key": [
                "/int"
              ],
              "journals": {
                "fragments": {
                  "compressionCodec": "ZSTANDARD"
                }
              }
            },
            is_touch: 0,
        },
    ],
    errors: [],
    errors_draft: [
        Error {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derive/using/sqlite/migrations/1,
            error: failed to fetch resource test://example/mi%C3%9F%C3%9Fing/migration.sql: fixture not found,
        },
    ],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/array-key,
        },
        Fetch {
            depth: 2,
            resource: test://example/db-views,
        },
        Fetch {
            depth: 2,
            resource: test://example/from-array-key,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-halve,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-reverse,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-string,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-string-captures,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-string-tests,
        },
        Fetch {
            depth: 2,
            resource: test://example/webhook-deliveries,
        },
        Fetch {
            depth: 3,
            resource: test://example/array-key.schema,
        },
        Fetch {
            depth: 3,
            resource: test://example/cdc-config.yaml,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-halve.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-reverse.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-string-len.schema,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-string.schema,
        },
        Fetch {
            depth: 3,
            resource: test://example/mi%C3%9F%C3%9Fing/migration.sql,
        },
        Fetch {
            depth: 3,
            resource: test://example/webhook-config.yaml,
        },
    ],
    imports: [
        Import {
            scope: test://example/catalog.yaml#/import/0,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/catalog.yaml#/import/1,
            to_resource: test://example/int-reverse,
        },
        Import {
            scope: test://example/catalog.yaml#/import/2,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/catalog.yaml#/import/3,
            to_resource: test://example/int-string-captures,
        },
        Import {
            scope: test://example/catalog.yaml#/import/4,
            to_resource: test://example/webhook-deliveries,
        },
        Import {
            scope: test://example/catalog.yaml#/import/5,
            to_resource: test://example/db-views,
        },
        Import {
            scope: test://example/catalog.yaml#/import/6,
            to_resource: test://example/int-string-tests,
        },
        Import {
            scope: test://example/catalog.yaml#/import/7,
            to_resource: test://example/array-key,
        },
        Import {
            scope: test://example/catalog.yaml#/import/8,
            to_resource: test://example/from-array-key,
        },
        Import {
            scope: test://example/db-views#/import/0,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derive/using/sqlite/migrations/1,
            to_resource: test://example/mi%C3%9F%C3%9Fing/migration.sql,
        },
        Import {
            scope: test://example/from-array-key#/import/0,
            to_resource: test://example/array-key,
        },
        Import {
            scope: test://example/int-reverse#/import/0,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-string#/collections/testing~1int-string.v2/schema/$ref,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string#/import/0,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/int-string-captures#/import/0,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-string-len.schema#/$ref,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string-len.schema#/properties/arr/additionalItems/$ref,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string-tests#/import/0,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/webhook-deliveries#/import/0,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/webhook-deliveries#/import/1,
            to_resource: test://example/int-halve,
        },
    ],
    materializations: [
        DraftMaterialization {
            materialization: testing/db-views,
            scope: test://example/db-views#/materializations/testing~1db-views,
            expect_pub_id: NULL,
            model: {
              "endpoint": {
                "connector": {
                  "image": "database/image",
                  "config": {"foo":"bar"}
                }
              },
              "bindings": [
                {
                  "resource": {"table":"the_table"},
                  "source": "testing/int-string",
                  "fields": {
                    "recommended": true
                  }
                }
              ],
              "shards": {
                "maxTxnDuration": "2m 3s",
                "logLevel": "warn"
              }
            },
            is_touch: 0,
        },
        DraftMaterialization {
            materialization: testing/webhook/deliveries,
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries,
            expect_pub_id: NULL,
            model: {
              "endpoint": {
                "connector": {
                  "image": "webhook/connector",
                  "config": {"address":"http://example/webhook"}
                }
              },
              "bindings": [
                {
                  "resource": {"fixture":"one"},
                  "source": {
                    "name": "testing/int-string",
                    "partitions": {
                      "include": {
                        "bit": [
                          true
                        ]
                      },
                      "exclude": {}
                    },
                    "notBefore": "2017-03-03T03:02:01Z"
                  },
                  "fields": {
                    "groupBy": [
                      "Int"
                    ],
                    "require": {
                      "str": {"pass":"through"}
                    },
                    "exclude": [
                      "bit"
                    ],
                    "recommended": true
                  }
                },
                {
                  "resource": {"fixture":"two"},
                  "source": "testing/int-halve",
                  "priority": 3,
                  "fields": {
                    "require": {
                      "Len": {}
                    },
                    "recommended": false
                  },
                  "backfill": 7
                }
              ]
            },
            is_touch: 0,
        },
    ],
    resources: [
        Resource {
            resource: test://example/array-key,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/array-key":{"key":["/arr/0/aKey"],"projections":{"aKeyOne":"/arr/1/aKey"},"schema":"test://example/array-key.schema"}}},
        },
        Resource {
            resource: test://example/array-key.schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"properties":{"arr":{"items":{"properties":{"aKey":{"type":"integer"}},"required":["aKey"],"type":"object"},"minItems":5,"type":"array"}},"required":["arr"],"type":"object"},
        },
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["test://example/int-string","test://example/int-reverse","test://example/int-halve","test://example/int-string-captures","test://example/webhook-deliveries","test://example/db-views","test://example/int-string-tests","test://example/array-key","test://example/from-array-key"]},
        },
        Resource {
            resource: test://example/cdc-config.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"host":"a.host.name","user":"a-user"},
        },
        Resource {
            resource: test://example/db-views,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["test://example/int-string"],"materializations":{"testing/db-views":{"bindings":[{"resource":{"table":"the_table"},"source":"testing/int-string"}],"endpoint":{"connector":{"config":{"foo":"bar"},"image":"database/image"}},"shards":{"logLevel":"warn","maxTxnDuration":"123s"}}}},
        },
        Resource {
            resource: test://example/from-array-key,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/from-array-key":{"derive":{"transforms":[{"lambda":"select aKeyOne as \"an-int\", json_object('timestamp', strftime('%Y-%m-%dT%H:%M:%SZ')) as two from source;\n","name":"withBar","shuffle":{"key":["/arr/2/aKey"]},"source":{"name":"testing/array-key"}},{"lambda":"select s.aKeyOne, s.arr, s.\"arr/0/aKey\", r.\"an-int\", r.\"nested/timestamp\" from source as s, register as r;\n","name":"withFoo","shuffle":{"key":["/arr/3/aKey"]},"source":{"name":"testing/array-key"}}],"using":{"sqlite":{"migrations":["select migration;","./mißßing/migration.sql"]}}},"key":["/someKey"],"schema":{"properties":{"someKey":{"type":"integer"}},"required":["someKey"],"type":"object"}}},"import":["test://example/array-key"]},
        },
        Resource {
            resource: test://example/int-halve,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/int-halve":{"derive":{"transforms":[{"name":"halveIntString","shuffle":{"key":["/len","/str"]},"source":{"name":"testing/int-string-rw","notAfter":"2019-03-06T09:30:02Z","partitions":{"exclude":{"bit":[false]},"include":{"bit":[true]}}}},{"backfill":4,"name":"halveSelf","shuffle":{"key":["/len","/partitionString"]},"source":{"name":"testing/int-halve"}}],"using":{"typescript":{"module":"int-halve.ts"}}},"journals":{"fragments":{"flushInterval":"15m","length":100}},"key":["/int"],"projections":{"Extra":"/extra","Len":{"location":"/len","partition":true},"Root":"","TheString":{"location":"/partitionString","partition":true}},"schema":"test://example/int-string-len.schema"}}},
        },
        Resource {
            resource: test://example/int-halve.ts,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: "another typescript placeholder\n",
        },
        Resource {
            resource: test://example/int-reverse,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/int-reverse":{"derive":{"transforms":[{"name":"reverseIntString","shuffle":"any","source":{"name":"testing/int-string"}}],"using":{"typescript":{"module":"int-reverse.ts"}}},"key":["/int"],"projections":{"flow_published_custom":"/_meta/uuid/date-time"},"schema":"test://example/int-string.schema"}},"import":["test://example/int-string"]},
        },
        Resource {
            resource: test://example/int-reverse.ts,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: "typescript module placeholder",
        },
        Resource {
            resource: test://example/int-string,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/int-string":{"key":["/int"],"projections":{"Int":"/int","bit":{"location":"/bit","partition":true}},"schema":"test://example/int-string.schema"},"testing/int-string-ref-write-schema":{"key":["/int"],"readSchema":{"$ref":"flow://write-schema","properties":{"addedProp":{"type":"string"}}},"writeSchema":"test://example/int-string.schema"},"testing/int-string-rw":{"key":["/int"],"projections":{"Int":"/int","Len":"/len","Str":"/str","bit":{"location":"/bit","partition":true}},"readSchema":"test://example/int-string-len.schema","writeSchema":"test://example/int-string.schema"},"testing/int-string.v2":{"journals":{"fragments":{"compressionCodec":"ZSTANDARD"}},"key":["/int"],"schema":{"$id":"test://inlined/canonical/id","$ref":"test://example/int-string.schema"}}},"import":["test://example/int-halve"]},
        },
        Resource {
            resource: test://example/int-string-captures,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"captures":{"testing/db-cdc":{"bindings":[{"backfill":3,"resource":{"namespace":"and namespace","stream":"other-stream"},"target":"testing/int-string"}],"endpoint":{"connector":{"config":"cdc-config.yaml","image":"database"}},"shards":{"hotStandbys":1,"minTxnDuration":"10s"}},"testing/s3-source":{"bindings":[{"resource":{"stream":"a-stream"},"target":"testing/int-string"},{"resource":{"stream":"v2-stream"},"target":"testing/int-string.v2"}],"endpoint":{"connector":{"config":{"bucket":"a-bucket","prefix":"and-prefix"},"image":"s3"}},"interval":"10m"}},"import":["test://example/int-string"]},
        },
        Resource {
            resource: test://example/int-string-len.schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"$defs":{"otherAnchor":{"$anchor":"Other","type":"integer"}},"$id":"test://example/canonical/int-string-len.schema","$ref":"../int-string.schema","additionalProperties":{"type":"boolean"},"properties":{"arr":{"additionalItems":{"$ref":"../int-string.schema#AnAnchor"},"type":"array"},"bit":{},"int":{},"len":{"type":"integer"},"partitionString":{"type":"string"},"str":{}},"required":["len","partitionString"]},
        },
        Resource {
            resource: test://example/int-string-tests,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["test://example/int-string"],"tests":{"testing/test":[{"ingest":{"collection":"testing/int-string","documents":[{"bit":true,"int":42,"str":"string A"},{"bit":true,"int":52,"str":"string B"}]}},{"verify":{"collection":{"name":"testing/int-string","partitions":{"include":{"bit":[true]}}},"description":"expect stuff happens","documents":[{"str":"string A"},{"str":"string B"}]}}]}},
        },
        Resource {
            resource: test://example/int-string.schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
        },
        Resource {
            resource: test://example/webhook-config.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"address":"http://example/webhook"},
        },
        Resource {
            resource: test://example/webhook-deliveries,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["test://example/int-string","test://example/int-halve"],"materializations":{"testing/webhook/deliveries":{"bindings":[{"fields":{"exclude":["bit"],"groupBy":["Int"],"recommended":true,"require":{"str":{"pass":"through"}}},"resource":{"fixture":"one"},"source":{"name":"testing/int-string","notBefore":"2017-03-03T03:02:01Z","partitions":{"include":{"bit":[true]}}}},{"backfill":7,"fields":{"recommended":false,"require":{"Len":{}}},"priority":3,"resource":{"fixture":"two"},"source":"testing/int-halve"}],"endpoint":{"connector":{"config":"webhook-config.yaml","image":"webhook/connector"}}}}},
        },
    ],
    storage_mappings: [
        StorageMapping {
            catalog_prefix: not-matched/,
            control_id: "0000000000000000",
            stores: [
              {
                "provider": "AZURE",
                "account_tenant_id": "mozzarella",
                "storage_account_name": "pizza",
                "container_name": "pepperoni",
                "prefix": "pineapple/"
              }
            ],
        },
        StorageMapping {
            catalog_prefix: recovery/testing/,
            control_id: "0000000000000000",
            stores: [
              {
                "provider": "GCS",
                "bucket": "recovery-bucket",
                "prefix": "some/"
              }
            ],
        },
        StorageMapping {
            catalog_prefix: testing/,
            control_id: "0000000000000000",
            stores: [
              {
                "provider": "S3",
                "bucket": "data-bucket",
                "prefix": null,
                "region": null
              }
            ],
        },
    ],
    tests: [
        DraftTest {
            test: testing/test,
            scope: test://example/int-string-tests#/tests/testing~1test,
            expect_pub_id: NULL,
            model: {
              "steps": [
                {
                  "ingest": {
                    "collection": "testing/int-string",
                    "documents": [{"bit":true,"int":42,"str":"string A"},{"bit":true,"int":52,"str":"string B"}]
                  }
                },
                {
                  "verify": {
                    "description": "expect stuff happens",
                    "collection": {
                      "name": "testing/int-string",
                      "partitions": {
                        "include": {
                          "bit": [
                            true
                          ]
                        },
                        "exclude": {}
                      }
                    },
                    "documents": [{"str":"string A"},{"str":"string B"}]
                  }
                }
              ]
            },
            is_touch: 0,
        },
    ],
}
