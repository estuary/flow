---
source: crates/validation/tests/scenario_tests.rs
expression: tables
---
All {
    built_collections: [
        BuiltCollection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            spec: CollectionSpec {
                collection: "testing/int-reverse",
                schema_uri: "test://example/int-string.schema",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                must_exist: true,
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
            },
        },
        BuiltCollection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            spec: CollectionSpec {
                collection: "testing/int-string",
                schema_uri: "test://example/int-string.schema",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [
                    "bit",
                ],
                projections: [
                    Projection {
                        ptr: "/int",
                        field: "Int",
                        user_provided: true,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        user_provided: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                must_exist: true,
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
            },
        },
        BuiltCollection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            spec: CollectionSpec {
                collection: "testing/int-halve",
                schema_uri: "test://example/int-string-len.schema",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [
                    "Len",
                ],
                projections: [
                    Projection {
                        ptr: "/extra",
                        field: "Extra",
                        user_provided: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: false,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "Len",
                        user_provided: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "Root",
                        user_provided: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr",
                        field: "arr",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "array",
                                ],
                                must_exist: false,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/extra",
                        field: "extra",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: false,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "len",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                must_exist: true,
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
            },
        },
    ],
    built_derivations: [
        BuiltDerivation {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation,
            derivation: testing/int-reverse,
            spec: DerivationSpec {
                collection: None,
                register_schema_uri: "test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema",
                register_initial_json: "null",
                transforms: [],
            },
        },
        BuiltDerivation {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation,
            derivation: testing/int-halve,
            spec: DerivationSpec {
                collection: None,
                register_schema_uri: "test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema",
                register_initial_json: "42",
                transforms: [],
            },
        },
    ],
    built_materializations: [
        BuiltMaterialization {
            scope: test://example/int-string-materialization#/materializations/0,
            materialization: materializeEndpoint/table/The%20One,
            collection: testing/int-string,
            endpoint_type: "S3",
            spec: MaterializationSpec {
                materialization: "materializeEndpoint/table/The%20One",
                collection: None,
                endpoint_name: "materializeEndpoint",
                endpoint_type: S3,
                endpoint_config_json: "{\"bucket\":\"a-bucket\",\"fixture\":\"one\",\"prefix\":\"and-prefix\"}",
                endpoint_resource_path: [
                    "table",
                    "The One",
                ],
                field_selection: Some(
                    FieldSelection {
                        keys: [
                            "int",
                        ],
                        values: [
                            "str",
                        ],
                        document: "flow_document",
                        field_config: {
                            "str": "{\"pass\":\"through\"}",
                        },
                    },
                ),
                shuffle: Some(
                    Shuffle {
                        group_name: "materialize/materializeEndpoint/table/The%20One",
                        source_collection: "testing/int-string",
                        source_partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                        source_uuid_ptr: "/_meta/uuid",
                        shuffle_key_ptr: [
                            "/int",
                        ],
                        uses_source_key: true,
                        shuffle_lambda: None,
                        source_schema_uri: "test://example/int-string.schema",
                        uses_source_schema: true,
                        filter_r_clocks: false,
                        hash: None,
                        read_delay_seconds: 0,
                        priority: 0,
                    },
                ),
            },
        },
        BuiltMaterialization {
            scope: test://example/int-halve-materialization#/materializations/0,
            materialization: materializeEndpoint/tab%21e/two,
            collection: testing/int-halve,
            endpoint_type: "S3",
            spec: MaterializationSpec {
                materialization: "materializeEndpoint/tab%21e/two",
                collection: None,
                endpoint_name: "materializeEndpoint",
                endpoint_type: S3,
                endpoint_config_json: "{\"bucket\":\"a-bucket\",\"fixture\":\"two\",\"prefix\":\"and-prefix\"}",
                endpoint_resource_path: [
                    "tab!e",
                    "two",
                ],
                field_selection: Some(
                    FieldSelection {
                        keys: [
                            "int",
                        ],
                        values: [
                            "Extra",
                            "Len",
                        ],
                        document: "Root",
                        field_config: {
                            "Len": "{}",
                        },
                    },
                ),
                shuffle: Some(
                    Shuffle {
                        group_name: "materialize/materializeEndpoint/tab%21e/two",
                        source_collection: "testing/int-halve",
                        source_partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-halve",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                        source_uuid_ptr: "/_meta/uuid",
                        shuffle_key_ptr: [
                            "/int",
                        ],
                        uses_source_key: true,
                        shuffle_lambda: None,
                        source_schema_uri: "test://example/int-string-len.schema",
                        uses_source_schema: true,
                        filter_r_clocks: false,
                        hash: None,
                        read_delay_seconds: 0,
                        priority: 0,
                    },
                ),
            },
        },
    ],
    built_tests: [
        BuiltTest {
            test: A Test,
            spec: TestSpec {
                test: "A Test",
                steps: [
                    Step {
                        step_type: Ingest,
                        step_index: 0,
                        collection: "testing/int-string",
                        collection_schema_uri: "test://example/int-string.schema",
                        collection_key_ptr: [
                            "/int",
                        ],
                        collection_uuid_ptr: "/_meta/uuid",
                        docs_json_lines: "{\"bit\":true,\"int\":42,\"str\":\"string A\"}\n{\"bit\":true,\"int\":52,\"str\":\"string B\"}",
                        partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                    },
                    Step {
                        step_type: Verify,
                        step_index: 1,
                        collection: "testing/int-string",
                        collection_schema_uri: "test://example/int-string.schema",
                        collection_key_ptr: [
                            "/int",
                        ],
                        collection_uuid_ptr: "/_meta/uuid",
                        docs_json_lines: "{\"str\":\"string A\"}\n{\"str\":\"string B\"}",
                        partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                            },
                                            Label {
                                                name: "estuary.dev/field/bit",
                                                value: "true",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                    },
                ],
            },
        },
    ],
    built_transforms: [
        BuiltTransform {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation/transform/reverseIntString,
            derivation: testing/int-reverse,
            transform: reverseIntString,
            spec: TransformSpec {
                derivation: "testing/int-reverse",
                transform: "reverseIntString",
                shuffle: Some(
                    Shuffle {
                        group_name: "derive/testing/int-reverse/reverseIntString",
                        source_collection: "testing/int-string",
                        source_partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                        source_uuid_ptr: "/_meta/uuid",
                        shuffle_key_ptr: [
                            "/int",
                        ],
                        uses_source_key: true,
                        shuffle_lambda: None,
                        source_schema_uri: "test://example/int-string.schema",
                        uses_source_schema: true,
                        filter_r_clocks: true,
                        hash: None,
                        read_delay_seconds: 0,
                        priority: 0,
                    },
                ),
                update_lambda: None,
                rollback_on_register_conflict: false,
                publish_lambda: Some(
                    LambdaSpec {
                        typescript: "/derive/testing/int-reverse/reverseIntString/Publish",
                        remote: "",
                    },
                ),
            },
        },
        BuiltTransform {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/transform/halveIntString,
            derivation: testing/int-halve,
            transform: halveIntString,
            spec: TransformSpec {
                derivation: "testing/int-halve",
                transform: "halveIntString",
                shuffle: Some(
                    Shuffle {
                        group_name: "derive/testing/int-halve/halveIntString",
                        source_collection: "testing/int-string",
                        source_partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                            },
                                            Label {
                                                name: "estuary.dev/field/bit",
                                                value: "true",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/field/bit",
                                                value: "false",
                                            },
                                        ],
                                    },
                                ),
                            },
                        ),
                        source_uuid_ptr: "/_meta/uuid",
                        shuffle_key_ptr: [
                            "/len",
                            "/int",
                        ],
                        uses_source_key: false,
                        shuffle_lambda: None,
                        source_schema_uri: "test://example/int-string-len.schema",
                        uses_source_schema: false,
                        filter_r_clocks: false,
                        hash: None,
                        read_delay_seconds: 0,
                        priority: 0,
                    },
                ),
                update_lambda: Some(
                    LambdaSpec {
                        typescript: "",
                        remote: "https://an/api",
                    },
                ),
                rollback_on_register_conflict: true,
                publish_lambda: None,
            },
        },
        BuiltTransform {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/transform/halveSelf,
            derivation: testing/int-halve,
            transform: halveSelf,
            spec: TransformSpec {
                derivation: "testing/int-halve",
                transform: "halveSelf",
                shuffle: Some(
                    Shuffle {
                        group_name: "derive/testing/int-halve/halveSelf",
                        source_collection: "testing/int-halve",
                        source_partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-halve",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                        source_uuid_ptr: "/_meta/uuid",
                        shuffle_key_ptr: [
                            "/len",
                            "/int",
                        ],
                        uses_source_key: false,
                        shuffle_lambda: None,
                        source_schema_uri: "test://example/int-string-len.schema",
                        uses_source_schema: true,
                        filter_r_clocks: true,
                        hash: None,
                        read_delay_seconds: 0,
                        priority: 0,
                    },
                ),
                update_lambda: None,
                rollback_on_register_conflict: false,
                publish_lambda: Some(
                    LambdaSpec {
                        typescript: "/derive/testing/int-halve/halveSelf/Publish",
                        remote: "",
                    },
                ),
            },
        },
    ],
    captures: [
        Capture {
            scope: test://example/int-string-capture#/captures/0,
            collection: testing/int-string,
            allow_push: 0,
            endpoint: captureEndpoint,
            patch_config: {},
        },
        Capture {
            scope: test://example/int-string-capture#/captures/1,
            collection: testing/int-string,
            allow_push: 1,
            endpoint: NULL,
            patch_config: {},
        },
    ],
    collections: [
        Collection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            schema: test://example/int-string.schema,
            key: ["/int"],
        },
        Collection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            schema: test://example/int-string.schema,
            key: ["/int"],
        },
        Collection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            schema: test://example/int-string-len.schema,
            key: ["/int"],
        },
    ],
    derivations: [
        Derivation {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation,
            derivation: testing/int-reverse,
            register_schema: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            register_initial: null,
        },
        Derivation {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation,
            derivation: testing/int-halve,
            register_schema: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            register_initial: 42,
        },
    ],
    endpoints: [
        Endpoint {
            scope: test://example/catalog.yaml#/endpoints/captureEndpoint,
            endpoint: captureEndpoint,
            endpoint_type: "S3",
            base_config: {"bucket":"a-bucket","prefix":"and-prefix"},
        },
        Endpoint {
            scope: test://example/catalog.yaml#/endpoints/materializeEndpoint,
            endpoint: materializeEndpoint,
            endpoint_type: "S3",
            base_config: {"bucket":"a-bucket","prefix":"and-prefix"},
        },
    ],
    errors: [],
    fetches: [
        Fetch {
            resource: test://example/catalog.yaml,
        },
        Fetch {
            resource: test://example/int-string,
        },
        Fetch {
            resource: test://example/int-reverse,
        },
        Fetch {
            resource: test://example/int-halve,
        },
        Fetch {
            resource: test://example/int-string-capture,
        },
        Fetch {
            resource: test://example/int-string-materialization,
        },
        Fetch {
            resource: test://example/int-halve-materialization,
        },
        Fetch {
            resource: test://example/int-string-tests,
        },
        Fetch {
            resource: test://example/catalog.ts,
        },
        Fetch {
            resource: test://example/int-string.ts,
        },
        Fetch {
            resource: test://example/int-string.schema,
        },
        Fetch {
            resource: test://example/int-reverse.ts,
        },
        Fetch {
            resource: test://example/int-halve.ts,
        },
        Fetch {
            resource: test://example/int-string-len.schema,
        },
        Fetch {
            resource: test://example/int-string-capture.ts,
        },
        Fetch {
            resource: test://example/int-string-materialization.ts,
        },
        Fetch {
            resource: test://example/int-halve-materialization.ts,
        },
        Fetch {
            resource: test://example/int-string-tests.ts,
        },
    ],
    imports: [
        Import {
            scope: test://example/int-string#/import/0,
            from_resource: test://example/int-string,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/int-reverse#/import/0,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/schema,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation/register/schema,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
        },
        Import {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/register/schema,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
        },
        Import {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/transform/halveIntString/source/schema,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-string-len.schema,
        },
        Import {
            scope: test://example/int-string-capture#/import/0,
            from_resource: test://example/int-string-capture,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-string-materialization#/import/0,
            from_resource: test://example/int-string-materialization,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-halve-materialization#/import/0,
            from_resource: test://example/int-halve-materialization,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/int-string-tests#/import/0,
            from_resource: test://example/int-string-tests,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/catalog.yaml,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.ts,
        },
        Import {
            scope: test://example/int-string,
            from_resource: test://example/int-string,
            to_resource: test://example/int-string.ts,
        },
        Import {
            scope: test://example/int-string#/collections/testing~1int-string/schema,
            from_resource: test://example/int-string,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/catalog.yaml#/import/0,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-reverse,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-reverse.ts,
        },
        Import {
            scope: test://example/catalog.yaml#/import/1,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-reverse,
        },
        Import {
            scope: test://example/int-halve,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-halve.ts,
        },
        Import {
            scope: test://example/int-string-len.schema#/properties/arr/additionalItems/$ref,
            from_resource: test://example/int-string-len.schema,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string-len.schema#/$ref,
            from_resource: test://example/int-string-len.schema,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-halve#/collections/testing~1int-halve/schema,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-string-len.schema,
        },
        Import {
            scope: test://example/catalog.yaml#/import/2,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/int-string-capture,
            from_resource: test://example/int-string-capture,
            to_resource: test://example/int-string-capture.ts,
        },
        Import {
            scope: test://example/catalog.yaml#/import/3,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-string-capture,
        },
        Import {
            scope: test://example/int-string-materialization,
            from_resource: test://example/int-string-materialization,
            to_resource: test://example/int-string-materialization.ts,
        },
        Import {
            scope: test://example/catalog.yaml#/import/4,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-string-materialization,
        },
        Import {
            scope: test://example/int-halve-materialization,
            from_resource: test://example/int-halve-materialization,
            to_resource: test://example/int-halve-materialization.ts,
        },
        Import {
            scope: test://example/catalog.yaml#/import/5,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-halve-materialization,
        },
        Import {
            scope: test://example/int-string-tests,
            from_resource: test://example/int-string-tests,
            to_resource: test://example/int-string-tests.ts,
        },
        Import {
            scope: test://example/catalog.yaml#/import/6,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-string-tests,
        },
    ],
    inferences: [
        Inference {
            schema: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            location: ,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            location: ,
            spec: Inference {
                types: [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string",
                ],
                must_exist: true,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /arr,
            spec: Inference {
                types: [
                    "array",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /arr/-,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /arr/-/one,
            spec: Inference {
                types: [
                    "string",
                ],
                must_exist: false,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /arr/-/two,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /bit,
            spec: Inference {
                types: [
                    "boolean",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /extra,
            spec: Inference {
                types: [
                    "boolean",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /int,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /len,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /str,
            spec: Inference {
                types: [
                    "string",
                ],
                must_exist: true,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema#Other,
            location: ,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: /bit,
            spec: Inference {
                types: [
                    "boolean",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: /int,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: /str,
            spec: Inference {
                types: [
                    "string",
                ],
                must_exist: true,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema#AnAnchor,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema#AnAnchor,
            location: /one,
            spec: Inference {
                types: [
                    "string",
                ],
                must_exist: true,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema#AnAnchor,
            location: /two,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
    ],
    journal_rules: [
        JournalRule {
            scope: test://example/catalog.yaml#/journal_rules/123%20A%20Rule,
            rule: 123 A Rule,
            spec: Rule {
                rule: "123 A Rule",
                selector: Some(
                    LabelSelector {
                        include: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "estuary.dev/label",
                                        value: "a value",
                                    },
                                ],
                            },
                        ),
                        exclude: Some(
                            LabelSet {
                                labels: [],
                            },
                        ),
                    },
                ),
                template: Some(
                    JournalSpec {
                        name: "",
                        replication: 0,
                        labels: Some(
                            LabelSet {
                                labels: [],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 0,
                                compression_codec: Invalid,
                                stores: [
                                    "s3://my-bucket",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 0,
                                        nanos: 0,
                                    },
                                ),
                                retention: Some(
                                    Duration {
                                        seconds: 0,
                                        nanos: 0,
                                    },
                                ),
                                flush_interval: Some(
                                    Duration {
                                        seconds: 0,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "",
                            },
                        ),
                        flags: 0,
                        max_append_rate: 0,
                    },
                ),
            },
        },
    ],
    materializations: [
        Materialization {
            scope: test://example/int-string-materialization#/materializations/0,
            collection: testing/int-string,
            endpoint: materializeEndpoint,
            fields_exclude: ["bit"],
            fields_include: {"str":{"pass":"through"}},
            fields_recommended: 1,
            patch_config: {"fixture":"one"},
        },
        Materialization {
            scope: test://example/int-halve-materialization#/materializations/0,
            collection: testing/int-halve,
            endpoint: materializeEndpoint,
            fields_exclude: [],
            fields_include: {"Len":{}},
            fields_recommended: 0,
            patch_config: {"fixture":"two"},
        },
    ],
    named_schemas: [
        NamedSchema {
            scope: test://example/int-string.schema#/$defs/anAnchor,
            anchor: test://example/int-string.schema#AnAnchor,
            anchor_name: AnAnchor,
        },
        NamedSchema {
            scope: test://example/int-string-len.schema#/$defs/otherAnchor,
            anchor: test://example/int-string-len.schema#Other,
            anchor_name: Other,
        },
    ],
    npm_dependencies: [],
    projections: [
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string/projections/Int,
            collection: testing/int-string,
            field: Int,
            location: /int,
            partition: 0,
            user_provided: 1,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string/projections/bit,
            collection: testing/int-string,
            field: bit,
            location: /bit,
            partition: 1,
            user_provided: 1,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve/projections/Extra,
            collection: testing/int-halve,
            field: Extra,
            location: /extra,
            partition: 0,
            user_provided: 1,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve/projections/Len,
            collection: testing/int-halve,
            field: Len,
            location: /len,
            partition: 1,
            user_provided: 1,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve/projections/Root,
            collection: testing/int-halve,
            field: Root,
            location: ,
            partition: 0,
            user_provided: 1,
        },
        Projection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: bit,
            location: /bit,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: int,
            location: /int,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: str,
            location: /str,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            field: int,
            location: /int,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            field: str,
            location: /str,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: arr,
            location: /arr,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: bit,
            location: /bit,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: extra,
            location: /extra,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: int,
            location: /int,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: len,
            location: /len,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: str,
            location: /str,
            partition: 0,
            user_provided: 0,
        },
    ],
    resources: [
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CatalogSpec",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string,
            content_type: "CatalogSpec",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-reverse,
            content_type: "CatalogSpec",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            content_type: "JsonSchema",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-halve,
            content_type: "CatalogSpec",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            content_type: "JsonSchema",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string-capture,
            content_type: "CatalogSpec",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string-materialization,
            content_type: "CatalogSpec",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-halve-materialization,
            content_type: "CatalogSpec",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string-tests,
            content_type: "CatalogSpec",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string.schema,
            content_type: "JsonSchema",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-reverse.ts,
            content_type: "TypescriptModule",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-halve.ts,
            content_type: "TypescriptModule",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string-len.schema,
            content_type: "JsonSchema",
            content: ".. binary ..",
        },
    ],
    schema_docs: [
        SchemaDoc {
            schema: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            dom: true,
        },
        SchemaDoc {
            schema: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            dom: {"type":"integer"},
        },
        SchemaDoc {
            schema: test://example/int-string.schema,
            dom: {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
        },
        SchemaDoc {
            schema: test://example/int-string-len.schema,
            dom: {"$defs":{"otherAnchor":{"$anchor":"Other","type":"integer"}},"$ref":"test://example/int-string.schema","additionalProperties":{"type":"boolean"},"properties":{"arr":{"additionalItems":{"$ref":"int-string.schema#AnAnchor"},"type":"array"},"bit":{},"int":{},"len":{"type":"integer"},"str":{}},"required":["len"]},
        },
    ],
    test_steps: [
        TestStep {
            scope: test://example/int-string-tests#/tests/A%20Test/0,
            collection: testing/int-string,
            documents: [{"bit":true,"int":42,"str":"string A"},{"bit":true,"int":52,"str":"string B"}],
            partitions: NULL,
            step_index: 0,
            step_type: "Ingest",
            test: A Test,
        },
        TestStep {
            scope: test://example/int-string-tests#/tests/A%20Test/1,
            collection: testing/int-string,
            documents: [{"str":"string A"},{"str":"string B"}],
            partitions: {"include":{"bit":[true]},"exclude":{}},
            step_index: 1,
            step_type: "Verify",
            test: A Test,
        },
    ],
    transforms: [
        Transform {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation/transform/reverseIntString,
            derivation: testing/int-reverse,
            priority: 0,
            publish_lambda: "typescript",
            read_delay_seconds: NULL,
            rollback_on_register_conflict: 0,
            shuffle_hash: "None",
            shuffle_key: NULL,
            shuffle_lambda: NULL,
            source_collection: testing/int-string,
            source_partitions: NULL,
            source_schema: NULL,
            transform: reverseIntString,
            update_lambda: NULL,
        },
        Transform {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/transform/halveIntString,
            derivation: testing/int-halve,
            priority: 0,
            publish_lambda: NULL,
            read_delay_seconds: NULL,
            rollback_on_register_conflict: 1,
            shuffle_hash: "None",
            shuffle_key: ["/len","/int"],
            shuffle_lambda: NULL,
            source_collection: testing/int-string,
            source_partitions: {"include":{"bit":[true]},"exclude":{"bit":[false]}},
            source_schema: test://example/int-string-len.schema,
            transform: halveIntString,
            update_lambda: {"remote":"https://an/api"},
        },
        Transform {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/transform/halveSelf,
            derivation: testing/int-halve,
            priority: 0,
            publish_lambda: "typescript",
            read_delay_seconds: NULL,
            rollback_on_register_conflict: 0,
            shuffle_hash: "None",
            shuffle_key: ["/len","/int"],
            shuffle_lambda: NULL,
            source_collection: testing/int-halve,
            source_partitions: NULL,
            source_schema: NULL,
            transform: halveSelf,
            update_lambda: NULL,
        },
    ],
}
