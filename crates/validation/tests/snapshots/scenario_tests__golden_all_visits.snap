---
source: crates/validation/tests/scenario_tests.rs
expression: tables
---
All {
    built_captures: [
        BuiltCapture {
            scope: test://example/int-string-captures#/captures/testing~1db-cdc,
            capture: testing/db-cdc,
            spec: CaptureSpec {
                capture: "testing/db-cdc",
                endpoint_type: AirbyteSource,
                endpoint_spec_json: "{\"image\":\"database\",\"config\":{\"host\":\"a.host.name\",\"user\":\"a-user\"}}",
                bindings: [
                    Binding {
                        resource_spec_json: "{\"namespace\":\"and namespace\",\"stream\":\"other-stream\"}",
                        resource_path: [
                            "schema",
                            "table",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string",
                                write_schema_uri: "test://example/int-string.schema",
                                write_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                read_schema_uri: "test://example/int-string.schema",
                                read_schema_json: "",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                ],
                interval_seconds: 300,
                shard_template: Some(
                    ShardSpec {
                        id: "capture/testing/db-cdc",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 1,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "567",
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "789",
                                    },
                                    Label {
                                        name: "estuary.dev/hostname",
                                        value: "d7f4a9d02b48c1a",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/port-proto/789",
                                        value: "h2",
                                    },
                                    Label {
                                        name: "estuary.dev/port-public/567",
                                        value: "true",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-cdc",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/capture/testing/db-cdc",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-cdc",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCapture {
            scope: test://example/int-string-captures#/captures/testing~1s3-source,
            capture: testing/s3-source,
            spec: CaptureSpec {
                capture: "testing/s3-source",
                endpoint_type: AirbyteSource,
                endpoint_spec_json: "{\"image\":\"s3\",\"config\":{\"bucket\":\"a-bucket\",\"prefix\":\"and-prefix\"}}",
                bindings: [
                    Binding {
                        resource_spec_json: "{\"stream\":\"a-stream\"}",
                        resource_path: [
                            "bucke+",
                            "pr@fix",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string",
                                write_schema_uri: "test://example/int-string.schema",
                                write_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                read_schema_uri: "test://example/int-string.schema",
                                read_schema_json: "",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                    Binding {
                        resource_spec_json: "{\"stream\":\"v2-stream\"}",
                        resource_path: [
                            "other-bucket",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string.v2",
                                write_schema_uri: "test://example/int-string?ptr=/collections/testing~1int-string.v2/schema",
                                write_schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}},\"$id\":\"test://inlined/canonical/id\",\"$ref\":\"test://example/int-string.schema\"}",
                                read_schema_uri: "test://example/int-string?ptr=/collections/testing~1int-string.v2/schema",
                                read_schema_json: "",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [],
                                projections: [
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string.v2",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string.v2",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Zstandard,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                ],
                interval_seconds: 600,
                shard_template: Some(
                    ShardSpec {
                        id: "capture/testing/s3-source",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "567",
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "789",
                                    },
                                    Label {
                                        name: "estuary.dev/hostname",
                                        value: "d4b08a40cd6dda6d",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/port-proto/789",
                                        value: "h2",
                                    },
                                    Label {
                                        name: "estuary.dev/port-public/567",
                                        value: "true",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/s3-source",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/capture/testing/s3-source",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/s3-source",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
    ],
    built_collections: [
        BuiltCollection {
            scope: test://example/array-key#/collections/testing~1array-key,
            collection: testing/array-key,
            spec: CollectionSpec {
                collection: "testing/array-key",
                write_schema_uri: "test://example/array-key.schema",
                write_schema_json: "{\"$id\":\"test://example/array-key.schema\",\"properties\":{\"arr\":{\"items\":{\"properties\":{\"aKey\":{\"type\":\"integer\"}},\"required\":[\"aKey\"],\"type\":\"object\"},\"minItems\":5,\"type\":\"array\"}},\"required\":[\"arr\"],\"type\":\"object\"}",
                read_schema_uri: "test://example/array-key.schema",
                read_schema_json: "",
                key_ptrs: [
                    "/arr/0/aKey",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/arr/1/aKey",
                        field: "aKeyOne",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr",
                        field: "arr",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "array",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr/0/aKey",
                        field: "arr/0/aKey",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr/1/aKey",
                        field: "arr/1/aKey",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr/2/aKey",
                        field: "arr/2/aKey",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr/3/aKey",
                        field: "arr/3/aKey",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/array-key",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/array-key",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/from-array-key#/collections/testing~1from-array-key,
            collection: testing/from-array-key,
            spec: CollectionSpec {
                collection: "testing/from-array-key",
                write_schema_uri: "test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema",
                write_schema_json: "{\"$id\":\"test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema\",\"properties\":{\"someKey\":{\"type\":\"integer\"}},\"required\":[\"someKey\"],\"type\":\"object\"}",
                read_schema_uri: "test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema",
                read_schema_json: "",
                key_ptrs: [
                    "/someKey",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/someKey",
                        field: "someKey",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/from-array-key",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/from-array-key",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            spec: CollectionSpec {
                collection: "testing/int-halve",
                write_schema_uri: "test://example/int-string-len.schema",
                write_schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                read_schema_uri: "test://example/int-string-len.schema",
                read_schema_json: "",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [
                    "Len",
                    "TheString",
                ],
                projections: [
                    Projection {
                        ptr: "/extra",
                        field: "Extra",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: May,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "Len",
                        explicit: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "Root",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/partitionString",
                        field: "TheString",
                        explicit: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr",
                        field: "arr",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "array",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: May,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/extra",
                        field: "extra",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: May,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "len",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/partitionString",
                        field: "partitionString",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-halve",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-halve",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 11223344,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 900,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            spec: CollectionSpec {
                collection: "testing/int-reverse",
                write_schema_uri: "test://example/int-string.schema",
                write_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                read_schema_uri: "test://example/int-string.schema",
                read_schema_json: "",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-reverse",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-reverse",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            spec: CollectionSpec {
                collection: "testing/int-string",
                write_schema_uri: "test://example/int-string.schema",
                write_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                read_schema_uri: "test://example/int-string.schema",
                read_schema_json: "",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [
                    "bit",
                ],
                projections: [
                    Projection {
                        ptr: "/int",
                        field: "Int",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-string",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-string",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/int-string#/collections/testing~1int-string-rw,
            collection: testing/int-string-rw,
            spec: CollectionSpec {
                collection: "testing/int-string-rw",
                write_schema_uri: "test://example/int-string.schema",
                write_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                read_schema_uri: "test://example/int-string-len.schema",
                read_schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [
                    "bit",
                ],
                projections: [
                    Projection {
                        ptr: "/int",
                        field: "Int",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "Len",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "Str",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr",
                        field: "arr",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "array",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: May,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/extra",
                        field: "extra",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: May,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "len",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/partitionString",
                        field: "partitionString",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-string-rw",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-string-rw",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/int-string#/collections/testing~1int-string.v2,
            collection: testing/int-string.v2,
            spec: CollectionSpec {
                collection: "testing/int-string.v2",
                write_schema_uri: "test://example/int-string?ptr=/collections/testing~1int-string.v2/schema",
                write_schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}},\"$id\":\"test://inlined/canonical/id\",\"$ref\":\"test://example/int-string.schema\"}",
                read_schema_uri: "test://example/int-string?ptr=/collections/testing~1int-string.v2/schema",
                read_schema_json: "",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        explicit: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-string.v2",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-string.v2",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Zstandard,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
    ],
    built_derivations: [
        BuiltDerivation {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation,
            derivation: testing/from-array-key,
            spec: DerivationSpec {
                collection: Some(
                    CollectionSpec {
                        collection: "testing/from-array-key",
                        write_schema_uri: "test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema",
                        write_schema_json: "{\"$id\":\"test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema\",\"properties\":{\"someKey\":{\"type\":\"integer\"}},\"required\":[\"someKey\"],\"type\":\"object\"}",
                        read_schema_uri: "test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema",
                        read_schema_json: "",
                        key_ptrs: [
                            "/someKey",
                        ],
                        uuid_ptr: "/_meta/uuid",
                        partition_fields: [],
                        projections: [
                            Projection {
                                ptr: "",
                                field: "flow_document",
                                explicit: true,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "object",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/someKey",
                                field: "someKey",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: true,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "integer",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                        ],
                        ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                        partition_template: Some(
                            JournalSpec {
                                name: "testing/from-array-key",
                                replication: 3,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                            },
                                            Label {
                                                name: "content-type",
                                                value: "application/x-ndjson",
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "a-build-id",
                                            },
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/from-array-key",
                                            },
                                        ],
                                    },
                                ),
                                fragment: Some(
                                    Fragment {
                                        length: 536870912,
                                        compression_codec: Gzip,
                                        stores: [
                                            "s3://data-bucket/",
                                        ],
                                        refresh_interval: Some(
                                            Duration {
                                                seconds: 300,
                                                nanos: 0,
                                            },
                                        ),
                                        retention: None,
                                        flush_interval: None,
                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                    },
                                ),
                                flags: 4,
                                max_append_rate: 4194304,
                            },
                        ),
                    },
                ),
                register_schema_uri: "test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema",
                register_schema_json: "{\"$id\":\"test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema\",\"properties\":{\"an-int\":{\"type\":\"integer\"},\"nested\":{\"properties\":{\"timestamp\":{\"format\":\"date-time\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"an-int\",\"nested\"],\"type\":\"object\"}",
                register_initial_json: "{\"an-int\":42,\"nested\":{\"timestamp\":\"2019-03-06T09:28:00Z\"}}",
                register_projections: [
                    Projection {
                        ptr: "/an-int",
                        field: "an-int",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/nested",
                        field: "nested",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                    Projection {
                        ptr: "/nested/timestamp",
                        field: "nested/timestamp",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "date-time",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: May,
                            },
                        ),
                    },
                ],
                transforms: [
                    TransformSpec {
                        derivation: "testing/from-array-key",
                        transform: "withBar",
                        shuffle: Some(
                            Shuffle {
                                group_name: "derive/testing/from-array-key/withBar",
                                source_collection: "testing/array-key",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/array-key",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptrs: [
                                    "/arr/2/aKey",
                                ],
                                shuffle_key_partition_fields: [],
                                uses_source_key: false,
                                shuffle_lambda: None,
                                filter_r_clocks: false,
                                read_delay_seconds: 0,
                                priority: 0,
                                validate_schema_json: "{\"$id\":\"test://example/array-key.schema\",\"properties\":{\"arr\":{\"items\":{\"properties\":{\"aKey\":{\"type\":\"integer\"}},\"required\":[\"aKey\"],\"type\":\"object\"},\"minItems\":5,\"type\":\"array\"}},\"required\":[\"arr\"],\"type\":\"object\"}",
                            },
                        ),
                        update_lambda: Some(
                            LambdaSpec {
                                typescript: "",
                                remote: "",
                                sqlite: "select aKeyOne as \"an-int\", json_object('timestamp', strftime('%Y-%m-%dT%H:%M:%SZ')) as two from source",
                            },
                        ),
                        publish_lambda: Some(
                            LambdaSpec {
                                typescript: "",
                                remote: "",
                                sqlite: "select s.aKeyOne, s.arr, s.\"arr/0/aKey\", r.\"an-int\", r.\"nested/timestamp\" from source as s, register as r\n",
                            },
                        ),
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/array-key",
                                write_schema_uri: "test://example/array-key.schema",
                                write_schema_json: "{\"$id\":\"test://example/array-key.schema\",\"properties\":{\"arr\":{\"items\":{\"properties\":{\"aKey\":{\"type\":\"integer\"}},\"required\":[\"aKey\"],\"type\":\"object\"},\"minItems\":5,\"type\":\"array\"}},\"required\":[\"arr\"],\"type\":\"object\"}",
                                read_schema_uri: "test://example/array-key.schema",
                                read_schema_json: "",
                                key_ptrs: [
                                    "/arr/0/aKey",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [],
                                projections: [
                                    Projection {
                                        ptr: "/arr/1/aKey",
                                        field: "aKeyOne",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr",
                                        field: "arr",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "array",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr/0/aKey",
                                        field: "arr/0/aKey",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr/1/aKey",
                                        field: "arr/1/aKey",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr/2/aKey",
                                        field: "arr/2/aKey",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr/3/aKey",
                                        field: "arr/3/aKey",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/array-key",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/array-key",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                    TransformSpec {
                        derivation: "testing/from-array-key",
                        transform: "withFoo",
                        shuffle: Some(
                            Shuffle {
                                group_name: "derive/testing/from-array-key/withFoo",
                                source_collection: "testing/array-key",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/array-key",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptrs: [
                                    "/arr/3/aKey",
                                ],
                                shuffle_key_partition_fields: [],
                                uses_source_key: false,
                                shuffle_lambda: None,
                                filter_r_clocks: true,
                                read_delay_seconds: 0,
                                priority: 0,
                                validate_schema_json: "{\"$id\":\"test://example/array-key.schema\",\"properties\":{\"arr\":{\"items\":{\"properties\":{\"aKey\":{\"type\":\"integer\"}},\"required\":[\"aKey\"],\"type\":\"object\"},\"minItems\":5,\"type\":\"array\"}},\"required\":[\"arr\"],\"type\":\"object\"}",
                            },
                        ),
                        update_lambda: None,
                        publish_lambda: Some(
                            LambdaSpec {
                                typescript: "",
                                remote: "https://an/api",
                                sqlite: "",
                            },
                        ),
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/array-key",
                                write_schema_uri: "test://example/array-key.schema",
                                write_schema_json: "{\"$id\":\"test://example/array-key.schema\",\"properties\":{\"arr\":{\"items\":{\"properties\":{\"aKey\":{\"type\":\"integer\"}},\"required\":[\"aKey\"],\"type\":\"object\"},\"minItems\":5,\"type\":\"array\"}},\"required\":[\"arr\"],\"type\":\"object\"}",
                                read_schema_uri: "test://example/array-key.schema",
                                read_schema_json: "",
                                key_ptrs: [
                                    "/arr/0/aKey",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [],
                                projections: [
                                    Projection {
                                        ptr: "/arr/1/aKey",
                                        field: "aKeyOne",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr",
                                        field: "arr",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "array",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr/0/aKey",
                                        field: "arr/0/aKey",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr/1/aKey",
                                        field: "arr/1/aKey",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr/2/aKey",
                                        field: "arr/2/aKey",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr/3/aKey",
                                        field: "arr/3/aKey",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/array-key",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/array-key",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "derivation/testing/from-array-key",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/from-array-key",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/derivation/testing/from-array-key",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/from-array-key",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltDerivation {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation,
            derivation: testing/int-halve,
            spec: DerivationSpec {
                collection: Some(
                    CollectionSpec {
                        collection: "testing/int-halve",
                        write_schema_uri: "test://example/int-string-len.schema",
                        write_schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                        read_schema_uri: "test://example/int-string-len.schema",
                        read_schema_json: "",
                        key_ptrs: [
                            "/int",
                        ],
                        uuid_ptr: "/_meta/uuid",
                        partition_fields: [
                            "Len",
                            "TheString",
                        ],
                        projections: [
                            Projection {
                                ptr: "/extra",
                                field: "Extra",
                                explicit: true,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "boolean",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: May,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/len",
                                field: "Len",
                                explicit: true,
                                is_partition_key: true,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "integer",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "",
                                field: "Root",
                                explicit: true,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "object",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/partitionString",
                                field: "TheString",
                                explicit: true,
                                is_partition_key: true,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "string",
                                        ],
                                        string: Some(
                                            String {
                                                content_type: "",
                                                format: "",
                                                content_encoding: "",
                                                is_base64: false,
                                                max_length: 0,
                                            },
                                        ),
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/arr",
                                field: "arr",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "array",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: May,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/bit",
                                field: "bit",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "boolean",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/extra",
                                field: "extra",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "boolean",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: May,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/int",
                                field: "int",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: true,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "integer",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/len",
                                field: "len",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "integer",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/partitionString",
                                field: "partitionString",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "string",
                                        ],
                                        string: Some(
                                            String {
                                                content_type: "",
                                                format: "",
                                                content_encoding: "",
                                                is_base64: false,
                                                max_length: 0,
                                            },
                                        ),
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/str",
                                field: "str",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "string",
                                        ],
                                        string: Some(
                                            String {
                                                content_type: "",
                                                format: "",
                                                content_encoding: "",
                                                is_base64: false,
                                                max_length: 0,
                                            },
                                        ),
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                        ],
                        ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                        partition_template: Some(
                            JournalSpec {
                                name: "testing/int-halve",
                                replication: 3,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                            },
                                            Label {
                                                name: "content-type",
                                                value: "application/x-ndjson",
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "a-build-id",
                                            },
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-halve",
                                            },
                                        ],
                                    },
                                ),
                                fragment: Some(
                                    Fragment {
                                        length: 11223344,
                                        compression_codec: Gzip,
                                        stores: [
                                            "s3://data-bucket/",
                                        ],
                                        refresh_interval: Some(
                                            Duration {
                                                seconds: 300,
                                                nanos: 0,
                                            },
                                        ),
                                        retention: None,
                                        flush_interval: Some(
                                            Duration {
                                                seconds: 900,
                                                nanos: 0,
                                            },
                                        ),
                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                    },
                                ),
                                flags: 4,
                                max_append_rate: 4194304,
                            },
                        ),
                    },
                ),
                register_schema_uri: "test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema",
                register_schema_json: "{\"$id\":\"test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema\",\"type\":\"integer\"}",
                register_initial_json: "42",
                register_projections: [
                    Projection {
                        ptr: "",
                        field: "value",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                string: None,
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                ],
                transforms: [
                    TransformSpec {
                        derivation: "testing/int-halve",
                        transform: "halveIntString",
                        shuffle: Some(
                            Shuffle {
                                group_name: "derive/testing/int-halve/halveIntString",
                                source_collection: "testing/int-string-rw",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string-rw",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/field/bit",
                                                        value: "%_true",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/field/bit",
                                                        value: "%_false",
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptrs: [
                                    "/len",
                                    "/str",
                                ],
                                shuffle_key_partition_fields: [],
                                uses_source_key: false,
                                shuffle_lambda: None,
                                filter_r_clocks: false,
                                read_delay_seconds: 0,
                                priority: 0,
                                validate_schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                            },
                        ),
                        update_lambda: Some(
                            LambdaSpec {
                                typescript: "",
                                remote: "https://an/api",
                                sqlite: "",
                            },
                        ),
                        publish_lambda: None,
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string-rw",
                                write_schema_uri: "test://example/int-string.schema",
                                write_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                read_schema_uri: "test://example/int-string-len.schema",
                                read_schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/len",
                                        field: "Len",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "Str",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr",
                                        field: "arr",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "array",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: May,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/extra",
                                        field: "extra",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: May,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/len",
                                        field: "len",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/partitionString",
                                        field: "partitionString",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string-rw",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string-rw",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                    TransformSpec {
                        derivation: "testing/int-halve",
                        transform: "halveSelf",
                        shuffle: Some(
                            Shuffle {
                                group_name: "derive/testing/int-halve/halveSelf",
                                source_collection: "testing/int-halve",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-halve",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptrs: [
                                    "/len",
                                    "/partitionString",
                                ],
                                shuffle_key_partition_fields: [
                                    "Len",
                                    "TheString",
                                ],
                                uses_source_key: false,
                                shuffle_lambda: None,
                                filter_r_clocks: true,
                                read_delay_seconds: 0,
                                priority: 0,
                                validate_schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                            },
                        ),
                        update_lambda: None,
                        publish_lambda: Some(
                            LambdaSpec {
                                typescript: "/derive/testing/int-halve/halveSelf/Publish",
                                remote: "",
                                sqlite: "",
                            },
                        ),
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-halve",
                                write_schema_uri: "test://example/int-string-len.schema",
                                write_schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                                read_schema_uri: "test://example/int-string-len.schema",
                                read_schema_json: "",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "Len",
                                    "TheString",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/extra",
                                        field: "Extra",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: May,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/len",
                                        field: "Len",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "Root",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/partitionString",
                                        field: "TheString",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr",
                                        field: "arr",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "array",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: May,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/extra",
                                        field: "extra",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: May,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/len",
                                        field: "len",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/partitionString",
                                        field: "partitionString",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-halve",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-halve",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 11223344,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: Some(
                                                    Duration {
                                                        seconds: 900,
                                                        nanos: 0,
                                                    },
                                                ),
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "derivation/testing/int-halve",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: true,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/int-halve",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: true,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/derivation/testing/int-halve",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/int-halve",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltDerivation {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation,
            derivation: testing/int-reverse,
            spec: DerivationSpec {
                collection: Some(
                    CollectionSpec {
                        collection: "testing/int-reverse",
                        write_schema_uri: "test://example/int-string.schema",
                        write_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                        read_schema_uri: "test://example/int-string.schema",
                        read_schema_json: "",
                        key_ptrs: [
                            "/int",
                        ],
                        uuid_ptr: "/_meta/uuid",
                        partition_fields: [],
                        projections: [
                            Projection {
                                ptr: "/bit",
                                field: "bit",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "boolean",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "",
                                field: "flow_document",
                                explicit: true,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "object",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/int",
                                field: "int",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: true,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "integer",
                                        ],
                                        string: None,
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/str",
                                field: "str",
                                explicit: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "string",
                                        ],
                                        string: Some(
                                            String {
                                                content_type: "",
                                                format: "",
                                                content_encoding: "",
                                                is_base64: false,
                                                max_length: 0,
                                            },
                                        ),
                                        title: "",
                                        description: "",
                                        default_json: "",
                                        secret: false,
                                        exists: Must,
                                    },
                                ),
                            },
                        ],
                        ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                        partition_template: Some(
                            JournalSpec {
                                name: "testing/int-reverse",
                                replication: 3,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                            },
                                            Label {
                                                name: "content-type",
                                                value: "application/x-ndjson",
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "a-build-id",
                                            },
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-reverse",
                                            },
                                        ],
                                    },
                                ),
                                fragment: Some(
                                    Fragment {
                                        length: 536870912,
                                        compression_codec: Gzip,
                                        stores: [
                                            "s3://data-bucket/",
                                        ],
                                        refresh_interval: Some(
                                            Duration {
                                                seconds: 300,
                                                nanos: 0,
                                            },
                                        ),
                                        retention: None,
                                        flush_interval: None,
                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                    },
                                ),
                                flags: 4,
                                max_append_rate: 4194304,
                            },
                        ),
                    },
                ),
                register_schema_uri: "test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema",
                register_schema_json: "{\"$id\":\"test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema\",\"allOf\":[true]}",
                register_initial_json: "null",
                register_projections: [
                    Projection {
                        ptr: "",
                        field: "value",
                        explicit: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "array",
                                    "boolean",
                                    "null",
                                    "number",
                                    "object",
                                    "string",
                                ],
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        content_encoding: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                                default_json: "",
                                secret: false,
                                exists: Must,
                            },
                        ),
                    },
                ],
                transforms: [
                    TransformSpec {
                        derivation: "testing/int-reverse",
                        transform: "reverseIntString",
                        shuffle: Some(
                            Shuffle {
                                group_name: "derive/testing/int-reverse/reverseIntString",
                                source_collection: "testing/int-string",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptrs: [
                                    "/int",
                                ],
                                shuffle_key_partition_fields: [],
                                uses_source_key: true,
                                shuffle_lambda: None,
                                filter_r_clocks: true,
                                read_delay_seconds: 0,
                                priority: 0,
                                validate_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                            },
                        ),
                        update_lambda: None,
                        publish_lambda: Some(
                            LambdaSpec {
                                typescript: "/derive/testing/int-reverse/reverseIntString/Publish",
                                remote: "",
                                sqlite: "",
                            },
                        ),
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string",
                                write_schema_uri: "test://example/int-string.schema",
                                write_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                read_schema_uri: "test://example/int-string.schema",
                                read_schema_json: "",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "derivation/testing/int-reverse",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/int-reverse",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/derivation/testing/int-reverse",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/int-reverse",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
    ],
    built_materializations: [
        BuiltMaterialization {
            scope: test://example/db-views#/materializations/testing~1db-views,
            materialization: testing/db-views,
            spec: MaterializationSpec {
                materialization: "testing/db-views",
                endpoint_type: FlowSink,
                endpoint_spec_json: "{\"image\":\"database/image\",\"config\":{\"foo\":\"bar\"}}",
                bindings: [
                    Binding {
                        resource_spec_json: "{\"table\":\"the_table\"}",
                        resource_path: [
                            "view",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string",
                                write_schema_uri: "test://example/int-string.schema",
                                write_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                read_schema_uri: "test://example/int-string.schema",
                                read_schema_json: "",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                        field_selection: Some(
                            FieldSelection {
                                keys: [],
                                values: [],
                                document: "flow_document",
                                field_config_json: {},
                            },
                        ),
                        delta_updates: false,
                        shuffle: Some(
                            Shuffle {
                                group_name: "materialize/testing/db-views/view",
                                source_collection: "testing/int-string",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptrs: [
                                    "/int",
                                ],
                                shuffle_key_partition_fields: [],
                                uses_source_key: true,
                                shuffle_lambda: None,
                                filter_r_clocks: false,
                                read_delay_seconds: 0,
                                priority: 0,
                                validate_schema_json: "",
                            },
                        ),
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "materialize/testing/db-views",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 123,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "warn",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-views",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/materialize/testing/db-views",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-views",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltMaterialization {
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries,
            materialization: testing/webhook/deliveries,
            spec: MaterializationSpec {
                materialization: "testing/webhook/deliveries",
                endpoint_type: FlowSink,
                endpoint_spec_json: "{\"image\":\"webhook/connector\",\"config\":{\"address\":\"http://example/webhook\"}}",
                bindings: [
                    Binding {
                        resource_spec_json: "{\"fixture\":\"one\"}",
                        resource_path: [
                            "Web!hook",
                            "foo bar",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string",
                                write_schema_uri: "test://example/int-string.schema",
                                write_schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                read_schema_uri: "test://example/int-string.schema",
                                read_schema_json: "",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                        field_selection: Some(
                            FieldSelection {
                                keys: [
                                    "int",
                                ],
                                values: [
                                    "str",
                                ],
                                document: "flow_document",
                                field_config_json: {
                                    "str": "{\"pass\":\"through\"}",
                                },
                            },
                        ),
                        delta_updates: true,
                        shuffle: Some(
                            Shuffle {
                                group_name: "materialize/testing/webhook/deliveries/Web%21hook%2Ffoo%20bar",
                                source_collection: "testing/int-string",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/field/bit",
                                                        value: "%_true",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptrs: [
                                    "/int",
                                ],
                                shuffle_key_partition_fields: [],
                                uses_source_key: true,
                                shuffle_lambda: None,
                                filter_r_clocks: false,
                                read_delay_seconds: 0,
                                priority: 0,
                                validate_schema_json: "",
                            },
                        ),
                    },
                    Binding {
                        resource_spec_json: "{\"fixture\":\"two\"}",
                        resource_path: [
                            "targe+",
                            "two",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-halve",
                                write_schema_uri: "test://example/int-string-len.schema",
                                write_schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/canonical/int-string-len.schema\",\"$ref\":\"../int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"../int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"partitionString\":{\"type\":\"string\"},\"str\":{}},\"required\":[\"len\",\"partitionString\"]}",
                                read_schema_uri: "test://example/int-string-len.schema",
                                read_schema_json: "",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "Len",
                                    "TheString",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/extra",
                                        field: "Extra",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: May,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/len",
                                        field: "Len",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "Root",
                                        explicit: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/partitionString",
                                        field: "TheString",
                                        explicit: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr",
                                        field: "arr",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "array",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: May,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/extra",
                                        field: "extra",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: May,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/len",
                                        field: "len",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                string: None,
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/partitionString",
                                        field: "partitionString",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        explicit: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        content_encoding: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                                default_json: "",
                                                secret: false,
                                                exists: Must,
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-halve",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-halve",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 11223344,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: Some(
                                                    Duration {
                                                        seconds: 900,
                                                        nanos: 0,
                                                    },
                                                ),
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                        field_selection: Some(
                            FieldSelection {
                                keys: [
                                    "int",
                                ],
                                values: [
                                    "Extra",
                                    "Len",
                                ],
                                document: "Root",
                                field_config_json: {
                                    "Len": "{}",
                                },
                            },
                        ),
                        delta_updates: true,
                        shuffle: Some(
                            Shuffle {
                                group_name: "materialize/testing/webhook/deliveries/targe+%2Ftwo",
                                source_collection: "testing/int-halve",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-halve",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptrs: [
                                    "/int",
                                ],
                                shuffle_key_partition_fields: [],
                                uses_source_key: true,
                                shuffle_lambda: None,
                                filter_r_clocks: false,
                                read_delay_seconds: 0,
                                priority: 0,
                                validate_schema_json: "",
                            },
                        ),
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "materialize/testing/webhook/deliveries",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "567",
                                    },
                                    Label {
                                        name: "estuary.dev/expose-port",
                                        value: "789",
                                    },
                                    Label {
                                        name: "estuary.dev/hostname",
                                        value: "7c018f7d92537c75",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/port-proto/789",
                                        value: "h2",
                                    },
                                    Label {
                                        name: "estuary.dev/port-public/567",
                                        value: "true",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/webhook/deliveries",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/materialize/testing/webhook/deliveries",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/webhook/deliveries",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
    ],
    built_tests: [
        BuiltTest {
            scope: test://example/int-string-tests#/tests/testing~1test/0,
            test: testing/test,
            spec: TestSpec {
                test: "testing/test",
                steps: [
                    Step {
                        step_type: Ingest,
                        step_index: 0,
                        description: "",
                        step_scope: "test://example/int-string-tests#/tests/testing~1test/0",
                        collection: "testing/int-string",
                        docs_json_lines: "{\"bit\":true,\"int\":42,\"str\":\"string A\"}\n{\"bit\":true,\"int\":52,\"str\":\"string B\"}",
                        partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                    },
                    Step {
                        step_type: Verify,
                        step_index: 1,
                        description: "expect stuff happens",
                        step_scope: "test://example/int-string-tests#/tests/testing~1test/1",
                        collection: "testing/int-string",
                        docs_json_lines: "{\"str\":\"string A\"}\n{\"str\":\"string B\"}",
                        partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                            },
                                            Label {
                                                name: "estuary.dev/field/bit",
                                                value: "%_true",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                    },
                ],
            },
        },
    ],
    capture_bindings: [
        CaptureBinding {
            scope: test://example/int-string-captures#/captures/testing~1db-cdc/bindings/0,
            capture: testing/db-cdc,
            capture_index: 0,
            spec: {
              "resource": {
                "namespace": "and namespace",
                "stream": "other-stream"
              },
              "target": "testing/int-string"
            },
        },
        CaptureBinding {
            scope: test://example/int-string-captures#/captures/testing~1s3-source/bindings/0,
            capture: testing/s3-source,
            capture_index: 0,
            spec: {
              "resource": {
                "stream": "a-stream"
              },
              "target": "testing/int-string"
            },
        },
        CaptureBinding {
            scope: test://example/int-string-captures#/captures/testing~1s3-source/bindings/1,
            capture: testing/s3-source,
            capture_index: 1,
            spec: {
              "resource": {
                "stream": "v2-stream"
              },
              "target": "testing/int-string.v2"
            },
        },
    ],
    captures: [
        Capture {
            scope: test://example/int-string-captures#/captures/testing~1db-cdc,
            capture: testing/db-cdc,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "database",
                  "config": null
                }
              },
              "bindings": [],
              "shards": {
                "hotStandbys": 1
              }
            },
            endpoint_config: test://example/cdc-config.yaml,
        },
        Capture {
            scope: test://example/int-string-captures#/captures/testing~1s3-source,
            capture: testing/s3-source,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "s3",
                  "config": null
                }
              },
              "bindings": [],
              "interval": "10m"
            },
            endpoint_config: test://example/int-string-captures?ptr=/captures/testing~1s3-source/endpoint/connector/config,
        },
    ],
    collections: [
        Collection {
            scope: test://example/array-key#/collections/testing~1array-key,
            collection: testing/array-key,
            spec: {
              "key": [
                "/arr/0/aKey"
              ]
            },
            write_schema: test://example/array-key.schema,
            read_schema: test://example/array-key.schema,
        },
        Collection {
            scope: test://example/from-array-key#/collections/testing~1from-array-key,
            collection: testing/from-array-key,
            spec: {
              "key": [
                "/someKey"
              ]
            },
            write_schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
            read_schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
        },
        Collection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            spec: {
              "key": [
                "/int"
              ],
              "journals": {
                "fragments": {
                  "length": 11223344,
                  "flushInterval": "15m"
                }
              }
            },
            write_schema: test://example/int-string-len.schema,
            read_schema: test://example/int-string-len.schema,
        },
        Collection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            spec: {
              "key": [
                "/int"
              ]
            },
            write_schema: test://example/int-string.schema,
            read_schema: test://example/int-string.schema,
        },
        Collection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            spec: {
              "key": [
                "/int"
              ]
            },
            write_schema: test://example/int-string.schema,
            read_schema: test://example/int-string.schema,
        },
        Collection {
            scope: test://example/int-string#/collections/testing~1int-string-rw,
            collection: testing/int-string-rw,
            spec: {
              "key": [
                "/int"
              ]
            },
            write_schema: test://example/int-string.schema,
            read_schema: test://example/int-string-len.schema,
        },
        Collection {
            scope: test://example/int-string#/collections/testing~1int-string.v2,
            collection: testing/int-string.v2,
            spec: {
              "key": [
                "/int"
              ],
              "journals": {
                "fragments": {
                  "compressionCodec": "ZSTANDARD"
                }
              }
            },
            write_schema: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema,
            read_schema: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema,
        },
    ],
    derivations: [
        Derivation {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation,
            derivation: testing/from-array-key,
            spec: {
              "register": {
                "schema": false,
                "initial": {
                  "an-int": 42,
                  "nested": {
                    "timestamp": "2019-03-06T09:28:00Z"
                  }
                }
              },
              "transform": {}
            },
            register_schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            typescript_module: NULL,
        },
        Derivation {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation,
            derivation: testing/int-halve,
            spec: {
              "register": {
                "schema": false,
                "initial": 42
              },
              "transform": {},
              "typescript": {
                "module": ""
              },
              "shards": {
                "disable": true
              }
            },
            register_schema: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            typescript_module: test://example/int-halve.ts,
        },
        Derivation {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation,
            derivation: testing/int-reverse,
            spec: {
              "register": {
                "schema": false,
                "initial": null
              },
              "transform": {},
              "typescript": {
                "module": ""
              }
            },
            register_schema: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            typescript_module: test://example/int-reverse.ts,
        },
    ],
    errors: [],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/array-key,
        },
        Fetch {
            depth: 2,
            resource: test://example/db-views,
        },
        Fetch {
            depth: 2,
            resource: test://example/from-array-key,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-halve,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-reverse,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-string,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-string-captures,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-string-tests,
        },
        Fetch {
            depth: 2,
            resource: test://example/webhook-deliveries,
        },
        Fetch {
            depth: 3,
            resource: test://example/array-key.schema,
        },
        Fetch {
            depth: 3,
            resource: test://example/cdc-config.yaml,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-halve.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-reverse.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-string-len.schema,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-string.schema,
        },
        Fetch {
            depth: 3,
            resource: test://example/webhook-config.yaml,
        },
    ],
    image_inspections: [
        ImageInspection {
            image: database,
            inspect_output: ".. binary ..",
            inspect_error: NULL,
        },
        ImageInspection {
            image: database/image,
            inspect_output: ".. binary ..",
            inspect_error: NULL,
        },
        ImageInspection {
            image: s3,
            inspect_output: ".. binary ..",
            inspect_error: NULL,
        },
        ImageInspection {
            image: webhook/connector,
            inspect_output: ".. binary ..",
            inspect_error: NULL,
        },
    ],
    imports: [
        Import {
            scope: test://example/array-key#/collections/testing~1array-key/schema,
            from_resource: test://example/array-key,
            to_resource: test://example/array-key.schema,
        },
        Import {
            scope: test://example/catalog.yaml#/import/7,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/array-key,
        },
        Import {
            scope: test://example/catalog.yaml#/import/5,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/db-views,
        },
        Import {
            scope: test://example/catalog.yaml#/import/8,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/from-array-key,
        },
        Import {
            scope: test://example/catalog.yaml#/import/2,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/catalog.yaml#/import/1,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-reverse,
        },
        Import {
            scope: test://example/catalog.yaml#/import/0,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/catalog.yaml#/import/3,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-string-captures,
        },
        Import {
            scope: test://example/catalog.yaml#/import/6,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-string-tests,
        },
        Import {
            scope: test://example/catalog.yaml#/import/4,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/webhook-deliveries,
        },
        Import {
            scope: test://example/db-views#/materializations/testing~1db-views/endpoint/connector/config,
            from_resource: test://example/db-views,
            to_resource: test://example/db-views?ptr=/materializations/testing~1db-views/endpoint/connector/config,
        },
        Import {
            scope: test://example/db-views#/import/0,
            from_resource: test://example/db-views,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/from-array-key#/import/0,
            from_resource: test://example/from-array-key,
            to_resource: test://example/array-key,
        },
        Import {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation/register/schema,
            from_resource: test://example/from-array-key,
            to_resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
        },
        Import {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/schema,
            from_resource: test://example/from-array-key,
            to_resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
        },
        Import {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/typescript/module,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-halve.ts,
        },
        Import {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/register/schema,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
        },
        Import {
            scope: test://example/int-halve#/collections/testing~1int-halve/schema,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-string-len.schema,
        },
        Import {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation/typescript/module,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-reverse.ts,
        },
        Import {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation/register/schema,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
        },
        Import {
            scope: test://example/int-reverse#/import/0,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/schema,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string#/import/0,
            from_resource: test://example/int-string,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/int-string#/collections/testing~1int-string-rw/readSchema,
            from_resource: test://example/int-string,
            to_resource: test://example/int-string-len.schema,
        },
        Import {
            scope: test://example/int-string#/collections/testing~1int-string-rw/writeSchema,
            from_resource: test://example/int-string,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string#/collections/testing~1int-string/schema,
            from_resource: test://example/int-string,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string#/collections/testing~1int-string.v2/schema,
            from_resource: test://example/int-string,
            to_resource: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema,
        },
        Import {
            scope: test://example/int-string-captures#/captures/testing~1db-cdc/endpoint/connector/config,
            from_resource: test://example/int-string-captures,
            to_resource: test://example/cdc-config.yaml,
        },
        Import {
            scope: test://example/int-string-captures#/import/0,
            from_resource: test://example/int-string-captures,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-string-captures#/captures/testing~1s3-source/endpoint/connector/config,
            from_resource: test://example/int-string-captures,
            to_resource: test://example/int-string-captures?ptr=/captures/testing~1s3-source/endpoint/connector/config,
        },
        Import {
            scope: test://example/int-string-len.schema#/properties/arr/additionalItems/$ref,
            from_resource: test://example/int-string-len.schema,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string-len.schema#/$ref,
            from_resource: test://example/int-string-len.schema,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string-tests#/import/0,
            from_resource: test://example/int-string-tests,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-string-tests#/tests/testing~1test/0,
            from_resource: test://example/int-string-tests,
            to_resource: test://example/int-string-tests?ptr=/tests/testing~1test/0,
        },
        Import {
            scope: test://example/int-string-tests#/tests/testing~1test/1,
            from_resource: test://example/int-string-tests,
            to_resource: test://example/int-string-tests?ptr=/tests/testing~1test/1,
        },
        Import {
            scope: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema#/$ref,
            from_resource: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/webhook-deliveries#/import/1,
            from_resource: test://example/webhook-deliveries,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/webhook-deliveries#/import/0,
            from_resource: test://example/webhook-deliveries,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries/endpoint/connector/config,
            from_resource: test://example/webhook-deliveries,
            to_resource: test://example/webhook-config.yaml,
        },
    ],
    inferences: [
        Inference {
            schema: test://example/array-key.schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr,
            spec: Inference {
                types: [
                    "array",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr/0/aKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr/1/aKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr/2/aKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr/3/aKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            location: /an-int,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            location: /nested,
            spec: Inference {
                types: [
                    "object",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            location: /nested/timestamp,
            spec: Inference {
                types: [
                    "string",
                ],
                string: Some(
                    String {
                        content_type: "",
                        format: "date-time",
                        content_encoding: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: May,
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
            location: /someKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            location: ,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            location: ,
            spec: Inference {
                types: [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string",
                ],
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        content_encoding: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /arr,
            spec: Inference {
                types: [
                    "array",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: May,
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /bit,
            spec: Inference {
                types: [
                    "boolean",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /extra,
            spec: Inference {
                types: [
                    "boolean",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: May,
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /int,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /len,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /partitionString,
            spec: Inference {
                types: [
                    "string",
                ],
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        content_encoding: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /str,
            spec: Inference {
                types: [
                    "string",
                ],
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        content_encoding: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: /bit,
            spec: Inference {
                types: [
                    "boolean",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: /int,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: /str,
            spec: Inference {
                types: [
                    "string",
                ],
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        content_encoding: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema,
            location: /bit,
            spec: Inference {
                types: [
                    "boolean",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema,
            location: /int,
            spec: Inference {
                types: [
                    "integer",
                ],
                string: None,
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
        Inference {
            schema: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema,
            location: /str,
            spec: Inference {
                types: [
                    "string",
                ],
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        content_encoding: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
                default_json: "",
                secret: false,
                exists: Must,
            },
        },
    ],
    materialization_bindings: [
        MaterializationBinding {
            scope: test://example/db-views#/materializations/testing~1db-views/bindings/0,
            materialization: testing/db-views,
            materialization_index: 0,
            spec: {
              "resource": {
                "table": "the_table"
              },
              "source": "testing/int-string",
              "fields": {
                "recommended": true
              }
            },
        },
        MaterializationBinding {
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries/bindings/0,
            materialization: testing/webhook/deliveries,
            materialization_index: 0,
            spec: {
              "resource": {
                "fixture": "one"
              },
              "source": "testing/int-string",
              "partitions": {
                "include": {
                  "bit": [
                    true
                  ]
                },
                "exclude": {}
              },
              "fields": {
                "include": {
                  "str": {
                    "pass": "through"
                  }
                },
                "exclude": [
                  "bit"
                ],
                "recommended": true
              }
            },
        },
        MaterializationBinding {
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries/bindings/1,
            materialization: testing/webhook/deliveries,
            materialization_index: 1,
            spec: {
              "resource": {
                "fixture": "two"
              },
              "source": "testing/int-halve",
              "fields": {
                "include": {
                  "Len": {}
                },
                "recommended": false
              }
            },
        },
    ],
    materializations: [
        Materialization {
            scope: test://example/db-views#/materializations/testing~1db-views,
            materialization: testing/db-views,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "database/image",
                  "config": null
                }
              },
              "bindings": [],
              "shards": {
                "maxTxnDuration": "2m 3s",
                "logLevel": "warn"
              }
            },
            endpoint_config: test://example/db-views?ptr=/materializations/testing~1db-views/endpoint/connector/config,
        },
        Materialization {
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries,
            materialization: testing/webhook/deliveries,
            spec: {
              "endpoint": {
                "connector": {
                  "image": "webhook/connector",
                  "config": null
                }
              },
              "bindings": []
            },
            endpoint_config: test://example/webhook-config.yaml,
        },
    ],
    meta: [],
    npm_dependencies: [
        NPMDependency {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation/typescript/npmDependencies/package-one,
            derivation: testing/int-reverse,
            package: package-one,
            version: v1.2.3,
        },
    ],
    projections: [
        Projection {
            scope: test://example/array-key#/collections/testing~1array-key/projections/aKeyOne,
            collection: testing/array-key,
            field: aKeyOne,
            spec: "/arr/1/aKey",
        },
        Projection {
            scope: test://example/array-key#/collections/testing~1array-key/projections/flow_document,
            collection: testing/array-key,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/projections/flow_document,
            collection: testing/from-array-key,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve/projections/Extra,
            collection: testing/int-halve,
            field: Extra,
            spec: "/extra",
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve/projections/Len,
            collection: testing/int-halve,
            field: Len,
            spec: {
              "location": "/len",
              "partition": true
            },
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve/projections/Root,
            collection: testing/int-halve,
            field: Root,
            spec: "",
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve/projections/TheString,
            collection: testing/int-halve,
            field: TheString,
            spec: {
              "location": "/partitionString",
              "partition": true
            },
        },
        Projection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/projections/flow_document,
            collection: testing/int-reverse,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string/projections/Int,
            collection: testing/int-string,
            field: Int,
            spec: "/int",
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string/projections/bit,
            collection: testing/int-string,
            field: bit,
            spec: {
              "location": "/bit",
              "partition": true
            },
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string/projections/flow_document,
            collection: testing/int-string,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string-rw/projections/Int,
            collection: testing/int-string-rw,
            field: Int,
            spec: "/int",
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string-rw/projections/Len,
            collection: testing/int-string-rw,
            field: Len,
            spec: "/len",
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string-rw/projections/Str,
            collection: testing/int-string-rw,
            field: Str,
            spec: "/str",
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string-rw/projections/bit,
            collection: testing/int-string-rw,
            field: bit,
            spec: {
              "location": "/bit",
              "partition": true
            },
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string-rw/projections/flow_document,
            collection: testing/int-string-rw,
            field: flow_document,
            spec: "",
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string.v2/projections/flow_document,
            collection: testing/int-string.v2,
            field: flow_document,
            spec: "",
        },
    ],
    resources: [
        Resource {
            resource: test://example/array-key,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/array-key":{"key":["/arr/0/aKey"],"projections":{"aKeyOne":"/arr/1/aKey"},"schema":"test://example/array-key.schema"}}},
        },
        Resource {
            resource: test://example/array-key.schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"properties":{"arr":{"items":{"properties":{"aKey":{"type":"integer"}},"required":["aKey"],"type":"object"},"minItems":5,"type":"array"}},"required":["arr"],"type":"object"},
        },
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["test://example/int-string","test://example/int-reverse","test://example/int-halve","test://example/int-string-captures","test://example/webhook-deliveries","test://example/db-views","test://example/int-string-tests","test://example/array-key","test://example/from-array-key"],"storageMappings":{"not-matched/":{"stores":[{"bucket":"not-matched-bucket","provider":"AZURE"}]},"recovery/testing/":{"stores":[{"bucket":"recovery-bucket","prefix":"some/","provider":"GCS"}]},"testing/":{"stores":[{"bucket":"data-bucket","provider":"S3"}]}}},
        },
        Resource {
            resource: test://example/cdc-config.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"host":"a.host.name","user":"a-user"},
        },
        Resource {
            resource: test://example/db-views,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["test://example/int-string"],"materializations":{"testing/db-views":{"bindings":[{"resource":{"table":"the_table"},"source":"testing/int-string"}],"endpoint":{"connector":{"config":{"foo":"bar"},"image":"database/image"}},"shards":{"logLevel":"warn","maxTxnDuration":"123s"}}}},
        },
        Resource {
            resource: test://example/db-views?ptr=/materializations/testing~1db-views/endpoint/connector/config,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"foo":"bar"},
        },
        Resource {
            resource: test://example/from-array-key,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/from-array-key":{"derivation":{"register":{"initial":{"an-int":42,"nested":{"timestamp":"2019-03-06T09:28:00Z"}},"schema":{"properties":{"an-int":{"type":"integer"},"nested":{"properties":{"timestamp":{"format":"date-time","type":"string"}},"type":"object"}},"required":["an-int","nested"],"type":"object"}},"transform":{"withBar":{"publish":{"lambda":{"sql":"select s.aKeyOne, s.arr, s.\"arr/0/aKey\", r.\"an-int\", r.\"nested/timestamp\" from source as s, register as r\n"}},"shuffle":{"key":["/arr/2/aKey"]},"source":{"name":"testing/array-key"},"update":{"lambda":{"sql":"select aKeyOne as \"an-int\", json_object('timestamp', strftime('%Y-%m-%dT%H:%M:%SZ')) as two from source"}}},"withFoo":{"publish":{"lambda":{"remote":"https://an/api"}},"shuffle":{"key":["/arr/3/aKey"]},"source":{"name":"testing/array-key"}}}},"key":["/someKey"],"schema":{"properties":{"someKey":{"type":"integer"}},"required":["someKey"],"type":"object"}}},"import":["test://example/array-key"]},
        },
        Resource {
            resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"properties":{"an-int":{"type":"integer"},"nested":{"properties":{"timestamp":{"format":"date-time","type":"string"}},"type":"object"}},"required":["an-int","nested"],"type":"object"},
        },
        Resource {
            resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"properties":{"someKey":{"type":"integer"}},"required":["someKey"],"type":"object"},
        },
        Resource {
            resource: test://example/int-halve,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/int-halve":{"derivation":{"register":{"initial":42,"schema":{"type":"integer"}},"shards":{"disable":true},"transform":{"halveIntString":{"shuffle":{"key":["/len","/str"]},"source":{"name":"testing/int-string-rw","partitions":{"exclude":{"bit":[false]},"include":{"bit":[true]}}},"update":{"lambda":{"remote":"https://an/api"}}},"halveSelf":{"publish":{"lambda":"typescript"},"shuffle":{"key":["/len","/partitionString"]},"source":{"name":"testing/int-halve"}}},"typescript":{"module":"int-halve.ts"}},"journals":{"fragments":{"flushInterval":"15m","length":11223344}},"key":["/int"],"projections":{"Extra":"/extra","Len":{"location":"/len","partition":true},"Root":"","TheString":{"location":"/partitionString","partition":true}},"schema":"test://example/int-string-len.schema"}}},
        },
        Resource {
            resource: test://example/int-halve.ts,
            content_type: "TYPESCRIPT_MODULE",
            content: ".. binary ..",
            content_dom: null,
        },
        Resource {
            resource: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"type":"integer"},
        },
        Resource {
            resource: test://example/int-reverse,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/int-reverse":{"derivation":{"transform":{"reverseIntString":{"publish":{"lambda":"typescript"},"source":{"name":"testing/int-string"}}},"typescript":{"module":"int-reverse.ts","npmDependencies":{"package-one":"v1.2.3"}}},"key":["/int"],"schema":"test://example/int-string.schema"}},"import":["test://example/int-string"]},
        },
        Resource {
            resource: test://example/int-reverse.ts,
            content_type: "TYPESCRIPT_MODULE",
            content: ".. binary ..",
            content_dom: null,
        },
        Resource {
            resource: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: true,
        },
        Resource {
            resource: test://example/int-string,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"collections":{"testing/int-string":{"key":["/int"],"projections":{"Int":"/int","bit":{"location":"/bit","partition":true}},"schema":"test://example/int-string.schema"},"testing/int-string-rw":{"key":["/int"],"projections":{"Int":"/int","Len":"/len","Str":"/str","bit":{"location":"/bit","partition":true}},"readSchema":"test://example/int-string-len.schema","writeSchema":"test://example/int-string.schema"},"testing/int-string.v2":{"journals":{"fragments":{"compressionCodec":"ZSTANDARD"}},"key":["/int"],"schema":{"$id":"test://inlined/canonical/id","$ref":"test://example/int-string.schema"}}},"import":["test://example/int-halve"]},
        },
        Resource {
            resource: test://example/int-string-captures,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"captures":{"testing/db-cdc":{"bindings":[{"resource":{"namespace":"and namespace","stream":"other-stream"},"target":"testing/int-string"}],"endpoint":{"connector":{"config":"cdc-config.yaml","image":"database"}},"shards":{"hotStandbys":1}},"testing/s3-source":{"bindings":[{"resource":{"stream":"a-stream"},"target":"testing/int-string"},{"resource":{"stream":"v2-stream"},"target":"testing/int-string.v2"}],"endpoint":{"connector":{"config":{"bucket":"a-bucket","prefix":"and-prefix"},"image":"s3"}},"interval":"10m"}},"import":["test://example/int-string"]},
        },
        Resource {
            resource: test://example/int-string-captures?ptr=/captures/testing~1s3-source/endpoint/connector/config,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"bucket":"a-bucket","prefix":"and-prefix"},
        },
        Resource {
            resource: test://example/int-string-len.schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"$defs":{"otherAnchor":{"$anchor":"Other","type":"integer"}},"$id":"test://example/canonical/int-string-len.schema","$ref":"../int-string.schema","additionalProperties":{"type":"boolean"},"properties":{"arr":{"additionalItems":{"$ref":"../int-string.schema#AnAnchor"},"type":"array"},"bit":{},"int":{},"len":{"type":"integer"},"partitionString":{"type":"string"},"str":{}},"required":["len","partitionString"]},
        },
        Resource {
            resource: test://example/int-string-tests,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["test://example/int-string"],"tests":{"testing/test":[{"ingest":{"collection":"testing/int-string","documents":[{"bit":true,"int":42,"str":"string A"},{"bit":true,"int":52,"str":"string B"}]}},{"verify":{"collection":"testing/int-string","description":"expect stuff happens","documents":[{"str":"string A"},{"str":"string B"}],"partitions":{"include":{"bit":[true]}}}}]}},
        },
        Resource {
            resource: test://example/int-string-tests?ptr=/tests/testing~1test/0,
            content_type: "DOCUMENTS_FIXTURE",
            content: ".. binary ..",
            content_dom: [{"bit":true,"int":42,"str":"string A"},{"bit":true,"int":52,"str":"string B"}],
        },
        Resource {
            resource: test://example/int-string-tests?ptr=/tests/testing~1test/1,
            content_type: "DOCUMENTS_FIXTURE",
            content: ".. binary ..",
            content_dom: [{"str":"string A"},{"str":"string B"}],
        },
        Resource {
            resource: test://example/int-string.schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
        },
        Resource {
            resource: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
            content_dom: {"$id":"test://inlined/canonical/id","$ref":"test://example/int-string.schema"},
        },
        Resource {
            resource: test://example/webhook-config.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
            content_dom: {"address":"http://example/webhook"},
        },
        Resource {
            resource: test://example/webhook-deliveries,
            content_type: "CATALOG",
            content: ".. binary ..",
            content_dom: {"import":["test://example/int-string","test://example/int-halve"],"materializations":{"testing/webhook/deliveries":{"bindings":[{"fields":{"exclude":["bit"],"include":{"str":{"pass":"through"}},"recommended":true},"partitions":{"include":{"bit":[true]}},"resource":{"fixture":"one"},"source":"testing/int-string"},{"fields":{"include":{"Len":{}},"recommended":false},"resource":{"fixture":"two"},"source":"testing/int-halve"}],"endpoint":{"connector":{"config":"webhook-config.yaml","image":"webhook/connector"}}}}},
        },
    ],
    schema_docs: [
        SchemaDoc {
            schema: test://example/array-key.schema,
            dom: {
              "properties": {
                "arr": {
                  "items": {
                    "properties": {
                      "aKey": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "aKey"
                    ],
                    "type": "object"
                  },
                  "minItems": 5,
                  "type": "array"
                }
              },
              "required": [
                "arr"
              ],
              "type": "object"
            },
        },
        SchemaDoc {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            dom: {
              "properties": {
                "an-int": {
                  "type": "integer"
                },
                "nested": {
                  "properties": {
                    "timestamp": {
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "an-int",
                "nested"
              ],
              "type": "object"
            },
        },
        SchemaDoc {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
            dom: {
              "properties": {
                "someKey": {
                  "type": "integer"
                }
              },
              "required": [
                "someKey"
              ],
              "type": "object"
            },
        },
        SchemaDoc {
            schema: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            dom: {
              "type": "integer"
            },
        },
        SchemaDoc {
            schema: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            dom: true,
        },
        SchemaDoc {
            schema: test://example/int-string-len.schema,
            dom: {
              "$defs": {
                "otherAnchor": {
                  "$anchor": "Other",
                  "type": "integer"
                }
              },
              "$id": "test://example/canonical/int-string-len.schema",
              "$ref": "../int-string.schema",
              "additionalProperties": {
                "type": "boolean"
              },
              "properties": {
                "arr": {
                  "additionalItems": {
                    "$ref": "../int-string.schema#AnAnchor"
                  },
                  "type": "array"
                },
                "bit": {},
                "int": {},
                "len": {
                  "type": "integer"
                },
                "partitionString": {
                  "type": "string"
                },
                "str": {}
              },
              "required": [
                "len",
                "partitionString"
              ]
            },
        },
        SchemaDoc {
            schema: test://example/int-string.schema,
            dom: {
              "$defs": {
                "anAnchor": {
                  "$anchor": "AnAnchor",
                  "properties": {
                    "one": {
                      "type": "string"
                    },
                    "two": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "one"
                  ],
                  "type": "object"
                }
              },
              "properties": {
                "bit": {
                  "type": "boolean"
                },
                "int": {
                  "type": "integer"
                },
                "str": {
                  "type": "string"
                }
              },
              "required": [
                "int",
                "str",
                "bit"
              ],
              "type": "object"
            },
        },
        SchemaDoc {
            schema: test://example/int-string?ptr=/collections/testing~1int-string.v2/schema,
            dom: {
              "$id": "test://inlined/canonical/id",
              "$ref": "test://example/int-string.schema"
            },
        },
    ],
    storage_mappings: [
        StorageMapping {
            scope: test://example/catalog.yaml#/storageMappings/not-matched~1,
            prefix: not-matched/,
            stores: [
              {
                "provider": "AZURE",
                "bucket": "not-matched-bucket",
                "prefix": null
              }
            ],
        },
        StorageMapping {
            scope: test://example/catalog.yaml#/storageMappings/recovery~1testing~1,
            prefix: recovery/testing/,
            stores: [
              {
                "provider": "GCS",
                "bucket": "recovery-bucket",
                "prefix": "some/"
              }
            ],
        },
        StorageMapping {
            scope: test://example/catalog.yaml#/storageMappings/testing~1,
            prefix: testing/,
            stores: [
              {
                "provider": "S3",
                "bucket": "data-bucket",
                "prefix": null
              }
            ],
        },
    ],
    test_steps: [
        TestStep {
            scope: test://example/int-string-tests#/tests/testing~1test/0,
            test: testing/test,
            step_index: 0,
            spec: {
              "ingest": {
                "collection": "testing/int-string",
                "documents": []
              }
            },
            documents: test://example/int-string-tests?ptr=/tests/testing~1test/0,
        },
        TestStep {
            scope: test://example/int-string-tests#/tests/testing~1test/1,
            test: testing/test,
            step_index: 1,
            spec: {
              "verify": {
                "description": "expect stuff happens",
                "collection": "testing/int-string",
                "documents": [],
                "partitions": {
                  "include": {
                    "bit": [
                      true
                    ]
                  },
                  "exclude": {}
                }
              }
            },
            documents: test://example/int-string-tests?ptr=/tests/testing~1test/1,
        },
    ],
    transforms: [
        Transform {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation/transform/withBar,
            derivation: testing/from-array-key,
            transform: withBar,
            spec: {
              "source": {
                "name": "testing/array-key"
              },
              "shuffle": {
                "key": [
                  "/arr/2/aKey"
                ]
              },
              "update": {
                "lambda": {
                  "sql": "select aKeyOne as \"an-int\", json_object('timestamp', strftime('%Y-%m-%dT%H:%M:%SZ')) as two from source"
                }
              },
              "publish": {
                "lambda": {
                  "sql": "select s.aKeyOne, s.arr, s.\"arr/0/aKey\", r.\"an-int\", r.\"nested/timestamp\" from source as s, register as r\n"
                }
              }
            },
        },
        Transform {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation/transform/withFoo,
            derivation: testing/from-array-key,
            transform: withFoo,
            spec: {
              "source": {
                "name": "testing/array-key"
              },
              "shuffle": {
                "key": [
                  "/arr/3/aKey"
                ]
              },
              "publish": {
                "lambda": {
                  "remote": "https://an/api"
                }
              }
            },
        },
        Transform {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/transform/halveIntString,
            derivation: testing/int-halve,
            transform: halveIntString,
            spec: {
              "source": {
                "name": "testing/int-string-rw",
                "partitions": {
                  "include": {
                    "bit": [
                      true
                    ]
                  },
                  "exclude": {
                    "bit": [
                      false
                    ]
                  }
                }
              },
              "shuffle": {
                "key": [
                  "/len",
                  "/str"
                ]
              },
              "update": {
                "lambda": {
                  "remote": "https://an/api"
                }
              }
            },
        },
        Transform {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/transform/halveSelf,
            derivation: testing/int-halve,
            transform: halveSelf,
            spec: {
              "source": {
                "name": "testing/int-halve"
              },
              "shuffle": {
                "key": [
                  "/len",
                  "/partitionString"
                ]
              },
              "publish": {
                "lambda": "typescript"
              }
            },
        },
        Transform {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation/transform/reverseIntString,
            derivation: testing/int-reverse,
            transform: reverseIntString,
            spec: {
              "source": {
                "name": "testing/int-string"
              },
              "publish": {
                "lambda": "typescript"
              }
            },
        },
    ],
}
