---
source: crates/validation/tests/scenario_tests.rs
expression: tables

---
All {
    built_captures: [
        BuiltCapture {
            scope: test://example/int-string-captures#/captures/testing~1db-cdc,
            capture: testing/db-cdc,
            spec: CaptureSpec {
                capture: "testing/db-cdc",
                endpoint_type: AirbyteSource,
                endpoint_spec_json: "{\"config\":{\"host\":\"a.host.name\",\"user\":\"a-user\"},\"image\":\"database\"}",
                bindings: [
                    Binding {
                        resource_spec_json: "{\"namespace\":\"and namespace\",\"stream\":\"other-stream\"}",
                        resource_path: [
                            "schema",
                            "table",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string",
                                schema_uri: "test://example/int-string.schema",
                                schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        user_provided: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        user_provided: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                must_exist: true,
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                ],
                interval_seconds: 300,
                shard_template: Some(
                    ShardSpec {
                        id: "capture/testing/db-cdc",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 1,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-cdc",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/capture/testing/db-cdc",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-cdc",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCapture {
            scope: test://example/int-string-captures#/captures/testing~1s3-source,
            capture: testing/s3-source,
            spec: CaptureSpec {
                capture: "testing/s3-source",
                endpoint_type: AirbyteSource,
                endpoint_spec_json: "{\"config\":{\"bucket\":\"a-bucket\",\"prefix\":\"and-prefix\"},\"image\":\"s3\"}",
                bindings: [
                    Binding {
                        resource_spec_json: "{\"stream\":\"a-stream\"}",
                        resource_path: [
                            "bucke+",
                            "pr@fix",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string",
                                schema_uri: "test://example/int-string.schema",
                                schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        user_provided: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        user_provided: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                must_exist: true,
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                    Binding {
                        resource_spec_json: "{\"stream\":\"v2-stream\"}",
                        resource_path: [
                            "other-bucket",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string.v2",
                                schema_uri: "test://example/int-string.schema",
                                schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [],
                                projections: [
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                must_exist: true,
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string.v2",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string.v2",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Zstandard,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                    },
                ],
                interval_seconds: 600,
                shard_template: Some(
                    ShardSpec {
                        id: "capture/testing/s3-source",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/s3-source",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/capture/testing/s3-source",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/s3-source",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "capture",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
    ],
    built_collections: [
        BuiltCollection {
            scope: test://example/array-key#/collections/testing~1array-key,
            collection: testing/array-key,
            spec: CollectionSpec {
                collection: "testing/array-key",
                schema_uri: "test://example/array-key.schema",
                schema_json: "{\"$id\":\"test://example/array-key.schema\",\"properties\":{\"arr\":{\"items\":{\"properties\":{\"aKey\":{\"type\":\"integer\"}},\"required\":[\"aKey\"],\"type\":\"object\"},\"minItems\":5,\"type\":\"array\"}},\"required\":[\"arr\"],\"type\":\"object\"}",
                key_ptrs: [
                    "/arr/0/aKey",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/arr/1/aKey",
                        field: "aKeyOne",
                        user_provided: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr",
                        field: "arr",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "array",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr/0/aKey",
                        field: "arr/0/aKey",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr/1/aKey",
                        field: "arr/1/aKey",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr/3/aKey",
                        field: "arr/3/aKey",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/array-key",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/array-key",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/from-array-key#/collections/testing~1from-array-key,
            collection: testing/from-array-key,
            spec: CollectionSpec {
                collection: "testing/from-array-key",
                schema_uri: "test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema",
                schema_json: "{\"$id\":\"test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema\",\"properties\":{\"someKey\":{\"type\":\"integer\"}},\"required\":[\"someKey\"],\"type\":\"object\"}",
                key_ptrs: [
                    "/someKey",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/someKey",
                        field: "someKey",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/from-array-key",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/from-array-key",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            spec: CollectionSpec {
                collection: "testing/int-halve",
                schema_uri: "test://example/int-string-len.schema",
                schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/int-string-len.schema\",\"$ref\":\"test://example/int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"str\":{}},\"required\":[\"len\"]}",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [
                    "Len",
                ],
                projections: [
                    Projection {
                        ptr: "/extra",
                        field: "Extra",
                        user_provided: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: false,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "Len",
                        user_provided: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "Root",
                        user_provided: true,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/arr",
                        field: "arr",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "array",
                                ],
                                must_exist: false,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/extra",
                        field: "extra",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: false,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/len",
                        field: "len",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                must_exist: true,
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-halve",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-halve",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 11223344,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: Some(
                                    Duration {
                                        seconds: 900,
                                        nanos: 0,
                                    },
                                ),
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            spec: CollectionSpec {
                collection: "testing/int-reverse",
                schema_uri: "test://example/int-string.schema",
                schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                must_exist: true,
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-reverse",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-reverse",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            spec: CollectionSpec {
                collection: "testing/int-string",
                schema_uri: "test://example/int-string.schema",
                schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [
                    "bit",
                ],
                projections: [
                    Projection {
                        ptr: "/int",
                        field: "Int",
                        user_provided: true,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        user_provided: true,
                        is_partition_key: true,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                must_exist: true,
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-string",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-string",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Gzip,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltCollection {
            scope: test://example/int-string#/collections/testing~1int-string.v2,
            collection: testing/int-string.v2,
            spec: CollectionSpec {
                collection: "testing/int-string.v2",
                schema_uri: "test://example/int-string.schema",
                schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                key_ptrs: [
                    "/int",
                ],
                uuid_ptr: "/_meta/uuid",
                partition_fields: [],
                projections: [
                    Projection {
                        ptr: "/bit",
                        field: "bit",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "boolean",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "",
                        field: "flow_document",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "object",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/int",
                        field: "int",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: true,
                        inference: Some(
                            Inference {
                                types: [
                                    "integer",
                                ],
                                must_exist: true,
                                string: None,
                                title: "",
                                description: "",
                            },
                        ),
                    },
                    Projection {
                        ptr: "/str",
                        field: "str",
                        user_provided: false,
                        is_partition_key: false,
                        is_primary_key: false,
                        inference: Some(
                            Inference {
                                types: [
                                    "string",
                                ],
                                must_exist: true,
                                string: Some(
                                    String {
                                        content_type: "",
                                        format: "",
                                        is_base64: false,
                                        max_length: 0,
                                    },
                                ),
                                title: "",
                                description: "",
                            },
                        ),
                    },
                ],
                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                partition_template: Some(
                    JournalSpec {
                        name: "testing/int-string.v2",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-ndjson",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/collection",
                                        value: "testing/int-string.v2",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 536870912,
                                compression_codec: Zstandard,
                                stores: [
                                    "s3://data-bucket/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
    ],
    built_derivations: [
        BuiltDerivation {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation,
            derivation: testing/from-array-key,
            spec: DerivationSpec {
                collection: Some(
                    CollectionSpec {
                        collection: "testing/from-array-key",
                        schema_uri: "test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema",
                        schema_json: "{\"$id\":\"test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema\",\"properties\":{\"someKey\":{\"type\":\"integer\"}},\"required\":[\"someKey\"],\"type\":\"object\"}",
                        key_ptrs: [
                            "/someKey",
                        ],
                        uuid_ptr: "/_meta/uuid",
                        partition_fields: [],
                        projections: [
                            Projection {
                                ptr: "",
                                field: "flow_document",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "object",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/someKey",
                                field: "someKey",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: true,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "integer",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                        ],
                        ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                        partition_template: Some(
                            JournalSpec {
                                name: "testing/from-array-key",
                                replication: 3,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                            },
                                            Label {
                                                name: "content-type",
                                                value: "application/x-ndjson",
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "a-build-id",
                                            },
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/from-array-key",
                                            },
                                        ],
                                    },
                                ),
                                fragment: Some(
                                    Fragment {
                                        length: 536870912,
                                        compression_codec: Gzip,
                                        stores: [
                                            "s3://data-bucket/",
                                        ],
                                        refresh_interval: Some(
                                            Duration {
                                                seconds: 300,
                                                nanos: 0,
                                            },
                                        ),
                                        retention: None,
                                        flush_interval: None,
                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                    },
                                ),
                                flags: 4,
                                max_append_rate: 4194304,
                            },
                        ),
                    },
                ),
                register_schema_uri: "test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema",
                register_initial_json: "null",
                transforms: [
                    TransformSpec {
                        derivation: "testing/from-array-key",
                        transform: "withSourceSchema",
                        shuffle: Some(
                            Shuffle {
                                group_name: "derive/testing/from-array-key/withSourceSchema",
                                source_collection: "testing/array-key",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/array-key",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptr: [
                                    "/arr/2/aKey",
                                ],
                                uses_source_key: false,
                                shuffle_lambda: None,
                                source_schema_uri: "test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema",
                                uses_source_schema: false,
                                validate_schema_at_read: true,
                                filter_r_clocks: true,
                                read_delay_seconds: 0,
                                priority: 0,
                            },
                        ),
                        update_lambda: None,
                        publish_lambda: Some(
                            LambdaSpec {
                                typescript: "",
                                remote: "https://an/api",
                            },
                        ),
                    },
                    TransformSpec {
                        derivation: "testing/from-array-key",
                        transform: "withoutSourceSchema",
                        shuffle: Some(
                            Shuffle {
                                group_name: "derive/testing/from-array-key/withoutSourceSchema",
                                source_collection: "testing/array-key",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/array-key",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptr: [
                                    "/arr/3/aKey",
                                ],
                                uses_source_key: false,
                                shuffle_lambda: None,
                                source_schema_uri: "test://example/array-key.schema",
                                uses_source_schema: true,
                                validate_schema_at_read: true,
                                filter_r_clocks: true,
                                read_delay_seconds: 0,
                                priority: 0,
                            },
                        ),
                        update_lambda: None,
                        publish_lambda: Some(
                            LambdaSpec {
                                typescript: "",
                                remote: "https://an/api",
                            },
                        ),
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "derivation/testing/from-array-key",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/from-array-key",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/derivation/testing/from-array-key",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/from-array-key",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltDerivation {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation,
            derivation: testing/int-halve,
            spec: DerivationSpec {
                collection: Some(
                    CollectionSpec {
                        collection: "testing/int-halve",
                        schema_uri: "test://example/int-string-len.schema",
                        schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/int-string-len.schema\",\"$ref\":\"test://example/int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"str\":{}},\"required\":[\"len\"]}",
                        key_ptrs: [
                            "/int",
                        ],
                        uuid_ptr: "/_meta/uuid",
                        partition_fields: [
                            "Len",
                        ],
                        projections: [
                            Projection {
                                ptr: "/extra",
                                field: "Extra",
                                user_provided: true,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "boolean",
                                        ],
                                        must_exist: false,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/len",
                                field: "Len",
                                user_provided: true,
                                is_partition_key: true,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "integer",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "",
                                field: "Root",
                                user_provided: true,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "object",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/arr",
                                field: "arr",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "array",
                                        ],
                                        must_exist: false,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/bit",
                                field: "bit",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "boolean",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/extra",
                                field: "extra",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "boolean",
                                        ],
                                        must_exist: false,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "",
                                field: "flow_document",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "object",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/int",
                                field: "int",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: true,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "integer",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/len",
                                field: "len",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "integer",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/str",
                                field: "str",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "string",
                                        ],
                                        must_exist: true,
                                        string: Some(
                                            String {
                                                content_type: "",
                                                format: "",
                                                is_base64: false,
                                                max_length: 0,
                                            },
                                        ),
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                        ],
                        ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                        partition_template: Some(
                            JournalSpec {
                                name: "testing/int-halve",
                                replication: 3,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                            },
                                            Label {
                                                name: "content-type",
                                                value: "application/x-ndjson",
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "a-build-id",
                                            },
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-halve",
                                            },
                                        ],
                                    },
                                ),
                                fragment: Some(
                                    Fragment {
                                        length: 11223344,
                                        compression_codec: Gzip,
                                        stores: [
                                            "s3://data-bucket/",
                                        ],
                                        refresh_interval: Some(
                                            Duration {
                                                seconds: 300,
                                                nanos: 0,
                                            },
                                        ),
                                        retention: None,
                                        flush_interval: Some(
                                            Duration {
                                                seconds: 900,
                                                nanos: 0,
                                            },
                                        ),
                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                    },
                                ),
                                flags: 4,
                                max_append_rate: 4194304,
                            },
                        ),
                    },
                ),
                register_schema_uri: "test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema",
                register_initial_json: "42",
                transforms: [
                    TransformSpec {
                        derivation: "testing/int-halve",
                        transform: "halveIntString",
                        shuffle: Some(
                            Shuffle {
                                group_name: "derive/testing/int-halve/halveIntString",
                                source_collection: "testing/int-string",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/field/bit",
                                                        value: "true",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/field/bit",
                                                        value: "false",
                                                    },
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptr: [
                                    "/len",
                                    "/int",
                                ],
                                uses_source_key: false,
                                shuffle_lambda: None,
                                source_schema_uri: "test://example/int-string-len.schema",
                                uses_source_schema: false,
                                validate_schema_at_read: true,
                                filter_r_clocks: false,
                                read_delay_seconds: 0,
                                priority: 0,
                            },
                        ),
                        update_lambda: Some(
                            LambdaSpec {
                                typescript: "",
                                remote: "https://an/api",
                            },
                        ),
                        publish_lambda: None,
                    },
                    TransformSpec {
                        derivation: "testing/int-halve",
                        transform: "halveSelf",
                        shuffle: Some(
                            Shuffle {
                                group_name: "derive/testing/int-halve/halveSelf",
                                source_collection: "testing/int-halve",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-halve",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptr: [
                                    "/len",
                                    "/int",
                                ],
                                uses_source_key: false,
                                shuffle_lambda: None,
                                source_schema_uri: "test://example/int-string-len.schema",
                                uses_source_schema: true,
                                validate_schema_at_read: true,
                                filter_r_clocks: true,
                                read_delay_seconds: 0,
                                priority: 0,
                            },
                        ),
                        update_lambda: None,
                        publish_lambda: Some(
                            LambdaSpec {
                                typescript: "/derive/testing/int-halve/halveSelf/Publish",
                                remote: "",
                            },
                        ),
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "derivation/testing/int-halve",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: true,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/int-halve",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: true,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/derivation/testing/int-halve",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/int-halve",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltDerivation {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation,
            derivation: testing/int-reverse,
            spec: DerivationSpec {
                collection: Some(
                    CollectionSpec {
                        collection: "testing/int-reverse",
                        schema_uri: "test://example/int-string.schema",
                        schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                        key_ptrs: [
                            "/int",
                        ],
                        uuid_ptr: "/_meta/uuid",
                        partition_fields: [],
                        projections: [
                            Projection {
                                ptr: "/bit",
                                field: "bit",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "boolean",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "",
                                field: "flow_document",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "object",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/int",
                                field: "int",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: true,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "integer",
                                        ],
                                        must_exist: true,
                                        string: None,
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                            Projection {
                                ptr: "/str",
                                field: "str",
                                user_provided: false,
                                is_partition_key: false,
                                is_primary_key: false,
                                inference: Some(
                                    Inference {
                                        types: [
                                            "string",
                                        ],
                                        must_exist: true,
                                        string: Some(
                                            String {
                                                content_type: "",
                                                format: "",
                                                is_base64: false,
                                                max_length: 0,
                                            },
                                        ),
                                        title: "",
                                        description: "",
                                    },
                                ),
                            },
                        ],
                        ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                        partition_template: Some(
                            JournalSpec {
                                name: "testing/int-reverse",
                                replication: 3,
                                labels: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "app.gazette.dev/managed-by",
                                                value: "estuary.dev/flow",
                                            },
                                            Label {
                                                name: "content-type",
                                                value: "application/x-ndjson",
                                            },
                                            Label {
                                                name: "estuary.dev/build",
                                                value: "a-build-id",
                                            },
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-reverse",
                                            },
                                        ],
                                    },
                                ),
                                fragment: Some(
                                    Fragment {
                                        length: 536870912,
                                        compression_codec: Gzip,
                                        stores: [
                                            "s3://data-bucket/",
                                        ],
                                        refresh_interval: Some(
                                            Duration {
                                                seconds: 300,
                                                nanos: 0,
                                            },
                                        ),
                                        retention: None,
                                        flush_interval: None,
                                        path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                    },
                                ),
                                flags: 4,
                                max_append_rate: 4194304,
                            },
                        ),
                    },
                ),
                register_schema_uri: "test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema",
                register_initial_json: "null",
                transforms: [
                    TransformSpec {
                        derivation: "testing/int-reverse",
                        transform: "reverseIntString",
                        shuffle: Some(
                            Shuffle {
                                group_name: "derive/testing/int-reverse/reverseIntString",
                                source_collection: "testing/int-string",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptr: [
                                    "/int",
                                ],
                                uses_source_key: true,
                                shuffle_lambda: None,
                                source_schema_uri: "test://example/int-string.schema",
                                uses_source_schema: true,
                                validate_schema_at_read: true,
                                filter_r_clocks: true,
                                read_delay_seconds: 0,
                                priority: 0,
                            },
                        ),
                        update_lambda: None,
                        publish_lambda: Some(
                            LambdaSpec {
                                typescript: "/derive/testing/int-reverse/reverseIntString/Publish",
                                remote: "",
                            },
                        ),
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "derivation/testing/int-reverse",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/int-reverse",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/derivation/testing/int-reverse",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/int-reverse",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "derivation",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
    ],
    built_materializations: [
        BuiltMaterialization {
            scope: test://example/db-views#/materializations/testing~1db-views,
            materialization: testing/db-views,
            spec: MaterializationSpec {
                materialization: "testing/db-views",
                endpoint_type: FlowSink,
                endpoint_spec_json: "{\"config\":{\"foo\":\"bar\"},\"image\":\"database/image\"}",
                bindings: [
                    Binding {
                        resource_spec_json: "{\"table\":\"the_table\"}",
                        resource_path: [
                            "view",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string",
                                schema_uri: "test://example/int-string.schema",
                                schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        user_provided: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        user_provided: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                must_exist: true,
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                        field_selection: Some(
                            FieldSelection {
                                keys: [],
                                values: [],
                                document: "flow_document",
                                field_config_json: {},
                            },
                        ),
                        delta_updates: false,
                        shuffle: Some(
                            Shuffle {
                                group_name: "materialize/testing/db-views/view",
                                source_collection: "testing/int-string",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptr: [
                                    "/int",
                                ],
                                uses_source_key: true,
                                shuffle_lambda: None,
                                source_schema_uri: "test://example/int-string.schema",
                                uses_source_schema: true,
                                validate_schema_at_read: false,
                                filter_r_clocks: false,
                                read_delay_seconds: 0,
                                priority: 0,
                            },
                        ),
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "materialize/testing/db-views",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 123,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "warn",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-views",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/materialize/testing/db-views",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/db-views",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
        BuiltMaterialization {
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries,
            materialization: testing/webhook/deliveries,
            spec: MaterializationSpec {
                materialization: "testing/webhook/deliveries",
                endpoint_type: FlowSink,
                endpoint_spec_json: "{\"config\":{\"address\":\"http://example/webhook\"},\"image\":\"webhook/connector\"}",
                bindings: [
                    Binding {
                        resource_spec_json: "{\"fixture\":\"one\"}",
                        resource_path: [
                            "Web!hook",
                            "foo bar",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-string",
                                schema_uri: "test://example/int-string.schema",
                                schema_json: "{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"}",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "bit",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/int",
                                        field: "Int",
                                        user_provided: true,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        user_provided: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                must_exist: true,
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-string",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 536870912,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: None,
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                        field_selection: Some(
                            FieldSelection {
                                keys: [
                                    "int",
                                ],
                                values: [
                                    "str",
                                ],
                                document: "flow_document",
                                field_config_json: {
                                    "str": "{\"pass\":\"through\"}",
                                },
                            },
                        ),
                        delta_updates: true,
                        shuffle: Some(
                            Shuffle {
                                group_name: "materialize/testing/webhook/deliveries/Web%21hook%2Ffoo%20bar",
                                source_collection: "testing/int-string",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-string",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/field/bit",
                                                        value: "true",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptr: [
                                    "/int",
                                ],
                                uses_source_key: true,
                                shuffle_lambda: None,
                                source_schema_uri: "test://example/int-string.schema",
                                uses_source_schema: true,
                                validate_schema_at_read: false,
                                filter_r_clocks: false,
                                read_delay_seconds: 0,
                                priority: 0,
                            },
                        ),
                    },
                    Binding {
                        resource_spec_json: "{\"fixture\":\"two\"}",
                        resource_path: [
                            "targe+",
                            "two",
                        ],
                        collection: Some(
                            CollectionSpec {
                                collection: "testing/int-halve",
                                schema_uri: "test://example/int-string-len.schema",
                                schema_json: "{\"$defs\":{\"__flowInline1\":{\"$defs\":{\"anAnchor\":{\"$anchor\":\"AnAnchor\",\"properties\":{\"one\":{\"type\":\"string\"},\"two\":{\"type\":\"integer\"}},\"required\":[\"one\"],\"type\":\"object\"}},\"$id\":\"test://example/int-string.schema\",\"properties\":{\"bit\":{\"type\":\"boolean\"},\"int\":{\"type\":\"integer\"},\"str\":{\"type\":\"string\"}},\"required\":[\"int\",\"str\",\"bit\"],\"type\":\"object\"},\"otherAnchor\":{\"$anchor\":\"Other\",\"type\":\"integer\"}},\"$id\":\"test://example/int-string-len.schema\",\"$ref\":\"test://example/int-string.schema\",\"additionalProperties\":{\"type\":\"boolean\"},\"properties\":{\"arr\":{\"additionalItems\":{\"$ref\":\"int-string.schema#AnAnchor\"},\"type\":\"array\"},\"bit\":{},\"int\":{},\"len\":{\"type\":\"integer\"},\"str\":{}},\"required\":[\"len\"]}",
                                key_ptrs: [
                                    "/int",
                                ],
                                uuid_ptr: "/_meta/uuid",
                                partition_fields: [
                                    "Len",
                                ],
                                projections: [
                                    Projection {
                                        ptr: "/extra",
                                        field: "Extra",
                                        user_provided: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                must_exist: false,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/len",
                                        field: "Len",
                                        user_provided: true,
                                        is_partition_key: true,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "Root",
                                        user_provided: true,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/arr",
                                        field: "arr",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "array",
                                                ],
                                                must_exist: false,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/bit",
                                        field: "bit",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/extra",
                                        field: "extra",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "boolean",
                                                ],
                                                must_exist: false,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "",
                                        field: "flow_document",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "object",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/int",
                                        field: "int",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: true,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/len",
                                        field: "len",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "integer",
                                                ],
                                                must_exist: true,
                                                string: None,
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                    Projection {
                                        ptr: "/str",
                                        field: "str",
                                        user_provided: false,
                                        is_partition_key: false,
                                        is_primary_key: false,
                                        inference: Some(
                                            Inference {
                                                types: [
                                                    "string",
                                                ],
                                                must_exist: true,
                                                string: Some(
                                                    String {
                                                        content_type: "",
                                                        format: "",
                                                        is_base64: false,
                                                        max_length: 0,
                                                    },
                                                ),
                                                title: "",
                                                description: "",
                                            },
                                        ),
                                    },
                                ],
                                ack_json_template: "{\"_meta\":{\"ack\":true,\"uuid\":\"DocUUIDPlaceholder-329Bb50aa48EAa9ef\"}}",
                                partition_template: Some(
                                    JournalSpec {
                                        name: "testing/int-halve",
                                        replication: 3,
                                        labels: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "app.gazette.dev/managed-by",
                                                        value: "estuary.dev/flow",
                                                    },
                                                    Label {
                                                        name: "content-type",
                                                        value: "application/x-ndjson",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/build",
                                                        value: "a-build-id",
                                                    },
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-halve",
                                                    },
                                                ],
                                            },
                                        ),
                                        fragment: Some(
                                            Fragment {
                                                length: 11223344,
                                                compression_codec: Gzip,
                                                stores: [
                                                    "s3://data-bucket/",
                                                ],
                                                refresh_interval: Some(
                                                    Duration {
                                                        seconds: 300,
                                                        nanos: 0,
                                                    },
                                                ),
                                                retention: None,
                                                flush_interval: Some(
                                                    Duration {
                                                        seconds: 900,
                                                        nanos: 0,
                                                    },
                                                ),
                                                path_postfix_template: "utc_date={{.Spool.FirstAppendTime.Format \"2006-01-02\"}}/utc_hour={{.Spool.FirstAppendTime.Format \"15\"}}",
                                            },
                                        ),
                                        flags: 4,
                                        max_append_rate: 4194304,
                                    },
                                ),
                            },
                        ),
                        field_selection: Some(
                            FieldSelection {
                                keys: [
                                    "int",
                                ],
                                values: [
                                    "Extra",
                                    "Len",
                                ],
                                document: "Root",
                                field_config_json: {
                                    "Len": "{}",
                                },
                            },
                        ),
                        delta_updates: true,
                        shuffle: Some(
                            Shuffle {
                                group_name: "materialize/testing/webhook/deliveries/targe+%2Ftwo",
                                source_collection: "testing/int-halve",
                                source_partitions: Some(
                                    LabelSelector {
                                        include: Some(
                                            LabelSet {
                                                labels: [
                                                    Label {
                                                        name: "estuary.dev/collection",
                                                        value: "testing/int-halve",
                                                    },
                                                ],
                                            },
                                        ),
                                        exclude: Some(
                                            LabelSet {
                                                labels: [],
                                            },
                                        ),
                                    },
                                ),
                                source_uuid_ptr: "/_meta/uuid",
                                shuffle_key_ptr: [
                                    "/int",
                                ],
                                uses_source_key: true,
                                shuffle_lambda: None,
                                source_schema_uri: "test://example/int-string-len.schema",
                                uses_source_schema: true,
                                validate_schema_at_read: false,
                                filter_r_clocks: false,
                                read_delay_seconds: 0,
                                priority: 0,
                            },
                        ),
                    },
                ],
                shard_template: Some(
                    ShardSpec {
                        id: "materialize/testing/webhook/deliveries",
                        sources: [],
                        recovery_log_prefix: "recovery",
                        hint_prefix: "/estuary/flow/hints",
                        hint_backups: 2,
                        max_txn_duration: Some(
                            Duration {
                                seconds: 1,
                                nanos: 0,
                            },
                        ),
                        min_txn_duration: Some(
                            Duration {
                                seconds: 0,
                                nanos: 0,
                            },
                        ),
                        disable: false,
                        hot_standbys: 0,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/log-level",
                                        value: "info",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/webhook/deliveries",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                    },
                                ],
                            },
                        ),
                        disable_wait_for_ack: false,
                        ring_buffer_size: 65536,
                        read_channel_size: 131072,
                    },
                ),
                recovery_log_template: Some(
                    JournalSpec {
                        name: "recovery/materialize/testing/webhook/deliveries",
                        replication: 3,
                        labels: Some(
                            LabelSet {
                                labels: [
                                    Label {
                                        name: "app.gazette.dev/managed-by",
                                        value: "estuary.dev/flow",
                                    },
                                    Label {
                                        name: "content-type",
                                        value: "application/x-gazette-recoverylog",
                                    },
                                    Label {
                                        name: "estuary.dev/build",
                                        value: "a-build-id",
                                    },
                                    Label {
                                        name: "estuary.dev/task-name",
                                        value: "testing/webhook/deliveries",
                                    },
                                    Label {
                                        name: "estuary.dev/task-type",
                                        value: "materialization",
                                    },
                                ],
                            },
                        ),
                        fragment: Some(
                            Fragment {
                                length: 268435456,
                                compression_codec: Snappy,
                                stores: [
                                    "gs://recovery-bucket/some/",
                                ],
                                refresh_interval: Some(
                                    Duration {
                                        seconds: 300,
                                        nanos: 0,
                                    },
                                ),
                                retention: None,
                                flush_interval: None,
                                path_postfix_template: "",
                            },
                        ),
                        flags: 4,
                        max_append_rate: 4194304,
                    },
                ),
            },
        },
    ],
    built_tests: [
        BuiltTest {
            test: testing/test,
            spec: TestSpec {
                test: "testing/test",
                steps: [
                    Step {
                        step_type: Ingest,
                        step_index: 0,
                        description: "",
                        step_scope: "test://example/int-string-tests#/tests/testing~1test/0",
                        collection: "testing/int-string",
                        docs_json_lines: "{\"bit\":true,\"int\":42,\"str\":\"string A\"}\n{\"bit\":true,\"int\":52,\"str\":\"string B\"}",
                        partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                    },
                    Step {
                        step_type: Verify,
                        step_index: 1,
                        description: "expect stuff happens",
                        step_scope: "test://example/int-string-tests#/tests/testing~1test/1",
                        collection: "testing/int-string",
                        docs_json_lines: "{\"str\":\"string A\"}\n{\"str\":\"string B\"}",
                        partitions: Some(
                            LabelSelector {
                                include: Some(
                                    LabelSet {
                                        labels: [
                                            Label {
                                                name: "estuary.dev/collection",
                                                value: "testing/int-string",
                                            },
                                            Label {
                                                name: "estuary.dev/field/bit",
                                                value: "true",
                                            },
                                        ],
                                    },
                                ),
                                exclude: Some(
                                    LabelSet {
                                        labels: [],
                                    },
                                ),
                            },
                        ),
                    },
                ],
            },
        },
    ],
    capture_bindings: [
        CaptureBinding {
            scope: test://example/int-string-captures#/captures/testing~1db-cdc/bindings/0,
            capture: testing/db-cdc,
            capture_index: 0,
            resource_spec: {"namespace":"and namespace","stream":"other-stream"},
            collection: testing/int-string,
        },
        CaptureBinding {
            scope: test://example/int-string-captures#/captures/testing~1s3-source/bindings/0,
            capture: testing/s3-source,
            capture_index: 0,
            resource_spec: {"stream":"a-stream"},
            collection: testing/int-string,
        },
        CaptureBinding {
            scope: test://example/int-string-captures#/captures/testing~1s3-source/bindings/1,
            capture: testing/s3-source,
            capture_index: 1,
            resource_spec: {"stream":"v2-stream"},
            collection: testing/int-string.v2,
        },
    ],
    captures: [
        Capture {
            scope: test://example/int-string-captures#/captures/testing~1db-cdc,
            capture: testing/db-cdc,
            endpoint_type: "AirbyteSource",
            endpoint_spec: {"config":{"host":"a.host.name","user":"a-user"},"image":"database"},
            interval_seconds: 300,
            shards: {"hotStandbys":1},
        },
        Capture {
            scope: test://example/int-string-captures#/captures/testing~1s3-source,
            capture: testing/s3-source,
            endpoint_type: "AirbyteSource",
            endpoint_spec: {"config":{"bucket":"a-bucket","prefix":"and-prefix"},"image":"s3"},
            interval_seconds: 600,
            shards: {},
        },
    ],
    collections: [
        Collection {
            scope: test://example/array-key#/collections/testing~1array-key,
            collection: testing/array-key,
            schema: test://example/array-key.schema,
            key: ["/arr/0/aKey"],
            journals: {"fragments":{}},
        },
        Collection {
            scope: test://example/from-array-key#/collections/testing~1from-array-key,
            collection: testing/from-array-key,
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
            key: ["/someKey"],
            journals: {"fragments":{}},
        },
        Collection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            schema: test://example/int-string-len.schema,
            key: ["/int"],
            journals: {"fragments":{"length":11223344,"flushInterval":"15m"}},
        },
        Collection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            schema: test://example/int-string.schema,
            key: ["/int"],
            journals: {"fragments":{}},
        },
        Collection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            schema: test://example/int-string.schema,
            key: ["/int"],
            journals: {"fragments":{}},
        },
        Collection {
            scope: test://example/int-string#/collections/testing~1int-string.v2,
            collection: testing/int-string.v2,
            schema: test://example/int-string.schema,
            key: ["/int"],
            journals: {"fragments":{"compressionCodec":"ZSTANDARD"}},
        },
    ],
    derivations: [
        Derivation {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation,
            derivation: testing/from-array-key,
            register_schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            register_initial: null,
            shards: {},
        },
        Derivation {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation,
            derivation: testing/int-halve,
            register_schema: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            register_initial: 42,
            shards: {"disable":true},
        },
        Derivation {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation,
            derivation: testing/int-reverse,
            register_schema: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            register_initial: null,
            shards: {},
        },
    ],
    errors: [],
    fetches: [
        Fetch {
            depth: 1,
            resource: test://example/catalog.yaml,
        },
        Fetch {
            depth: 2,
            resource: test://example/array-key,
        },
        Fetch {
            depth: 2,
            resource: test://example/catalog.ts,
        },
        Fetch {
            depth: 2,
            resource: test://example/db-views,
        },
        Fetch {
            depth: 2,
            resource: test://example/from-array-key,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-halve,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-reverse,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-string,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-string-captures,
        },
        Fetch {
            depth: 2,
            resource: test://example/int-string-tests,
        },
        Fetch {
            depth: 2,
            resource: test://example/webhook-deliveries,
        },
        Fetch {
            depth: 3,
            resource: test://example/array-key.schema,
        },
        Fetch {
            depth: 3,
            resource: test://example/array-key.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/cdc-config.yaml,
        },
        Fetch {
            depth: 3,
            resource: test://example/db-views.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/from-array-key.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-halve.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-reverse.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-string-captures.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-string-len.schema,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-string-tests.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-string.schema,
        },
        Fetch {
            depth: 3,
            resource: test://example/int-string.ts,
        },
        Fetch {
            depth: 3,
            resource: test://example/webhook-config.yaml,
        },
        Fetch {
            depth: 3,
            resource: test://example/webhook-deliveries.ts,
        },
    ],
    imports: [
        Import {
            scope: test://example/array-key#/collections/testing~1array-key/schema,
            from_resource: test://example/array-key,
            to_resource: test://example/array-key.schema,
        },
        Import {
            scope: test://example/array-key,
            from_resource: test://example/array-key,
            to_resource: test://example/array-key.ts,
        },
        Import {
            scope: test://example/catalog.yaml#/import/7,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/array-key,
        },
        Import {
            scope: test://example/catalog.yaml,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/catalog.ts,
        },
        Import {
            scope: test://example/catalog.yaml#/import/5,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/db-views,
        },
        Import {
            scope: test://example/catalog.yaml#/import/8,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/from-array-key,
        },
        Import {
            scope: test://example/catalog.yaml#/import/2,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/catalog.yaml#/import/1,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-reverse,
        },
        Import {
            scope: test://example/catalog.yaml#/import/0,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/catalog.yaml#/import/3,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-string-captures,
        },
        Import {
            scope: test://example/catalog.yaml#/import/6,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/int-string-tests,
        },
        Import {
            scope: test://example/catalog.yaml#/import/4,
            from_resource: test://example/catalog.yaml,
            to_resource: test://example/webhook-deliveries,
        },
        Import {
            scope: test://example/db-views,
            from_resource: test://example/db-views,
            to_resource: test://example/db-views.ts,
        },
        Import {
            scope: test://example/db-views#/import/0,
            from_resource: test://example/db-views,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/from-array-key#/import/0,
            from_resource: test://example/from-array-key,
            to_resource: test://example/array-key,
        },
        Import {
            scope: test://example/from-array-key,
            from_resource: test://example/from-array-key,
            to_resource: test://example/from-array-key.ts,
        },
        Import {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation/register/schema,
            from_resource: test://example/from-array-key,
            to_resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
        },
        Import {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
            from_resource: test://example/from-array-key,
            to_resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
        },
        Import {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/schema,
            from_resource: test://example/from-array-key,
            to_resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
        },
        Import {
            scope: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema#/$ref,
            from_resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
            to_resource: test://example/array-key.schema,
        },
        Import {
            scope: test://example/int-halve,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-halve.ts,
        },
        Import {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/register/schema,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
        },
        Import {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/transform/halveIntString/source/schema,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-string-len.schema,
        },
        Import {
            scope: test://example/int-halve#/collections/testing~1int-halve/schema,
            from_resource: test://example/int-halve,
            to_resource: test://example/int-string-len.schema,
        },
        Import {
            scope: test://example/int-reverse,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-reverse.ts,
        },
        Import {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation/register/schema,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
        },
        Import {
            scope: test://example/int-reverse#/import/0,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/schema,
            from_resource: test://example/int-reverse,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string#/import/0,
            from_resource: test://example/int-string,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/int-string#/collections/testing~1int-string.v2/schema,
            from_resource: test://example/int-string,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string#/collections/testing~1int-string/schema,
            from_resource: test://example/int-string,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string,
            from_resource: test://example/int-string,
            to_resource: test://example/int-string.ts,
        },
        Import {
            scope: test://example/int-string-captures#/captures/testing~1db-cdc,
            from_resource: test://example/int-string-captures,
            to_resource: test://example/cdc-config.yaml,
        },
        Import {
            scope: test://example/int-string-captures#/import/0,
            from_resource: test://example/int-string-captures,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-string-captures,
            from_resource: test://example/int-string-captures,
            to_resource: test://example/int-string-captures.ts,
        },
        Import {
            scope: test://example/int-string-len.schema#/properties/arr/additionalItems/$ref,
            from_resource: test://example/int-string-len.schema,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string-len.schema#/$ref,
            from_resource: test://example/int-string-len.schema,
            to_resource: test://example/int-string.schema,
        },
        Import {
            scope: test://example/int-string-tests#/import/0,
            from_resource: test://example/int-string-tests,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/int-string-tests,
            from_resource: test://example/int-string-tests,
            to_resource: test://example/int-string-tests.ts,
        },
        Import {
            scope: test://example/int-string-tests#/tests/testing~1test/0,
            from_resource: test://example/int-string-tests,
            to_resource: test://example/int-string-tests?ptr=/tests/testing~1test/0,
        },
        Import {
            scope: test://example/int-string-tests#/tests/testing~1test/1,
            from_resource: test://example/int-string-tests,
            to_resource: test://example/int-string-tests?ptr=/tests/testing~1test/1,
        },
        Import {
            scope: test://example/webhook-deliveries#/import/1,
            from_resource: test://example/webhook-deliveries,
            to_resource: test://example/int-halve,
        },
        Import {
            scope: test://example/webhook-deliveries#/import/0,
            from_resource: test://example/webhook-deliveries,
            to_resource: test://example/int-string,
        },
        Import {
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries,
            from_resource: test://example/webhook-deliveries,
            to_resource: test://example/webhook-config.yaml,
        },
        Import {
            scope: test://example/webhook-deliveries,
            from_resource: test://example/webhook-deliveries,
            to_resource: test://example/webhook-deliveries.ts,
        },
    ],
    inferences: [
        Inference {
            schema: test://example/array-key.schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr,
            spec: Inference {
                types: [
                    "array",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr/-,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr/-/aKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr/0/aKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr/1/aKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/array-key.schema,
            location: /arr/3/aKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            location: ,
            spec: Inference {
                types: [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string",
                ],
                must_exist: true,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
            location: /arr,
            spec: Inference {
                types: [
                    "array",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
            location: /arr/-,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
            location: /arr/-/aKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
            location: /arr/2/aKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
            location: /someKey,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            location: ,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            location: ,
            spec: Inference {
                types: [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string",
                ],
                must_exist: true,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /arr,
            spec: Inference {
                types: [
                    "array",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /arr/-,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /arr/-/one,
            spec: Inference {
                types: [
                    "string",
                ],
                must_exist: false,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /arr/-/two,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /bit,
            spec: Inference {
                types: [
                    "boolean",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /extra,
            spec: Inference {
                types: [
                    "boolean",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /int,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /len,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema,
            location: /str,
            spec: Inference {
                types: [
                    "string",
                ],
                must_exist: true,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string-len.schema#Other,
            location: ,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: /bit,
            spec: Inference {
                types: [
                    "boolean",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: /int,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema,
            location: /str,
            spec: Inference {
                types: [
                    "string",
                ],
                must_exist: true,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema#AnAnchor,
            location: ,
            spec: Inference {
                types: [
                    "object",
                ],
                must_exist: true,
                string: None,
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema#AnAnchor,
            location: /one,
            spec: Inference {
                types: [
                    "string",
                ],
                must_exist: true,
                string: Some(
                    String {
                        content_type: "",
                        format: "",
                        is_base64: false,
                        max_length: 0,
                    },
                ),
                title: "",
                description: "",
            },
        },
        Inference {
            schema: test://example/int-string.schema#AnAnchor,
            location: /two,
            spec: Inference {
                types: [
                    "integer",
                ],
                must_exist: false,
                string: None,
                title: "",
                description: "",
            },
        },
    ],
    materialization_bindings: [
        MaterializationBinding {
            scope: test://example/db-views#/materializations/testing~1db-views/bindings/0,
            materialization: testing/db-views,
            materialization_index: 0,
            resource_spec: {"table":"the_table"},
            collection: testing/int-string,
            fields_exclude: [],
            fields_include: {},
            fields_recommended: 1,
            source_partitions: NULL,
        },
        MaterializationBinding {
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries/bindings/0,
            materialization: testing/webhook/deliveries,
            materialization_index: 0,
            resource_spec: {"fixture":"one"},
            collection: testing/int-string,
            fields_exclude: ["bit"],
            fields_include: {"str":{"pass":"through"}},
            fields_recommended: 1,
            source_partitions: {"include":{"bit":[true]},"exclude":{}},
        },
        MaterializationBinding {
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries/bindings/1,
            materialization: testing/webhook/deliveries,
            materialization_index: 1,
            resource_spec: {"fixture":"two"},
            collection: testing/int-halve,
            fields_exclude: [],
            fields_include: {"Len":{}},
            fields_recommended: 0,
            source_partitions: NULL,
        },
    ],
    materializations: [
        Materialization {
            scope: test://example/db-views#/materializations/testing~1db-views,
            materialization: testing/db-views,
            endpoint_type: "FlowSink",
            endpoint_spec: {"config":{"foo":"bar"},"image":"database/image"},
            shards: {"maxTxnDuration":"2m 3s","logLevel":"warn"},
        },
        Materialization {
            scope: test://example/webhook-deliveries#/materializations/testing~1webhook~1deliveries,
            materialization: testing/webhook/deliveries,
            endpoint_type: "FlowSink",
            endpoint_spec: {"config":{"address":"http://example/webhook"},"image":"webhook/connector"},
            shards: {},
        },
    ],
    meta: [],
    named_schemas: [
        NamedSchema {
            scope: test://example/int-string.schema#/$defs/anAnchor,
            anchor: test://example/int-string.schema#AnAnchor,
            anchor_name: AnAnchor,
        },
        NamedSchema {
            scope: test://example/int-string-len.schema#/$defs/otherAnchor,
            anchor: test://example/int-string-len.schema#Other,
            anchor_name: Other,
        },
    ],
    npm_dependencies: [],
    projections: [
        Projection {
            scope: test://example/array-key#/collections/testing~1array-key/projections/aKeyOne,
            collection: testing/array-key,
            field: aKeyOne,
            location: /arr/1/aKey,
            partition: 0,
            user_provided: 1,
        },
        Projection {
            scope: test://example/array-key#/collections/testing~1array-key,
            collection: testing/array-key,
            field: arr,
            location: /arr,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/array-key#/collections/testing~1array-key,
            collection: testing/array-key,
            field: arr/0/aKey,
            location: /arr/0/aKey,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/array-key#/collections/testing~1array-key,
            collection: testing/array-key,
            field: arr/1/aKey,
            location: /arr/1/aKey,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/array-key#/collections/testing~1array-key,
            collection: testing/array-key,
            field: arr/3/aKey,
            location: /arr/3/aKey,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/array-key#/collections/testing~1array-key,
            collection: testing/array-key,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/from-array-key#/collections/testing~1from-array-key,
            collection: testing/from-array-key,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/from-array-key#/collections/testing~1from-array-key,
            collection: testing/from-array-key,
            field: someKey,
            location: /someKey,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve/projections/Extra,
            collection: testing/int-halve,
            field: Extra,
            location: /extra,
            partition: 0,
            user_provided: 1,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve/projections/Len,
            collection: testing/int-halve,
            field: Len,
            location: /len,
            partition: 1,
            user_provided: 1,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve/projections/Root,
            collection: testing/int-halve,
            field: Root,
            location: ,
            partition: 0,
            user_provided: 1,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: arr,
            location: /arr,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: bit,
            location: /bit,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: extra,
            location: /extra,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: int,
            location: /int,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: len,
            location: /len,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-halve#/collections/testing~1int-halve,
            collection: testing/int-halve,
            field: str,
            location: /str,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: bit,
            location: /bit,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: int,
            location: /int,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-reverse#/collections/testing~1int-reverse,
            collection: testing/int-reverse,
            field: str,
            location: /str,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string/projections/Int,
            collection: testing/int-string,
            field: Int,
            location: /int,
            partition: 0,
            user_provided: 1,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string/projections/bit,
            collection: testing/int-string,
            field: bit,
            location: /bit,
            partition: 1,
            user_provided: 1,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            field: int,
            location: /int,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string,
            collection: testing/int-string,
            field: str,
            location: /str,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string.v2,
            collection: testing/int-string.v2,
            field: bit,
            location: /bit,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string.v2,
            collection: testing/int-string.v2,
            field: flow_document,
            location: ,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string.v2,
            collection: testing/int-string.v2,
            field: int,
            location: /int,
            partition: 0,
            user_provided: 0,
        },
        Projection {
            scope: test://example/int-string#/collections/testing~1int-string.v2,
            collection: testing/int-string.v2,
            field: str,
            location: /str,
            partition: 0,
            user_provided: 0,
        },
    ],
    resources: [
        Resource {
            resource: test://example/array-key,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/array-key.schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/catalog.yaml,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/cdc-config.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/db-views,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/from-array-key,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-halve,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-halve.ts,
            content_type: "TYPESCRIPT_MODULE",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-reverse,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-reverse.ts,
            content_type: "TYPESCRIPT_MODULE",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string-captures,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string-len.schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string-tests,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string-tests?ptr=/tests/testing~1test/0,
            content_type: "DOCUMENTS_FIXTURE",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string-tests?ptr=/tests/testing~1test/1,
            content_type: "DOCUMENTS_FIXTURE",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/int-string.schema,
            content_type: "JSON_SCHEMA",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/webhook-config.yaml,
            content_type: "CONFIG",
            content: ".. binary ..",
        },
        Resource {
            resource: test://example/webhook-deliveries,
            content_type: "CATALOG",
            content: ".. binary ..",
        },
    ],
    schema_docs: [
        SchemaDoc {
            schema: test://example/array-key.schema,
            dom: {"properties":{"arr":{"items":{"properties":{"aKey":{"type":"integer"}},"required":["aKey"],"type":"object"},"minItems":5,"type":"array"}},"required":["arr"],"type":"object"},
        },
        SchemaDoc {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/register/schema,
            dom: true,
        },
        SchemaDoc {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
            dom: {"$ref":"test://example/array-key.schema"},
        },
        SchemaDoc {
            schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/schema,
            dom: {"properties":{"someKey":{"type":"integer"}},"required":["someKey"],"type":"object"},
        },
        SchemaDoc {
            schema: test://example/int-halve?ptr=/collections/testing~1int-halve/derivation/register/schema,
            dom: {"type":"integer"},
        },
        SchemaDoc {
            schema: test://example/int-reverse?ptr=/collections/testing~1int-reverse/derivation/register/schema,
            dom: true,
        },
        SchemaDoc {
            schema: test://example/int-string-len.schema,
            dom: {"$defs":{"otherAnchor":{"$anchor":"Other","type":"integer"}},"$ref":"test://example/int-string.schema","additionalProperties":{"type":"boolean"},"properties":{"arr":{"additionalItems":{"$ref":"int-string.schema#AnAnchor"},"type":"array"},"bit":{},"int":{},"len":{"type":"integer"},"str":{}},"required":["len"]},
        },
        SchemaDoc {
            schema: test://example/int-string.schema,
            dom: {"$defs":{"anAnchor":{"$anchor":"AnAnchor","properties":{"one":{"type":"string"},"two":{"type":"integer"}},"required":["one"],"type":"object"}},"properties":{"bit":{"type":"boolean"},"int":{"type":"integer"},"str":{"type":"string"}},"required":["int","str","bit"],"type":"object"},
        },
    ],
    storage_mappings: [
        StorageMapping {
            scope: test://example/catalog.yaml#/storageMappings/not-matched~1,
            prefix: not-matched/,
            stores: [{"provider":"AZURE","bucket":"not-matched-bucket","prefix":null}],
        },
        StorageMapping {
            scope: test://example/catalog.yaml#/storageMappings/recovery~1testing~1,
            prefix: recovery/testing/,
            stores: [{"provider":"GCS","bucket":"recovery-bucket","prefix":"some/"}],
        },
        StorageMapping {
            scope: test://example/catalog.yaml#/storageMappings/testing~1,
            prefix: testing/,
            stores: [{"provider":"S3","bucket":"data-bucket","prefix":null}],
        },
    ],
    test_steps: [
        TestStep {
            scope: test://example/int-string-tests#/tests/testing~1test/0,
            test: testing/test,
            description: ,
            collection: testing/int-string,
            documents: test://example/int-string-tests?ptr=/tests/testing~1test/0,
            partitions: NULL,
            step_index: 0,
            step_type: "Ingest",
        },
        TestStep {
            scope: test://example/int-string-tests#/tests/testing~1test/1,
            test: testing/test,
            description: expect stuff happens,
            collection: testing/int-string,
            documents: test://example/int-string-tests?ptr=/tests/testing~1test/1,
            partitions: {"include":{"bit":[true]},"exclude":{}},
            step_index: 1,
            step_type: "Verify",
        },
    ],
    transforms: [
        Transform {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation/transform/withSourceSchema,
            derivation: testing/from-array-key,
            priority: 0,
            publish_lambda: {"remote":"https://an/api"},
            read_delay_seconds: NULL,
            shuffle_key: ["/arr/2/aKey"],
            shuffle_lambda: NULL,
            source_collection: testing/array-key,
            source_partitions: NULL,
            source_schema: test://example/from-array-key?ptr=/collections/testing~1from-array-key/derivation/transform/withSourceSchema/source/schema,
            transform: withSourceSchema,
            update_lambda: NULL,
        },
        Transform {
            scope: test://example/from-array-key#/collections/testing~1from-array-key/derivation/transform/withoutSourceSchema,
            derivation: testing/from-array-key,
            priority: 0,
            publish_lambda: {"remote":"https://an/api"},
            read_delay_seconds: NULL,
            shuffle_key: ["/arr/3/aKey"],
            shuffle_lambda: NULL,
            source_collection: testing/array-key,
            source_partitions: NULL,
            source_schema: NULL,
            transform: withoutSourceSchema,
            update_lambda: NULL,
        },
        Transform {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/transform/halveIntString,
            derivation: testing/int-halve,
            priority: 0,
            publish_lambda: NULL,
            read_delay_seconds: NULL,
            shuffle_key: ["/len","/int"],
            shuffle_lambda: NULL,
            source_collection: testing/int-string,
            source_partitions: {"include":{"bit":[true]},"exclude":{"bit":[false]}},
            source_schema: test://example/int-string-len.schema,
            transform: halveIntString,
            update_lambda: {"remote":"https://an/api"},
        },
        Transform {
            scope: test://example/int-halve#/collections/testing~1int-halve/derivation/transform/halveSelf,
            derivation: testing/int-halve,
            priority: 0,
            publish_lambda: "typescript",
            read_delay_seconds: NULL,
            shuffle_key: ["/len","/int"],
            shuffle_lambda: NULL,
            source_collection: testing/int-halve,
            source_partitions: NULL,
            source_schema: NULL,
            transform: halveSelf,
            update_lambda: NULL,
        },
        Transform {
            scope: test://example/int-reverse#/collections/testing~1int-reverse/derivation/transform/reverseIntString,
            derivation: testing/int-reverse,
            priority: 0,
            publish_lambda: "typescript",
            read_delay_seconds: NULL,
            shuffle_key: NULL,
            shuffle_lambda: NULL,
            source_collection: testing/int-string,
            source_partitions: NULL,
            source_schema: NULL,
            transform: reverseIntString,
            update_lambda: NULL,
        },
    ],
}
