test://example/catalog.yaml:
  import:
    - test://example/int-string
    - test://example/int-reverse
    - test://example/int-halve
    - test://example/int-string-captures
    - test://example/webhook-deliveries
    - test://example/db-views
    - test://example/int-string-tests
    - test://example/array-key
    - test://example/from-array-key

  storageMappings:
    testing/:
      stores: [{ provider: S3, bucket: data-bucket }]
    recovery/testing/:
      stores: [{ provider: GCS, bucket: recovery-bucket, prefix: some/ }]
    not-matched/:
      stores: [{ provider: AZURE, bucket: not-matched-bucket }]

test://example/int-string:
  import:
    # Backward import.
    - test://example/int-halve
  collections:
    testing/int-string:
      schema: test://example/int-string.schema
      key: [/int]
      projections:
        Int: /int
        bit:
          location: /bit
          partition: true

    testing/int-string.v2:
      schema:
        # A schema resource (either inline or by URL reference) may define an
        # alternate canonical ID.
        # It's *not* okay for a schema to in-turn $ref a schema by a non-canonical
        # URI, even if it's possible to fetch that URI, because we cannot
        # later correctly turn this into a schema bundle.
        $id: test://inlined/canonical/id
        $ref: test://example/int-string.schema
      key: [/int]
      journals:
        fragments:
          compressionCodec: ZSTANDARD

    testing/int-string-rw:
      writeSchema: test://example/int-string.schema
      readSchema: test://example/int-string-len.schema
      key: [/int]
      projections:
        Int: /int
        Len: /len
        Str: /str
        bit:
          location: /bit
          partition: true

test://example/int-string-captures:
  import:
    - test://example/int-string
  captures:
    testing/s3-source:
      endpoint:
        connector:
          image: s3
          config:
            bucket: a-bucket
            prefix: and-prefix
      interval: 10m
      bindings:
        - target: testing/int-string
          resource: { stream: a-stream }
        - target: testing/int-string.v2
          resource: { stream: v2-stream }

    testing/db-cdc:
      endpoint:
        connector:
          image: database
          config: cdc-config.yaml
      bindings:
        - target: testing/int-string
          resource:
            stream: other-stream
            namespace: and namespace
      shards:
        hotStandbys: 1

test://example/cdc-config.yaml:
  host: a.host.name
  user: a-user

test://example/webhook-deliveries:
  import:
    - test://example/int-string
    - test://example/int-halve
  materializations:
    testing/webhook/deliveries:
      endpoint:
        connector:
          image: webhook/connector
          config: webhook-config.yaml
      bindings:
        - source: testing/int-string
          partitions:
            include:
              bit: [true]
          resource: { fixture: one }
          fields:
            include:
              str: { pass: through }
            exclude:
              - bit
            recommended: true
        - source: testing/int-halve
          resource: { fixture: two }
          fields:
            include:
              Len: {}
            recommended: false

test://example/webhook-config.yaml:
  address: http://example/webhook

test://example/db-views:
  import:
    - test://example/int-string
  materializations:
    testing/db-views:
      endpoint:
        connector:
          image: database/image
          config:
            foo: bar
      bindings:
        - source: testing/int-string
          resource: { table: the_table }
      shards:
        maxTxnDuration: 123s
        logLevel: warn

test://example/int-string-tests:
  import:
    - test://example/int-string
  tests:
    testing/test:
      - ingest:
          collection: testing/int-string
          documents:
            - { int: 42, str: "string A", bit: true }
            - { int: 52, str: "string B", bit: true }
      - verify:
          description: expect stuff happens
          collection: testing/int-string
          documents:
            - { str: "string A" }
            - { str: "string B" }
          partitions:
            include:
              bit: [true]

test://example/int-reverse:
  import:
    # Forward import.
    - test://example/int-string
  collections:
    testing/int-reverse:
      schema: test://example/int-string.schema
      key: [/int]
      derivation:
        typescript:
          module: int-reverse.ts
          npmDependencies:
            package-one: "v1.2.3"
        transform:
          reverseIntString:
            source:
              name: testing/int-string
            publish: { lambda: typescript }

test://example/int-reverse.ts:
  typescript: "module placeholder"

test://example/int-halve:
  collections:
    testing/int-halve:
      schema: test://example/int-string-len.schema
      key: [/int]
      projections:
        Root: ""
        Len:
          location: /len
          partition: true
        TheString:
          location: /partitionString
          partition: true
        # Not directly discovered from schema,
        # and instead inferred via additionalProperties.
        Extra: /extra
      journals:
        fragments:
          length: 11223344
          flushInterval: 15m
      derivation:
        register:
          schema:
            type: integer
          initial: 42
        typescript:
          module: int-halve.ts
        transform:
          halveIntString:
            source:
              name: testing/int-string-rw
              partitions:
                include:
                  bit: [true]
                exclude:
                  bit: [false]
            shuffle:
              # Note that /len is defined in int-string-rw's readSchema,
              # but not its writeSchema.
              key: [/len, /str]
            update:
              lambda:
                remote: https://an/api

          halveSelf:
            source:
              name: testing/int-halve
            shuffle:
              # Shuffle key is fully covered by logical partition fields.
              key: [/len, /partitionString]
            publish: { lambda: typescript }
        shards:
          disable: true

test://example/int-halve.ts:
  typescript: "module placeholder"

test://example/int-string.schema:
  type: object
  properties:
    int: { type: integer }
    str: { type: string }
    bit: { type: boolean }
  required: [int, str, bit]

  $defs:
    anAnchor:
      $anchor: AnAnchor
      type: object
      properties:
        one: { type: string }
        two: { type: integer }
      required: [one]

test://example/int-string-len.schema:
  # Use an alternate canonical URI for this schema.
  $id: test://example/canonical/int-string-len.schema
  $ref: ../int-string.schema
  properties:
    len: { type: integer }
    int: {}
    str: {}
    partitionString: { type: string }
    bit: {}
    arr:
      type: array
      additionalItems:
        $ref: ../int-string.schema#AnAnchor
  additionalProperties:
    type: boolean
  required: [len, partitionString]

  $defs:
    otherAnchor:
      $anchor: Other
      type: integer

driver:
  imageInspections:
    s3:
      output: &imageInspect '[{
          "Id": "foo",
          "Config":{
            "ExposedPorts": {"567/tcp":{}, "123/udp": {}, "789":{} },
            "Labels":{"dev.estuary.port-public.567":"true","dev.estuary.port-proto.789":"h2"}
          }
        }]'
    database:
      output: *imageInspect
    # documenting the absolute minimal valid output from `docker inspect` that we're able to accept
    database/image:
      output: '[{"Config":{}}]'
    webhook/connector:
      output: *imageInspect

  materializations:
    testing/webhook/deliveries:
      endpoint: FLOW_SINK
      spec:
        image: webhook/connector
        config:
          address: http://example/webhook
      deltaUpdates: true
      bindings:
        - constraints:
            flow_document: { type: 1, reason: "location required" }
            # `Int`, as a user-defined projection, would be selected
            # over `int`. However, `int` is required by the driver,
            # and chosen instead.
            Int: { type: 2, reason: "recommended" }
            int: { type: 0, reason: "field required" }
            str: { type: 3, reason: "optional" }
            bit: { type: 4, reason: "field forbidden" }
          resourcePath: [Web!hook, foo bar]

        - constraints:
            Root: { type: 1, reason: "location required" }
            int: { type: 0, reason: "required" }
            Extra: { type: 1, reason: "location required" }
            Len: { type: 3, reason: "optional" }
          resourcePath: [targe+, two]

    testing/db-views:
      endpoint: FLOW_SINK
      spec:
        image: database/image
        config: { foo: bar }
      deltaUpdates: false
      bindings:
        - constraints:
            flow_document: { type: 1, reason: "location required" }
          resourcePath: [view]

  captures:
    testing/s3-source:
      endpoint: AIRBYTE_SOURCE
      spec:
        image: s3
        config:
          bucket: a-bucket
          prefix: and-prefix
      bindings:
        - resourcePath: [bucke+, pr@fix]
        - resourcePath: [other-bucket]

    testing/db-cdc:
      endpoint: AIRBYTE_SOURCE
      spec:
        image: database
        config:
          host: a.host.name
          user: a-user
      bindings:
        - resourcePath: [schema, table]

test://example/array-key.schema:
  # This schema models array additionalItems which provably exist,
  # due to minItems, but are not ordinarily generated as inferences.
  # It excercises our ability to generate inferences from explicit
  # locations referencing the schema from:
  #  - Collection keys.
  #  - Collection projections.
  #  - Shuffle keys of transforms without source_schema.
  #    But not shuffle keys _with_ alternate source_schema.
  type: object
  properties:
    arr:
      type: array
      items:
        type: object
        properties:
          aKey: { type: integer }
        required: [aKey]
      minItems: 5
  required: [arr]

test://example/array-key:
  collections:
    testing/array-key:
      schema: test://example/array-key.schema
      key: [/arr/0/aKey]
      projections:
        aKeyOne: /arr/1/aKey

test://example/from-array-key:
  import:
    - test://example/array-key
  collections:
    testing/from-array-key:
      schema:
        type: object
        properties:
          someKey: { type: integer }
        required: [someKey]
      key: [/someKey]

      derivation:
        register:
          schema:
            type: object
            properties:
              an-int: { type: integer }
              nested:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
            required: [an-int, nested]
          initial: { an-int: 42, nested: { timestamp: "2019-03-06T09:28:00Z" } }
        transform:
          # The shuffle keys of these transforms become projections
          # of the read collection.
          withBar:
            source: { name: testing/array-key }
            shuffle: { key: [/arr/2/aKey] }
            update:
              lambda:
                sql: select aKeyOne as "an-int", json_object('timestamp', strftime('%Y-%m-%dT%H:%M:%SZ')) as two from source
            publish:
              lambda:
                sql: |
                  select s.aKeyOne, s.arr, s."arr/0/aKey", r."an-int", r."nested/timestamp" from source as s, register as r

          withFoo:
            source: { name: testing/array-key }
            shuffle: { key: [/arr/3/aKey] }
            publish: { lambda: { remote: https://an/api } }
