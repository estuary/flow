---
source: crates/models/src/status/mod.rs
expression: schema
---
{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "definitions": {
    "ActivationStatus": {
      "description": "Status of the task shards running in the data-plane. This records information about the activations of builds in the data-plane, including any subsequent re-activations due to shard failures.",
      "properties": {
        "last_activated": {
          "$ref": "#/definitions/Id",
          "description": "The build id that was last activated in the data plane. If this is less than the `last_build_id` of the controlled spec, then an activation is still pending."
        },
        "last_activated_at": {
          "description": "The time at which the last data plane activation was performed. This could have been in order to activate a recent publication, or in response to a shard failure.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "last_failure": {
          "anyOf": [
            {
              "$ref": "#/definitions/ShardFailure"
            },
            {
              "type": "null"
            }
          ],
          "description": "The most recent shard failure to have been observed. The presence of a failure here does not necessarily mean that the shard is currently in a failed state, as it may have been re-activated since the failure occurred."
        },
        "next_retry": {
          "description": "The next time at which failed task shards will be re-activated. If this is present, then there has been at least one observed shard failure, which the controller has not yet handled.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "recent_failure_count": {
          "description": "Count of shard failures that have been observed over the last 24 hours for the currently activated build. This resets to 0 when a newly published build is activated.",
          "format": "uint32",
          "minimum": 0.0,
          "type": "integer"
        },
        "shard_status": {
          "anyOf": [
            {
              "$ref": "#/definitions/ShardStatusCheck"
            },
            {
              "type": "null"
            }
          ],
          "description": "If this is a task with shards, this will track their last observed status."
        }
      },
      "type": "object"
    },
    "AlertState": {
      "oneOf": [
        {
          "description": "The alert is currently firing.",
          "enum": [
            "firing"
          ],
          "type": "string"
        },
        {
          "description": "The alert has resolved. Resolved alerts may be retained in the status for a short while.",
          "enum": [
            "resolved"
          ],
          "type": "string"
        }
      ]
    },
    "AutoDiscoverFailure": {
      "properties": {
        "count": {
          "description": "The number of consecutive failures that have been observed.",
          "format": "uint32",
          "minimum": 0.0,
          "type": "integer"
        },
        "first_ts": {
          "description": "The timestamp of the first failure in the current sequence.",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "last_outcome": {
          "$ref": "#/definitions/AutoDiscoverOutcome",
          "description": "The discover outcome corresponding to the most recent failure. This will be updated with the results of each retry until an auto-discover succeeds."
        }
      },
      "required": [
        "count",
        "first_ts",
        "last_outcome"
      ],
      "type": "object"
    },
    "AutoDiscoverOutcome": {
      "description": "The results of an auto-discover attempt",
      "properties": {
        "added": {
          "description": "Bindings that were added to the capture.",
          "items": {
            "$ref": "#/definitions/DiscoverChange"
          },
          "type": "array"
        },
        "errors": {
          "description": "Errors that occurred during the discovery or evolution process.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "modified": {
          "description": "Bindings that were modified, either to change the schema or the collection key.",
          "items": {
            "$ref": "#/definitions/DiscoverChange"
          },
          "type": "array"
        },
        "publish_result": {
          "anyOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "type": "null"
            }
          ],
          "description": "The result of publishing the discovered changes, if a publication was attempted."
        },
        "removed": {
          "description": "Bindings that were removed because they no longer appear in the source system.",
          "items": {
            "$ref": "#/definitions/DiscoverChange"
          },
          "type": "array"
        },
        "ts": {
          "description": "Time at which the disocver was attempted",
          "format": "date-time",
          "type": [
            "string"
          ]
        }
      },
      "required": [
        "ts"
      ],
      "type": "object"
    },
    "AutoDiscoverStatus": {
      "properties": {
        "failure": {
          "anyOf": [
            {
              "$ref": "#/definitions/AutoDiscoverFailure"
            },
            {
              "type": "null"
            }
          ],
          "description": "If auto-discovery has failed, this will include information about that failure. This field is cleared as soon as a successful auto-discover is run."
        },
        "interval": {
          "description": "The interval at which auto-discovery is run. This is normally unset, which uses the default interval.",
          "pattern": "^\\d+(s|m|h)$",
          "type": [
            "string",
            "null"
          ]
        },
        "last_success": {
          "anyOf": [
            {
              "$ref": "#/definitions/AutoDiscoverOutcome"
            },
            {
              "type": "null"
            }
          ],
          "description": "The outcome of the last _successful_ auto-discover. If `failure` is set, then that will typically be more recent than `last_success`."
        },
        "next_at": {
          "default": null,
          "description": "Time at which the next auto-discover should be run.",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "pending_publish": {
          "anyOf": [
            {
              "$ref": "#/definitions/AutoDiscoverOutcome"
            },
            {
              "type": "null"
            }
          ],
          "description": "The outcome of the a recent discover, which is about to be published. This will typically only be observed if the publication failed for some reason."
        }
      },
      "type": "object"
    },
    "CatalogType": {
      "enum": [
        "capture",
        "collection",
        "materialization",
        "test"
      ],
      "type": "string"
    },
    "Collection": {
      "description": "Collection names are paths of Unicode letters, numbers, '-', '_', or '.'. Each path component is separated by a slash '/', and a name may not begin or end in a '/'.",
      "examples": [
        "acmeCo/collection"
      ],
      "pattern": "^[\\p{Letter}\\p{Number}\\-_\\.]+(/[\\p{Letter}\\p{Number}\\-_\\.]+)*$",
      "type": "string"
    },
    "ControllerAlert": {
      "additionalProperties": true,
      "properties": {
        "count": {
          "description": "The number of failures.",
          "format": "uint32",
          "minimum": 0.0,
          "type": "integer"
        },
        "error": {
          "description": "The error message associated with the alert.",
          "type": "string"
        },
        "first_ts": {
          "description": "The time when the alert first triggered.",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "last_ts": {
          "description": "The time that the alert condition was last checked or updated.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "resolved_at": {
          "description": "The time at which the alert condition resolved. Unset if the alert is firing.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "spec_type": {
          "$ref": "#/definitions/CatalogType",
          "description": "The live spec type"
        },
        "state": {
          "$ref": "#/definitions/AlertState",
          "description": "The current state of the alert."
        }
      },
      "required": [
        "count",
        "error",
        "first_ts",
        "last_ts",
        "resolved_at",
        "spec_type",
        "state"
      ],
      "type": "object"
    },
    "DiscoverChange": {
      "description": "A capture binding that has changed as a result of a discover",
      "properties": {
        "disable": {
          "description": "Whether the capture binding is disabled.",
          "type": "boolean"
        },
        "resource_path": {
          "description": "Identifies the resource in the source system that this change pertains to.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "target": {
          "$ref": "#/definitions/Collection",
          "description": "The target collection of the capture binding that was changed."
        }
      },
      "required": [
        "disable",
        "resource_path",
        "target"
      ],
      "type": "object"
    },
    "Error": {
      "description": "A generic error that can be associated with a particular draft spec for a given operation.",
      "properties": {
        "catalog_name": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "scope": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "detail"
      ],
      "type": "object"
    },
    "Id": {
      "type": "string"
    },
    "InferredSchemaStatus": {
      "description": "Status of the inferred schema",
      "properties": {
        "schema_last_updated": {
          "description": "The time at which the inferred schema was last published. This will only be present if the inferred schema was published at least once.",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "schema_md5": {
          "description": "The md5 sum of the inferred schema that was last published. Because the publications handler updates the model instead of the controller, it's technically possible for the published inferred schema to be more recent than the one corresponding to this hash. If that happens, we would expect a subsequent publication on the next controller run, which would update the hash but not actually modify the schema.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "JobStatus": {
      "description": "The status of a publication.",
      "properties": {
        "lockFailures": {
          "items": {
            "$ref": "#/definitions/LockFailure"
          },
          "type": "array"
        },
        "type": {
          "$ref": "#/definitions/StatusType"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "LockFailure": {
      "description": "Represents an optimistic lock failure when trying to update a specification. This typically means that an expectPubId was not matched, implying that another publication has applied a conflicting update to this specification since it was last fetched.",
      "properties": {
        "actual": {
          "anyOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "type": "null"
            }
          ],
          "description": "The actual id that was found."
        },
        "catalog_name": {
          "description": "The name of the spec that failed the optimistic concurrency check.",
          "type": "string"
        },
        "expected": {
          "$ref": "#/definitions/Id",
          "description": "The expected id (either `last_pub_id` or `last_build_id`) that was not matched."
        }
      },
      "required": [
        "catalog_name",
        "expected"
      ],
      "type": "object"
    },
    "PendingConfigUpdateStatus": {
      "description": "Information on the config updates performed by the controller. This does not include any information on user-initiated config updates.",
      "properties": {
        "build": {
          "$ref": "#/definitions/Id",
          "description": "The id of the build when the associated config update event was generated."
        },
        "next_attempt": {
          "format": "date-time",
          "type": [
            "string"
          ]
        }
      },
      "required": [
        "build",
        "next_attempt"
      ],
      "type": "object"
    },
    "PublicationInfo": {
      "description": "Summary of a publication that was attempted by a controller.",
      "properties": {
        "completed": {
          "description": "Time at which the publication was completed",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "count": {
          "description": "A publication info may represent multiple publications of the same spec. If the publications have similar outcomes, then multiple publications can be condensed into a single entry in the history. If this is done, then the `count` field will be greater than 1. This field is omitted if the count is 1.",
          "minimum": 1.0,
          "type": "integer"
        },
        "created": {
          "description": "Time at which the publication was initiated",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "detail": {
          "description": "A brief description of the reason for the publication",
          "type": [
            "string",
            "null"
          ]
        },
        "errors": {
          "description": "Errors will be non-empty for publications that were not successful",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "id": {
          "$ref": "#/definitions/Id",
          "description": "The id of the publication, which will match the `last_pub_id` of the spec after a successful publication, at least until the next publication."
        },
        "is_touch": {
          "description": "A touch publication is a publication that does not modify the spec, but only updates the `built_spec` and `last_build_id` fields. They are most commonly performed in response to changes in the spec's dependencies. Touch publications will never be combined with non-touch publications in the history.",
          "type": "boolean"
        },
        "result": {
          "anyOf": [
            {
              "$ref": "#/definitions/JobStatus"
            },
            {
              "type": "null"
            }
          ],
          "description": "The final result of the publication"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "PublicationStatus": {
      "description": "Information on the publications performed by the controller. This does not include any information on user-initiated publications.",
      "properties": {
        "history": {
          "description": "A limited history of publications performed by this controller",
          "items": {
            "$ref": "#/definitions/PublicationInfo"
          },
          "type": "array"
        },
        "max_observed_pub_id": {
          "$ref": "#/definitions/Id",
          "description": "The publication id at which the controller has last notified dependent specs. A publication of the controlled spec will cause the controller to notify the controllers of all dependent specs. When it does so, it sets `max_observed_pub_id` to the current `last_pub_id`, so that it can avoid notifying dependent controllers unnecessarily."
        }
      },
      "required": [
        "history"
      ],
      "type": "object"
    },
    "ShardFailure": {
      "description": "The shape of a connector status, which matches that of an ops::Log.",
      "properties": {
        "fields": {
          "additionalProperties": true,
          "description": "Arbitrary JSON that can be used to communicate additional details. The specific fields and their meanings are up to the connector, except for the flow `/events` fields: `eventType`, `eventTarget`, and `error`, which are restricted to string values.",
          "type": "object"
        },
        "message": {
          "description": "The message is meant to be presented to users, and may use Markdown formatting.",
          "type": "string"
        },
        "shard": {
          "$ref": "#/definitions/ShardRef",
          "description": "The specific shard that failed"
        },
        "ts": {
          "description": "The time at which the failure occurred",
          "format": "date-time",
          "type": [
            "string"
          ]
        }
      },
      "required": [
        "message",
        "shard",
        "ts"
      ],
      "type": "object"
    },
    "ShardRef": {
      "description": "Identifies the specific task shard that is the source of an event. This matches the shape of the `shard` field in an `ops.Log` message.",
      "properties": {
        "build": {
          "$ref": "#/definitions/Id",
          "description": "The id of the build that the shard was running when the event was generated. This can be compared against the `last_build_id` of the live spec to determine whether the event happened with the most rececnt version of the published spec (it did if the `last_build_id` is the same)."
        },
        "keyBegin": {
          "description": "The key range of the task as a hex string. Together with rClockBegin, this uniquely identifies a specific task shard.",
          "type": "string"
        },
        "name": {
          "description": "The name of the task",
          "type": "string"
        },
        "rClockBegin": {
          "description": "The rClock range of the task as a hex string. Together with keyBegin, this uniquely identifies a specific task shard.",
          "type": "string"
        }
      },
      "required": [
        "build",
        "keyBegin",
        "name",
        "rClockBegin"
      ],
      "type": "object"
    },
    "ShardStatusCheck": {
      "properties": {
        "count": {
          "description": "The number of checks that have returned ths status",
          "format": "uint32",
          "minimum": 0.0,
          "type": "integer"
        },
        "first_ts": {
          "description": "The time of the first status check that returned this status",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "last_ts": {
          "description": "The time of the most recent status check",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "status": {
          "$ref": "#/definitions/ShardsStatus",
          "description": "The observed status"
        }
      },
      "required": [
        "first_ts",
        "last_ts",
        "status"
      ],
      "type": "object"
    },
    "ShardsStatus": {
      "description": "Represents a high level status aggregate of all the shards for a given task.",
      "oneOf": [
        {
          "description": "All task shards have a `Primary` member.",
          "enum": [
            "Ok"
          ],
          "type": "string"
        },
        {
          "description": "Any task shards are in `Pending` or `Backfill`, and none are `Failed`. Or no task shards yet exist.",
          "enum": [
            "Pending"
          ],
          "type": "string"
        },
        {
          "description": "Any task shard is `Failed`",
          "enum": [
            "Failed"
          ],
          "type": "string"
        }
      ]
    },
    "SourceCaptureStatus": {
      "description": "Status information about the `sourceCapture`",
      "properties": {
        "add_bindings": {
          "description": "If `up_to_date` is `false`, then this will contain the set of `sourceCapture` collections that need to be added. This is provided simply to aid in debugging in case the publication to add the bindings fails.",
          "items": {
            "$ref": "#/definitions/Collection"
          },
          "type": "array",
          "uniqueItems": true
        },
        "up_to_date": {
          "default": false,
          "description": "Whether the materialization bindings are up-to-date with respect to the `sourceCapture` bindings. In normal operation, this should always be `true`. Otherwise, there will be a controller `error` and the publication status will contain details of why the update failed.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "StatusType": {
      "description": "The highest-level status of a publication.",
      "oneOf": [
        {
          "description": "The publication has not yet been completed.",
          "enum": [
            "queued"
          ],
          "type": "string"
        },
        {
          "description": "There was a failure to build or validate the drafted specs. This could be due to a mistake in the drafted specs, or due to a failure to validate the proposed changes with an external system connected to one of the connected captures or materializations.",
          "enum": [
            "buildFailed"
          ],
          "type": "string"
        },
        {
          "description": "Publication failed due to the failure of one or more tests.",
          "enum": [
            "testFailed"
          ],
          "type": "string"
        },
        {
          "description": "Something went wrong with the publication process. These errors can typically be retried by the client.",
          "enum": [
            "publishFailed"
          ],
          "type": "string"
        },
        {
          "description": "The publication was successful. All drafted specs are now committed as the live specs. Note that activation of the published specs in the data plane happens asynchronously, after the publication is committed. Therefore, it may take some time for the published changes to be reflected in running tasks.",
          "enum": [
            "success"
          ],
          "type": "string"
        },
        {
          "description": "Returned when there are no draft specs (after pruning unbound collections). There will not be any `draft_errors` in this case, because there's no `catalog_name` to associate with an error. And it may not be desirable to treat this as an error, depending on the scenario.",
          "enum": [
            "emptyDraft"
          ],
          "type": "string"
        },
        {
          "description": "One or more expected `last_pub_id`s did not match the actual `last_pub_id`, indicating that specs have been changed since the draft was created.",
          "enum": [
            "expectPubIdMismatch"
          ],
          "type": "string"
        },
        {
          "description": "Optimistic locking failure for one or more specs in the publication. This case should typically be retried by the publisher.",
          "enum": [
            "buildIdLockFailure"
          ],
          "type": "string"
        },
        {
          "description": "The publication used the deprecated background flag, which is no longer supported.",
          "enum": [
            "deprecatedBackground"
          ],
          "type": "string"
        }
      ]
    }
  },
  "description": "Represents the internal state of a controller.",
  "oneOf": [
    {
      "description": "Status of a capture controller",
      "properties": {
        "activation": {
          "$ref": "#/definitions/ActivationStatus",
          "default": {}
        },
        "alerts": {
          "additionalProperties": {
            "$ref": "#/definitions/ControllerAlert"
          },
          "type": "object"
        },
        "auto_discover": {
          "anyOf": [
            {
              "$ref": "#/definitions/AutoDiscoverStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "config_updates": {
          "anyOf": [
            {
              "$ref": "#/definitions/PendingConfigUpdateStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "publications": {
          "$ref": "#/definitions/PublicationStatus",
          "default": {
            "history": []
          }
        },
        "type": {
          "enum": [
            "Capture"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    {
      "description": "The status of a collection controller",
      "properties": {
        "activation": {
          "$ref": "#/definitions/ActivationStatus",
          "default": {}
        },
        "alerts": {
          "additionalProperties": {
            "$ref": "#/definitions/ControllerAlert"
          },
          "type": "object"
        },
        "inferred_schema": {
          "anyOf": [
            {
              "$ref": "#/definitions/InferredSchemaStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "publications": {
          "$ref": "#/definitions/PublicationStatus",
          "default": {
            "history": []
          }
        },
        "type": {
          "enum": [
            "Collection"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    {
      "description": "Status of a materialization controller",
      "properties": {
        "activation": {
          "$ref": "#/definitions/ActivationStatus",
          "default": {}
        },
        "alerts": {
          "additionalProperties": {
            "$ref": "#/definitions/ControllerAlert"
          },
          "type": "object"
        },
        "config_updates": {
          "anyOf": [
            {
              "$ref": "#/definitions/PendingConfigUpdateStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "publications": {
          "$ref": "#/definitions/PublicationStatus",
          "default": {
            "history": []
          }
        },
        "source_capture": {
          "anyOf": [
            {
              "$ref": "#/definitions/SourceCaptureStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "enum": [
            "Materialization"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    {
      "properties": {
        "alerts": {
          "additionalProperties": {
            "$ref": "#/definitions/ControllerAlert"
          },
          "type": "object"
        },
        "passing": {
          "type": "boolean"
        },
        "publications": {
          "$ref": "#/definitions/PublicationStatus",
          "default": {
            "history": []
          }
        },
        "type": {
          "enum": [
            "Test"
          ],
          "type": "string"
        }
      },
      "required": [
        "passing",
        "type"
      ],
      "type": "object"
    },
    {
      "properties": {
        "type": {
          "enum": [
            "Uninitialized"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    }
  ],
  "title": "ControllerStatus"
}
