---
source: crates/models/src/status/mod.rs
expression: schema
---
{
  "$defs": {
    "ActivationStatus": {
      "description": "Status of the task shards running in the data-plane. This records information about\nthe activations of builds in the data-plane, including any subsequent re-activations\ndue to shard failures.",
      "properties": {
        "last_activated": {
          "$ref": "#/$defs/Id",
          "description": "The build id that was last activated in the data plane.\nIf this is less than the `last_build_id` of the controlled spec,\nthen an activation is still pending."
        },
        "last_activated_at": {
          "description": "The time at which the last data plane activation was performed.\nThis could have been in order to activate a recent publication,\nor in response to a shard failure.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "last_failure": {
          "anyOf": [
            {
              "$ref": "#/$defs/ShardFailure"
            },
            {
              "type": "null"
            }
          ],
          "description": "The most recent shard failure to have been observed. The presence of a failure here\ndoes not necessarily mean that the shard is currently in a failed state, as it may\nhave been re-activated since the failure occurred."
        },
        "next_retry": {
          "description": "The next time at which failed task shards will be re-activated. If this is present, then\nthere has been at least one observed shard failure, which the controller has not yet handled.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "recent_failure_count": {
          "description": "Count of shard failures that have been observed over the last 24 hours for the currently activated\nbuild. This resets to 0 when a newly published build is activated.",
          "format": "uint32",
          "minimum": 0,
          "type": "integer"
        },
        "shard_status": {
          "anyOf": [
            {
              "$ref": "#/$defs/ShardStatusCheck"
            },
            {
              "type": "null"
            }
          ],
          "description": "If this is a task with shards, this will track their last observed status."
        }
      },
      "type": "object"
    },
    "AlertState": {
      "oneOf": [
        {
          "const": "firing",
          "description": "The alert is currently firing.",
          "type": "string"
        },
        {
          "const": "resolved",
          "description": "The alert has resolved. Resolved alerts may be retained in the status for a short while.",
          "type": "string"
        }
      ]
    },
    "AutoDiscoverFailure": {
      "properties": {
        "count": {
          "description": "The number of consecutive failures that have been observed.",
          "format": "uint32",
          "minimum": 0,
          "type": "integer"
        },
        "first_ts": {
          "description": "The timestamp of the first failure in the current sequence.",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "last_outcome": {
          "$ref": "#/$defs/AutoDiscoverOutcome",
          "description": "The discover outcome corresponding to the most recent failure. This will\nbe updated with the results of each retry until an auto-discover\nsucceeds."
        }
      },
      "required": [
        "count",
        "first_ts",
        "last_outcome"
      ],
      "type": "object"
    },
    "AutoDiscoverOutcome": {
      "description": "The results of an auto-discover attempt",
      "properties": {
        "added": {
          "description": "Bindings that were added to the capture.",
          "items": {
            "$ref": "#/$defs/DiscoverChange"
          },
          "type": "array"
        },
        "errors": {
          "description": "Errors that occurred during the discovery or evolution process.",
          "items": {
            "$ref": "#/$defs/Error"
          },
          "type": "array"
        },
        "modified": {
          "description": "Bindings that were modified, either to change the schema or the collection key.",
          "items": {
            "$ref": "#/$defs/DiscoverChange"
          },
          "type": "array"
        },
        "publish_result": {
          "anyOf": [
            {
              "$ref": "#/$defs/JobStatus"
            },
            {
              "type": "null"
            }
          ],
          "description": "The result of publishing the discovered changes, if a publication was attempted."
        },
        "re_created_collections": {
          "description": "Collections that were re-created due to the collection key having changed.",
          "items": {
            "$ref": "#/$defs/EvolvedCollection"
          },
          "type": "array"
        },
        "removed": {
          "description": "Bindings that were removed because they no longer appear in the source system.",
          "items": {
            "$ref": "#/$defs/DiscoverChange"
          },
          "type": "array"
        },
        "ts": {
          "description": "Time at which the disocver was attempted",
          "format": "date-time",
          "type": [
            "string"
          ]
        }
      },
      "required": [
        "ts"
      ],
      "type": "object"
    },
    "AutoDiscoverStatus": {
      "properties": {
        "failure": {
          "anyOf": [
            {
              "$ref": "#/$defs/AutoDiscoverFailure"
            },
            {
              "type": "null"
            }
          ],
          "description": "If auto-discovery has failed, this will include information about that failure.\nThis field is cleared as soon as a successful auto-discover is run."
        },
        "interval": {
          "description": "The interval at which auto-discovery is run. This is normally unset, which uses\nthe default interval.",
          "pattern": "^\\d+(s|m|h)$",
          "type": [
            "string",
            "null"
          ]
        },
        "last_success": {
          "anyOf": [
            {
              "$ref": "#/$defs/AutoDiscoverOutcome"
            },
            {
              "type": "null"
            }
          ],
          "description": "The outcome of the last _successful_ auto-discover. If `failure` is set,\nthen that will typically be more recent than `last_success`."
        },
        "next_at": {
          "default": null,
          "description": "Time at which the next auto-discover should be run.",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "pending_publish": {
          "anyOf": [
            {
              "$ref": "#/$defs/AutoDiscoverOutcome"
            },
            {
              "type": "null"
            }
          ],
          "description": "The outcome of the a recent discover, which is about to be published.\nThis will typically only be observed if the publication failed for some\nreason."
        }
      },
      "type": "object"
    },
    "CaptureStatus": {
      "description": "Status of a capture controller",
      "properties": {
        "activation": {
          "$ref": "#/$defs/ActivationStatus",
          "default": {}
        },
        "alerts": {
          "additionalProperties": {
            "$ref": "#/$defs/ControllerAlert"
          },
          "type": "object"
        },
        "auto_discover": {
          "anyOf": [
            {
              "$ref": "#/$defs/AutoDiscoverStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "config_updates": {
          "anyOf": [
            {
              "$ref": "#/$defs/PendingConfigUpdateStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "publications": {
          "$ref": "#/$defs/PublicationStatus",
          "default": {
            "history": []
          }
        }
      },
      "type": "object"
    },
    "CatalogType": {
      "enum": [
        "capture",
        "collection",
        "materialization",
        "test"
      ],
      "type": "string"
    },
    "Collection": {
      "description": "Collection names are paths of Unicode letters, numbers, '-', '_', or '.'.\nEach path component is separated by a slash '/',\nand a name may not begin or end in a '/'.",
      "examples": [
        "acmeCo/collection"
      ],
      "pattern": "^[\\p{Letter}\\p{Number}\\-_\\.]+(/[\\p{Letter}\\p{Number}\\-_\\.]+)*$",
      "type": "string"
    },
    "CollectionStatus": {
      "description": "The status of a collection controller",
      "properties": {
        "activation": {
          "$ref": "#/$defs/ActivationStatus",
          "default": {}
        },
        "alerts": {
          "additionalProperties": {
            "$ref": "#/$defs/ControllerAlert"
          },
          "type": "object"
        },
        "inferred_schema": {
          "anyOf": [
            {
              "$ref": "#/$defs/InferredSchemaStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "publications": {
          "$ref": "#/$defs/PublicationStatus",
          "default": {
            "history": []
          }
        }
      },
      "type": "object"
    },
    "ControllerAlert": {
      "additionalProperties": true,
      "properties": {
        "count": {
          "description": "The number of failures.",
          "format": "uint32",
          "minimum": 0,
          "type": "integer"
        },
        "error": {
          "description": "The error message associated with the alert.",
          "type": "string"
        },
        "first_ts": {
          "description": "The time when the alert first triggered.",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "last_ts": {
          "description": "The time that the alert condition was last checked or updated.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "resolved_at": {
          "description": "The time at which the alert condition resolved. Unset if the alert is firing.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "spec_type": {
          "$ref": "#/$defs/CatalogType",
          "description": "The live spec type"
        },
        "state": {
          "$ref": "#/$defs/AlertState",
          "description": "The current state of the alert."
        }
      },
      "required": [
        "state",
        "spec_type",
        "first_ts",
        "last_ts",
        "error",
        "count",
        "resolved_at"
      ],
      "type": "object"
    },
    "DiscoverChange": {
      "description": "A capture binding that has changed as a result of a discover",
      "properties": {
        "disable": {
          "description": "Whether the capture binding is disabled.",
          "type": "boolean"
        },
        "resource_path": {
          "description": "Identifies the resource in the source system that this change pertains to.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "target": {
          "$ref": "#/$defs/Collection",
          "description": "The target collection of the capture binding that was changed."
        }
      },
      "required": [
        "resource_path",
        "target",
        "disable"
      ],
      "type": "object"
    },
    "Error": {
      "description": "A generic error that can be associated with a particular draft spec for a given operation.",
      "properties": {
        "catalog_name": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "scope": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "detail"
      ],
      "type": "object"
    },
    "EvolvedCollection": {
      "properties": {
        "new_name": {
          "description": "The new name of the collection, which may be the same as the original name if only materialization bindings were updated",
          "type": "string"
        },
        "old_name": {
          "description": "Original name of the collection",
          "type": "string"
        },
        "updated_captures": {
          "description": "The names of any captures that were updated as a result of evolving this collection",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updated_materializations": {
          "description": "The names of any materializations that were updated as a result of evolving this collection",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "old_name",
        "new_name",
        "updated_materializations",
        "updated_captures"
      ],
      "type": "object"
    },
    "Id": {
      "type": "string"
    },
    "InferredSchemaStatus": {
      "description": "Status of the inferred schema",
      "properties": {
        "schema_last_updated": {
          "description": "The time at which the inferred schema was last published. This will only\nbe present if the inferred schema was published at least once.",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "schema_md5": {
          "description": "The md5 sum of the inferred schema that was last published.\nBecause the publications handler updates the model instead of the controller, it's\ntechnically possible for the published inferred schema to be more recent than the one\ncorresponding to this hash. If that happens, we would expect a subsequent publication\non the next controller run, which would update the hash but not actually modify the schema.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "JobStatus": {
      "description": "JobStatus is the possible outcomes of a handled publication.",
      "oneOf": [
        {
          "description": "The publication has not yet been completed.",
          "properties": {
            "type": {
              "const": "queued",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "description": "There was a failure to build or validate the drafted specs. This could\nbe due to a mistake in the drafted specs, or due to a failure to\nvalidate the proposed changes with an external system connected to one\nof the connected captures or materializations.",
          "properties": {
            "type": {
              "const": "buildFailed",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "description": "Publication failed due to the failure of one or more tests.",
          "properties": {
            "type": {
              "const": "testFailed",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "description": "Something went wrong with the publication process. These errors can\ntypically be retried by the client.",
          "properties": {
            "type": {
              "const": "publishFailed",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "description": "The publication was successful. All drafted specs are now committed as\nthe live specs. Note that activation of the published specs in the data\nplane happens asynchronously, after the publication is committed.\nTherefore, it may take some time for the published changes to be\nreflected in running tasks.",
          "properties": {
            "type": {
              "const": "success",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "description": "Returned when there are no draft specs (after pruning unbound\ncollections). There will not be any `draft_errors` in this case, because\nthere's no `catalog_name` to associate with an error. And it may not be\ndesirable to treat this as an error, depending on the scenario.",
          "properties": {
            "type": {
              "const": "emptyDraft",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "description": "One or more expected `last_pub_id`s did not match the actual `last_pub_id`, indicating that specs\nhave been changed since the draft was created.",
          "properties": {
            "failures": {
              "items": {
                "$ref": "#/$defs/LockFailure"
              },
              "type": "array"
            },
            "type": {
              "const": "expectPubIdMismatch",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "description": "Optimistic locking failure for one or more specs in the publication. This case should\ntypically be retried by the publisher.",
          "properties": {
            "failures": {
              "items": {
                "$ref": "#/$defs/LockFailure"
              },
              "type": "array"
            },
            "type": {
              "const": "buildIdLockFailure",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        },
        {
          "description": "The publication used the deprecated background flag, which is no longer supported.",
          "properties": {
            "type": {
              "const": "deprecatedBackground",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "LockFailure": {
      "description": "Represents an optimistic lock failure when trying to update live specs.",
      "properties": {
        "actual": {
          "anyOf": [
            {
              "$ref": "#/$defs/Id"
            },
            {
              "type": "null"
            }
          ],
          "description": "The actual id that was found."
        },
        "catalog_name": {
          "description": "The name of the spec that failed the optimistic concurrency check.",
          "type": "string"
        },
        "expected": {
          "$ref": "#/$defs/Id",
          "description": "The expected id (either `last_pub_id` or `last_build_id`) that was not\nmatched."
        }
      },
      "required": [
        "catalog_name",
        "expected"
      ],
      "type": "object"
    },
    "MaterializationStatus": {
      "description": "Status of a materialization controller",
      "properties": {
        "activation": {
          "$ref": "#/$defs/ActivationStatus",
          "default": {}
        },
        "alerts": {
          "additionalProperties": {
            "$ref": "#/$defs/ControllerAlert"
          },
          "type": "object"
        },
        "config_updates": {
          "anyOf": [
            {
              "$ref": "#/$defs/PendingConfigUpdateStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "publications": {
          "$ref": "#/$defs/PublicationStatus",
          "default": {
            "history": []
          }
        },
        "source_capture": {
          "anyOf": [
            {
              "$ref": "#/$defs/SourceCaptureStatus"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "type": "object"
    },
    "PendingConfigUpdateStatus": {
      "description": "Information on the config updates performed by the controller.\nThis does not include any information on user-initiated config updates.",
      "properties": {
        "build": {
          "$ref": "#/$defs/Id",
          "description": "The id of the build when the associated config update event was generated."
        },
        "next_attempt": {
          "format": "date-time",
          "type": [
            "string"
          ]
        }
      },
      "required": [
        "next_attempt",
        "build"
      ],
      "type": "object"
    },
    "PublicationInfo": {
      "description": "Summary of a publication that was attempted by a controller.",
      "properties": {
        "completed": {
          "description": "Time at which the publication was completed",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "count": {
          "description": "A publication info may represent multiple publications of the same spec.\nIf the publications have similar outcomes, then multiple publications\ncan be condensed into a single entry in the history. If this is done,\nthen the `count` field will be greater than 1. This field is omitted if\nthe count is 1.",
          "minimum": 1,
          "type": "integer"
        },
        "created": {
          "description": "Time at which the publication was initiated",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "detail": {
          "description": "A brief description of the reason for the publication",
          "type": [
            "string",
            "null"
          ]
        },
        "errors": {
          "description": "Errors will be non-empty for publications that were not successful",
          "items": {
            "$ref": "#/$defs/Error"
          },
          "type": "array"
        },
        "id": {
          "$ref": "#/$defs/Id",
          "description": "The id of the publication, which will match the `last_pub_id` of the\nspec after a successful publication, at least until the next publication."
        },
        "is_touch": {
          "description": "A touch publication is a publication that does not modify the spec, but\nonly updates the `built_spec` and `last_build_id` fields. They are most\ncommonly performed in response to changes in the spec's dependencies.\nTouch publications will never be combined with non-touch publications in\nthe history.",
          "type": "boolean"
        },
        "result": {
          "anyOf": [
            {
              "$ref": "#/$defs/JobStatus"
            },
            {
              "type": "null"
            }
          ],
          "description": "The final result of the publication"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "PublicationStatus": {
      "description": "Information on the publications performed by the controller.\nThis does not include any information on user-initiated publications.",
      "properties": {
        "dependency_hash": {
          "description": "Hash of all of the dependencies of this spec at the time of the last\nobservation. This is compared against the `dependency_hash` of the live\nspec in order to determine whether any of the spec's dependencies have\nchanged since it was last published. If they have, then the controller\nwill initiate a touch publication of the spec.",
          "type": [
            "string",
            "null"
          ]
        },
        "history": {
          "description": "A limited history of publications performed by this controller",
          "items": {
            "$ref": "#/$defs/PublicationInfo"
          },
          "type": "array"
        },
        "max_observed_pub_id": {
          "$ref": "#/$defs/Id",
          "description": "The publication id at which the controller has last notified dependent\nspecs. A publication of the controlled spec will cause the controller to\nnotify the controllers of all dependent specs. When it does so, it sets\n`max_observed_pub_id` to the current `last_pub_id`, so that it can avoid\nnotifying dependent controllers unnecessarily."
        }
      },
      "required": [
        "history"
      ],
      "type": "object"
    },
    "ShardFailure": {
      "description": "The shape of a connector status, which matches that of an ops::Log.",
      "properties": {
        "fields": {
          "additionalProperties": true,
          "description": "Arbitrary JSON that can be used to communicate additional details. The\nspecific fields and their meanings are up to the connector, except for\nthe flow `/events` fields: `eventType`, `eventTarget`, and `error`, which\nare restricted to string values.",
          "type": "object"
        },
        "message": {
          "description": "The message is meant to be presented to users, and may use Markdown formatting.",
          "type": "string"
        },
        "shard": {
          "$ref": "#/$defs/ShardRef",
          "description": "The specific shard that failed"
        },
        "ts": {
          "description": "The time at which the failure occurred",
          "format": "date-time",
          "type": [
            "string"
          ]
        }
      },
      "required": [
        "shard",
        "ts",
        "message"
      ],
      "type": "object"
    },
    "ShardRef": {
      "description": "Identifies the specific task shard that is the source of an event. This\nmatches the shape of the `shard` field in an `ops.Log` message.",
      "properties": {
        "build": {
          "$ref": "#/$defs/Id",
          "description": "The id of the build that the shard was running when the event was\ngenerated. This can be compared against the `last_build_id` of the live\nspec to determine whether the event happened with the most rececnt\nversion of the published spec (it did if the `last_build_id` is the\nsame)."
        },
        "keyBegin": {
          "description": "The key range of the task as a hex string. Together with rClockBegin, this\nuniquely identifies a specific task shard.",
          "type": "string"
        },
        "name": {
          "description": "The name of the task",
          "type": "string"
        },
        "rClockBegin": {
          "description": "The rClock range of the task as a hex string. Together with keyBegin, this\nuniquely identifies a specific task shard.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "keyBegin",
        "rClockBegin",
        "build"
      ],
      "type": "object"
    },
    "ShardStatusCheck": {
      "properties": {
        "count": {
          "description": "The number of checks that have returned ths status",
          "format": "uint32",
          "minimum": 0,
          "type": "integer"
        },
        "first_ts": {
          "description": "The time of the first status check that returned this status",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "last_ts": {
          "description": "The time of the most recent status check",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "status": {
          "$ref": "#/$defs/ShardsStatus",
          "description": "The observed status"
        }
      },
      "required": [
        "last_ts",
        "first_ts",
        "status"
      ],
      "type": "object"
    },
    "ShardsStatus": {
      "description": "Represents a high level status aggregate of all the shards for a given task.",
      "oneOf": [
        {
          "const": "Ok",
          "description": "All task shards have a `Primary` member.",
          "type": "string"
        },
        {
          "const": "Pending",
          "description": "Any task shards are in `Pending` or `Backfill`, and none are `Failed`.\nOr no task shards yet exist.",
          "type": "string"
        },
        {
          "const": "Failed",
          "description": "Any task shard is `Failed`",
          "type": "string"
        }
      ]
    },
    "SourceCaptureStatus": {
      "description": "Status information about the `sourceCapture`",
      "properties": {
        "add_bindings": {
          "description": "If `up_to_date` is `false`, then this will contain the set of\n`sourceCapture` collections that need to be added. This is provided\nsimply to aid in debugging in case the publication to add the bindings\nfails.",
          "items": {
            "$ref": "#/$defs/Collection"
          },
          "type": "array",
          "uniqueItems": true
        },
        "up_to_date": {
          "default": false,
          "description": "Whether the materialization bindings are up-to-date with respect to\nthe `sourceCapture` bindings. In normal operation, this should always\nbe `true`. Otherwise, there will be a controller `error` and the\npublication status will contain details of why the update failed.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TestStatus": {
      "properties": {
        "alerts": {
          "additionalProperties": {
            "$ref": "#/$defs/ControllerAlert"
          },
          "type": "object"
        },
        "passing": {
          "type": "boolean"
        },
        "publications": {
          "$ref": "#/$defs/PublicationStatus",
          "default": {
            "history": []
          }
        }
      },
      "required": [
        "passing"
      ],
      "type": "object"
    }
  },
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "anyOf": [
    {
      "$ref": "#/$defs/CaptureStatus",
      "properties": {
        "type": {
          "const": "Capture",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    {
      "$ref": "#/$defs/CollectionStatus",
      "properties": {
        "type": {
          "const": "Collection",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    {
      "$ref": "#/$defs/MaterializationStatus",
      "properties": {
        "type": {
          "const": "Materialization",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    {
      "$ref": "#/$defs/TestStatus",
      "properties": {
        "type": {
          "const": "Test",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    {
      "type": "null"
    }
  ],
  "description": "Represents the internal state of a controller.",
  "title": "ControllerStatus"
}
