/*
 * Flow Control Plane V0 API
 *
 * some description here
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatusResponse {
    /// The name of the live spec
    #[serde(rename = "catalog_name")]
    pub catalog_name: String,
    /// Error from the most recent controller run, or `null` if the run was successful.
    #[serde(rename = "controller_error", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub controller_error: Option<Option<String>>,
    /// The number of consecutive failures of the controller. Resets to 0 after any successful run.
    #[serde(rename = "controller_failures")]
    pub controller_failures: i32,
    /// Time at which the controller is next scheduled to run. Or null if there is no run scheduled.
    #[serde(rename = "controller_next_run", deserialize_with = "Option::deserialize")]
    pub controller_next_run: Option<String>,
    #[serde(rename = "controller_status")]
    pub controller_status: Box<models::StatusResponseControllerStatus>,
    /// Time of the last controller run for this spec.
    #[serde(rename = "controller_updated_at")]
    pub controller_updated_at: String,
    /// Whether the shards are disabled. Only pertinent to tasks. Omitted if false.
    #[serde(rename = "disable")]
    pub disable: bool,
    #[serde(rename = "last_build_id")]
    pub last_build_id: String,
    #[serde(rename = "last_pub_id")]
    pub last_pub_id: String,
    #[serde(rename = "live_spec_id")]
    pub live_spec_id: String,
    /// Time of the last publication that affected the live spec.
    #[serde(rename = "live_spec_updated_at")]
    pub live_spec_updated_at: String,
    #[serde(rename = "spec_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub spec_type: Option<Option<models::CatalogType>>,
}

impl StatusResponse {
    pub fn new(catalog_name: String, controller_failures: i32, controller_next_run: Option<String>, controller_status: models::StatusResponseControllerStatus, controller_updated_at: String, disable: bool, last_build_id: String, last_pub_id: String, live_spec_id: String, live_spec_updated_at: String) -> StatusResponse {
        StatusResponse {
            catalog_name,
            controller_error: None,
            controller_failures,
            controller_next_run,
            controller_status: Box::new(controller_status),
            controller_updated_at,
            disable,
            last_build_id,
            last_pub_id,
            live_spec_id,
            live_spec_updated_at,
            spec_type: None,
        }
    }
}

