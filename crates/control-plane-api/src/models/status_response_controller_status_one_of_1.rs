/*
 * Flow Control Plane V0 API
 *
 * some description here
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// StatusResponseControllerStatusOneOf1 : The status of a collection controller
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatusResponseControllerStatusOneOf1 {
    #[serde(rename = "activation", skip_serializing_if = "Option::is_none")]
    pub activation: Option<Box<models::ActivationStatus>>,
    #[serde(rename = "inferred_schema", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub inferred_schema: Option<Option<Box<models::InferredSchemaStatus>>>,
    #[serde(rename = "publications", skip_serializing_if = "Option::is_none")]
    pub publications: Option<Box<models::PublicationStatus>>,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl StatusResponseControllerStatusOneOf1 {
    /// The status of a collection controller
    pub fn new(r#type: Type) -> StatusResponseControllerStatusOneOf1 {
        StatusResponseControllerStatusOneOf1 {
            activation: None,
            inferred_schema: None,
            publications: None,
            r#type,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Collection")]
    Collection,
}

impl Default for Type {
    fn default() -> Type {
        Self::Collection
    }
}

