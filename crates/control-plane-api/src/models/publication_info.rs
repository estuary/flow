/*
 * Flow Control Plane V0 API
 *
 * some description here
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PublicationInfo : Summary of a publication that was attempted by a controller.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublicationInfo {
    /// Time at which the publication was completed
    #[serde(rename = "completed", skip_serializing_if = "Option::is_none")]
    pub completed: Option<String>,
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// Time at which the publication was initiated
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// A brief description of the reason for the publication
    #[serde(rename = "detail", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub detail: Option<Option<String>>,
    /// Errors will be non-empty for publications that were not successful
    #[serde(rename = "errors", skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<models::Error>>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "is_touch", skip_serializing_if = "Option::is_none")]
    pub is_touch: Option<bool>,
    #[serde(rename = "result", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub result: Option<Option<Box<models::JobStatus>>>,
}

impl PublicationInfo {
    /// Summary of a publication that was attempted by a controller.
    pub fn new(id: String) -> PublicationInfo {
        PublicationInfo {
            completed: None,
            count: None,
            created: None,
            detail: None,
            errors: None,
            id,
            is_touch: None,
            result: None,
        }
    }
}

