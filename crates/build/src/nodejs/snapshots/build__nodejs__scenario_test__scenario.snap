---
source: crates/build/src/nodejs/scenario_test.rs
expression: intents

---
{
    ".eslintrc.js": IfNotExists:
    module.exports = {
      root: true,
      parser: '@typescript-eslint/parser',
      ignorePatterns: [
        // Don't lint already-built outputs.
        "dist",
        // Don't lint the NPM package directory.
        "node_modules",
        // Uncomment to skip linting of external sources.
        /* "flow_generated/external" */
      ],
      parserOptions: {
        tsconfigRootDir: __dirname,
        project: ['./tsconfig.json'],
      },
      plugins: ['@typescript-eslint'],
      extends: [
        // Core eslint recommendations.
        'eslint:recommended',
        // Disable eslint:recommend rules covered by the typescript linter plugin.
        'plugin:@typescript-eslint/eslint-recommended',
        // Enable recommend typescript rules.
        'plugin:@typescript-eslint/recommended',
        // Enable recommend typescript rules which require type information from `tsc`.
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
        // Disable rules from @typescript-eslint/eslint-plugin that conflict with prettier
        'prettier/@typescript-eslint',
        // Enable eslint-plugin-prettier and eslint-config-prettier.
        // This will display prettier errors as ESLint errors.
        // This must be last configuration in the extends array.
        'plugin:prettier/recommended'
      ],
      // Opt-in to several additional rules.
      rules:  {
        // Disable camel-case linting, as identifier names are often drawn from JSON-Schemas
        // which are outside of the author's control.
        "@typescript-eslint/camelcase": "off",
        // Allow variables prefixed with underscore to be unused.
        "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_.*" }],
        // Flow lambdas always return promises, but not all implementations need to be async.
        "@typescript-eslint/require-await": "off",
        // Require that created promises are used (await'd), and not silently dropped.
        "@typescript-eslint/no-floating-promises": "error",
        // Disallow uses of foo?.bar! (it's not possible to know that bar exists, since foo may not).
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        // Require functions returning Promise to be async. This avoids needing to handle a non-async
        // function which can technically throw an Error *OR* return a rejected Promise. With this
        // lint, a function can throw (if non-async) or reject (if async) but never both.
        "@typescript-eslint/promise-function-async": "error",
        // When adding two operands, each must be of type string or number, and cannot mix.
        "@typescript-eslint/restrict-plus-operands": ["error", { "checkCompoundAssignments": true }],
        // Switches over enum types should check all cases (or use explicit "default").
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        // Warn on superfluous checks of boolean types against boolean literals (if (foo: bool === true) {}).
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
        // Warn on conditionals which are always truthy or falsy.
        "@typescript-eslint/no-unnecessary-condition": "warn",
        // Warn on "for (let i = 0; i != arr.length; i++)" syntax instead of for-of "for(const i in arr)".
        "@typescript-eslint/prefer-for-of": "warn",
      },
    };
    ,
    ".prettierrc.js": IfNotExists:
    module.exports = {
      semi: true,
      trailingComma: "all",
      singleQuote: true,
      printWidth: 120,
      tabWidth: 4
    };
    ,
    "flow_generated/external/example/external/module.ts": Always:
    {"Remote":"Content"},
    "flow_generated/flow/anchors.d.ts": Always:
    // Ensure module has at least one export, even if otherwise empty.
    export type __module = null;
    
    // Generated from test://example/int-string.schema#/$defs/anAnchor.
    export type AnAnchor = {
        one: string;
        two?: number;
    };
    
    // Generated from test://example/int-string.schema#/$defs/otherAnchor.
    export type OtherAnchor = {
        anAnchor?: AnAnchor;
        three: string;
    };
    ,
    "flow_generated/flow/collections.d.ts": Always:
    import * as anchors from './anchors';
    
    // "Use" imported modules, even if they're empty, to satisfy compiler and linting.
    export type __module = null;
    export type __anchors_module = anchors.__module;
    
    // Generated from test://example/int-string.schema.
    // Referenced as schema of test://example/external/module.yaml#/collections/external~1derivation.
    export type ExternalDerivation = {
        anAnchor?: anchors.AnAnchor;
        int: number;
        str: string;
    };
    
    // Generated from test://example/int-number.schema.
    // Referenced as schema of sub/module.yaml#/collections/local~1derivation.
    export type LocalDerivation = {
        int: number;
        num: number;
    };
    
    // Generated from test://example/int-string.schema.
    // Referenced as schema of test://example/catalog.yaml#/collections/some~1input.
    export type SomeInput = {
        anAnchor?: anchors.AnAnchor;
        int: number;
        str: string;
    };
    ,
    "flow_generated/flow/interfaces.d.ts": Always:
    import * as collections from './collections';
    import * as registers from './registers';
    import * as transforms from './transforms';
    
    // "Use" imported modules, even if they're empty, to satisfy compiler and linting.
    export type __module = null;
    export type __collections_module = collections.__module;
    export type __registers_module = registers.__module;
    export type __transforms_module = transforms.__module;
    
    // Generated from derivation test://example/external/module.yaml#/collections/external~1derivation/derivation.
    // Required to be implemented by test://example/external/module.ts.
    export interface ExternalDerivation {
        somethingSomethingPublish(
            source: collections.SomeInput,
            register: registers.ExternalDerivation,
            previous: registers.ExternalDerivation,
        ): collections.ExternalDerivation[];
    }
    
    // Generated from derivation sub/module.yaml#/collections/local~1derivation/derivation.
    // Required to be implemented by sub/module.ts.
    export interface LocalDerivation {
        thereItIsUpdate(
            source: collections.LocalDerivation,
        ): registers.LocalDerivation[];
        whootPublish(
            source: collections.SomeInput,
            register: registers.LocalDerivation,
            previous: registers.LocalDerivation,
        ): collections.LocalDerivation[];
    }
    ,
    "flow_generated/flow/main.ts": IfNotExists:
    #!/usr/bin/env node
    import { Server } from './server';
    
    function main(): void {
        if (!process.env.SOCKET_PATH) {
            throw new Error('SOCKET_PATH environment variable is required');
        }
        new Server(process.env.SOCKET_PATH).start();
    
        console.error('READY');
    }
    main();
    ,
    "flow_generated/flow/modules.d.ts": IfNotExists:
    import * as anchors from './anchors';
    import * as collections from './collections';
    import * as interfaces from './interfaces';
    import * as registers from './registers';
    import * as transforms from './transforms';
    
    export { anchors, collections, interfaces, registers, transforms };
    ,
    "flow_generated/flow/registers.d.ts": Always:
    import * as anchors from './anchors';
    
    // "Use" imported modules, even if they're empty, to satisfy compiler and linting.
    export type __module = null;
    export type __anchors_module = anchors.__module;
    
    // Generated from test://example/external/module.yaml?ptr=/collections/external~1derivation/derivation/register/schema.
    // Referenced as register_schema of test://example/external/module.yaml#/collections/external~1derivation/derivation.
    export type ExternalDerivation = number;
    
    // Generated from sub/module.yaml?ptr=/collections/local~1derivation/derivation/register/schema.
    // Referenced as register_schema of sub/module.yaml#/collections/local~1derivation/derivation.
    export type LocalDerivation = unknown;
    ,
    "flow_generated/flow/routes.ts": Always:
    import * as interfaces from './interfaces';
    
    // Document is a relaxed signature for a Flow document of any kind.
    export type Document = unknown;
    // Lambda is a relaxed signature implemented by all Flow transformation lambdas.
    export type Lambda = (source: Document, register?: Document, previous?: Document) => Document[];
    
    // "Use" imported modules, even if they're empty, to satisfy compiler and linting.
    export type __interfaces_module = interfaces.__module;
    // Import derivation classes from their implementation modules.
    import {
        LocalDerivation,
    } from '../../sub/module';
    
    import {
        ExternalDerivation,
    } from '../../flow_generated/external/example/external/module';
    
    // Build instances of each class, which will be bound to this module's router.
    const __ExternalDerivation: interfaces.ExternalDerivation = new ExternalDerivation();
    const __LocalDerivation: interfaces.LocalDerivation = new LocalDerivation();
    
    // Now build the router that's used for transformation lambda dispatch.
    const routes: { [path: string]: Lambda | undefined } = {
        '/derive/external/derivation/somethingSomething/Publish': __ExternalDerivation.somethingSomethingPublish.bind(
            __ExternalDerivation,
        ) as Lambda,
        '/derive/local/derivation/thereItIs/Update': __LocalDerivation.thereItIsUpdate.bind(
            __LocalDerivation,
        ) as Lambda,
        '/derive/local/derivation/whoot/Publish': __LocalDerivation.whootPublish.bind(
            __LocalDerivation,
        ) as Lambda,
    };
    
    export { routes };
    ,
    "flow_generated/flow/server.ts": IfNotExists:
    import * as h2 from 'http2';
    
    import { routes, Document, Lambda } from './routes';
    
    // Server serves transform lambda invocation requests, streaming source
    // collection documents, processing each via the designated transform, and
    // streaming resulting derived documents in response.
    export class Server {
        listenPath: string;
    
        constructor(listenPath: string) {
            this.listenPath = listenPath;
        }
    
        start(): void {
            const server = h2.createServer();
            server.on('stream', this._processStream.bind(this));
            server.on('error', console.error);
            server.listen({ path: this.listenPath });
        }
    
        _processStream(req: h2.ServerHttp2Stream, headers: h2.IncomingHttpHeaders): void {
            const malformed = (msg: string): void => {
                req.respond({
                    ':status': 400,
                    'content-type': 'text/plain',
                });
                req.end(msg + '\n'); // Send message & EOF.
            };
    
            const path = headers[':path'];
            if (path === undefined) {
                return malformed('expected :path header');
            }
    
            const lambda: Lambda | undefined = routes[path];
            if (lambda === undefined) {
                return malformed(`route ${path} is not defined`);
            }
    
            // Gather and join all data buffers.
            const chunks: string[] = [];
    
            req.on('data', (chunk: string) => {
                chunks.push(chunk);
            });
    
            req.on('end', () => {
                // Join input chunks and parse into an array of invocation rows.
                const [sources, registers] = JSON.parse(chunks.join('')) as [Document[], Document[][] | undefined];
    
                // Map each row into a future which will return Document[].
                const futures = sources.map(async (source, index) => {
                    const previous = registers ? registers[index][0] : undefined;
                    const register = registers ? registers[index][1] : undefined;
    
                    return lambda(source, register || previous, previous);
                });
    
                // When all rows resolve, return the Document[][] to the caller.
                Promise.all(futures)
                    .then((rows: Document[][]) => {
                        const body = Buffer.from(JSON.stringify(rows), 'utf8');
    
                        req.respond({
                            ':status': 200,
                            'content-type': 'application/json',
                            'content-length': body.length,
                        });
                        req.end(body);
                    })
                    .catch((err: Error) => {
                        // Send |err| to peer, and log to console.
                        req.respond({
                            ':status': 400,
                            'content-type': 'text/plain',
                        });
                        req.end(`${err.name}: (${err.message})\n`);
                        console.error(err);
                    });
            });
    
            req.on('error', (err) => {
                console.error(err);
            });
        }
    }
    ,
    "flow_generated/flow/transforms.d.ts": Always:
    import * as anchors from './anchors';
    
    // "Use" imported modules, even if they're empty, to satisfy compiler and linting.
    export type __module = null;
    export type __anchors_module = anchors.__module;
    ,
    "flow_generated/tsconfig-files.json": Always:
    {
      "files": [
        "../flow_generated/external/example/external/module.ts",
        "../flow_generated/flow/anchors.d.ts",
        "../flow_generated/flow/collections.d.ts",
        "../flow_generated/flow/interfaces.d.ts",
        "../flow_generated/flow/main.ts",
        "../flow_generated/flow/modules.d.ts",
        "../flow_generated/flow/registers.d.ts",
        "../flow_generated/flow/routes.ts",
        "../flow_generated/flow/server.ts",
        "../flow_generated/flow/transforms.d.ts",
        "../sub/module.ts"
      ]
    },
    "package.json": Always:
    {
      "dependencies": {
        "barPkg": "v4.5.6",
        "fooPkg": "v1.2.3"
      },
      "bundledDependencies": [
        "barPkg",
        "fooPkg"
      ],
      "bin": "dist/flow_generated/flow/main.js",
      "description": "NodeJS runtime of an Estuary catalog",
      "devDependencies": {
        "@types/node": "^14.0",
        "@typescript-eslint/eslint-plugin": "^4.14",
        "@typescript-eslint/parser": "^4.14",
        "eslint": "^7.18",
        "eslint-config-prettier": "^7.2",
        "eslint-plugin-prettier": "^3.3",
        "prettier": "^2.2",
        "typescript": "^4.1"
      },
      "engines": {
        "node": ">=10.10"
      },
      "enginesStrict": true,
      "files": [
        "dist"
      ],
      "license": "UNLICENSED",
      "name": "catalog-js-transformer",
      "private": true,
      "scripts": {
        "clean": "rm -r dist/",
        "compile": "tsc",
        "develop": "node dist/flow_generated/flow/main.js",
        "lint": "cd flow_generated && eslint --fix $(jq '.files[]' -r tsconfig-files.json)"
      },
      "version": "0.0.0"
    }
    ,
    "sub/module.ts": IfNotExists:
    import { collections, interfaces, registers } from 'flow/modules';
    
    // Implementation for derivation sub/module.yaml#/collections/local~1derivation/derivation.
    export class LocalDerivation implements interfaces.LocalDerivation {
        thereItIsUpdate(
            source: collections.LocalDerivation,
        ): registers.LocalDerivation[] {
            throw new Error("Not implemented");
        }
        whootPublish(
            source: collections.SomeInput,
            register: registers.LocalDerivation,
            previous: registers.LocalDerivation,
        ): collections.LocalDerivation[] {
            throw new Error("Not implemented");
        }
    }
    ,
    "tsconfig.json": IfNotExists:
    {
    	"compilerOptions": {
    		"allowUnreachableCode": false,
    		"allowUnusedLabels": false,
    		"forceConsistentCasingInFileNames": true,
    		"incremental": true,
    		"lib": [
    			"ES2020"
    		],
    		"module": "commonjs",
    		"noEmitOnError": true,
    		"noFallthroughCasesInSwitch": true,
    		"noImplicitReturns": true,
    		"pretty": true,
    		"sourceMap": true,
    		"strict": true,
    		"target": "ES2020",
    		"rootDir": ".",
    		"outDir": "dist",
    		// Any non-relative modules are resolved against this base directory.
    		"baseUrl": ".",
    		"paths": {
    			// As a bit of sugar, resolve flow/modules to flow_generated/flow/*.
    			// This is a types-only module, and doesn't require runtime loading.
    			// Otherwise, a tool like `tspath` must be used to re-write absolute
    			// imports in TypeScript code into relative imports in produced JavaScript.
    			"flow/modules": [
    				"flow_generated/flow/modules"
    			]
    		}
    	},
    	"extends": "./flow_generated/tsconfig-files"
    },
}
